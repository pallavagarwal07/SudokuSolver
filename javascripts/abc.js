// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 10224;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0,0,40,1,0,0,40,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,209,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,201,33,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,105,99,111,115,97,116,46,99,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,105,110,99,111,109,112,108,101,116,101,32,99,108,97,117,115,101,10,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,97,100,100,105,110,103,32,116,111,111,32,109,97,110,121,32,99,108,97,117,115,101,115,32,97,102,116,101,114,32,82,85,80,32,104,101,97,100,101,114,32,119,114,105,116,116,101,110,10,0,40,112,115,45,62,115,111,99,108,97,117,115,101,115,41,32,60,61,32,40,112,115,45,62,101,111,115,111,41,0,112,105,99,111,115,97,116,95,97,100,100,0,112,115,45,62,115,116,97,116,101,32,61,61,32,82,69,65,68,89,0,112,105,99,111,115,97,116,95,115,97,116,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,99,97,110,32,110,111,116,32,100,101,114,101,102,32,122,101,114,111,32,108,105,116,101,114,97,108,10,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,100,101,114,101,102,32,97,102,116,101,114,32,101,109,112,116,121,32,99,108,97,117,115,101,32,103,101,110,101,114,97,116,101,100,10,0,112,115,45,62,102,97,105,108,101,100,95,97,115,115,117,109,112,116,105,111,110,0,37,100,32,0,48,10,0,114,45,62,112,111,115,32,62,32,48,0,104,100,111,119,110,0,112,115,45,62,104,101,97,112,91,114,45,62,112,111,115,93,32,61,61,32,114,0,33,112,115,45,62,115,105,109,112,108,105,102,121,105,110,103,0,104,117,112,0,48,32,60,32,118,112,111,115,0,118,112,111,115,32,60,32,112,115,45,62,104,104,101,97,100,32,45,32,112,115,45,62,104,101,97,112,0,112,115,45,62,104,101,97,112,91,118,112,111,115,93,32,61,61,32,118,0,112,115,45,62,114,104,101,97,100,32,61,61,32,112,115,45,62,114,101,115,111,108,118,101,100,0,114,101,100,117,99,101,0,112,101,114,99,101,110,116,97,103,101,32,60,61,32,49,48,48,0,40,112,115,45,62,114,101,115,111,108,118,101,100,41,32,60,61,32,40,112,115,45,62,101,111,114,41,0,33,99,45,62,99,111,108,108,101,99,116,0,112,115,45,62,114,104,101,97,100,32,60,32,112,115,45,62,101,111,114,0,112,115,45,62,114,104,101,97,100,32,60,61,32,112,115,45,62,101,111,114,0,112,115,45,62,105,104,101,97,100,32,61,61,32,112,115,45,62,105,110,100,105,99,101,115,0,114,114,32,45,32,108,108,32,62,32,73,78,83,69,82,84,73,79,78,95,83,79,82,84,95,76,73,77,73,84,0,40,112,115,45,62,105,110,100,105,99,101,115,41,32,60,61,32,40,112,115,45,62,101,111,105,41,0,40,99,109,112,95,103,108,117,101,95,97,99,116,105,118,105,116,121,95,115,105,122,101,41,40,112,115,44,32,40,97,97,41,91,105,93,44,32,40,97,97,41,91,105,32,43,32,49,93,41,32,60,61,32,48,0,112,115,45,62,110,108,99,108,97,117,115,101,115,32,62,61,32,108,99,111,108,108,101,99,116,0,99,45,62,108,105,116,115,91,49,93,32,61,61,32,108,105,116,0,99,111,108,108,101,99,116,95,99,108,97,117,115,101,115,0,112,115,45,62,99,117,114,114,101,110,116,95,98,121,116,101,115,32,60,61,32,114,101,115,0,99,45,62,99,111,108,108,101,99,116,0,99,111,108,108,101,99,116,95,99,108,97,117,115,101,0,99,45,62,99,111,110,110,101,99,116,101,100,0,100,105,115,99,111,110,110,101,99,116,95,99,108,97,117,115,101,0,112,115,45,62,110,108,99,108,97,117,115,101,115,32,62,32,48,0,112,115,45,62,108,108,105,116,115,32,62,61,32,99,45,62,115,105,122,101,0,112,115,45,62,110,111,99,108,97,117,115,101,115,32,62,32,48,0,112,115,45,62,111,108,105,116,115,32,62,61,32,99,45,62,115,105,122,101,0,99,45,62,108,101,97,114,110,101,100,0,99,109,112,95,103,108,117,101,95,97,99,116,105,118,105,116,121,95,115,105,122,101,0,100,45,62,108,101,97,114,110,101,100,0,40,99,41,45,62,108,101,97,114,110,101,100,0,40,99,41,45,62,115,105,122,101,32,62,32,50,0,40,100,41,45,62,108,101,97,114,110,101,100,0,40,100,41,45,62,115,105,122,101,32,62,32,50,0,109,97,114,107,95,99,108,97,117,115,101,95,116,111,95,98,101,95,99,111,108,108,101,99,116,101,100,0,33,114,45,62,112,111,115,0,104,112,117,115,104,0,40,112,115,45,62,104,101,97,112,41,32,60,61,32,40,112,115,45,62,101,111,104,41,0,101,97,32,62,61,32,101,98,0,97,100,100,102,108,116,0,109,97,32,60,32,70,76,84,67,65,82,82,89,0,109,32,60,32,70,76,84,77,83,66,0,112,97,99,107,102,108,116,0,70,76,84,77,73,78,69,88,80,79,78,69,78,84,32,60,61,32,101,0,101,32,60,61,32,70,76,84,77,65,88,69,88,80,79,78,69,78,84,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,101,120,112,101,99,116,101,100,32,116,111,32,98,101,32,105,110,32,83,65,84,44,32,85,78,83,65,84,44,32,111,114,32,85,78,75,78,79,87,78,32,115,116,97,116,101,10,0,33,112,115,45,62,109,116,99,108,115,0,42,42,42,32,112,105,99,111,115,97,116,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,39,110,101,119,39,10,0,33,115,105,122,101,0,100,101,108,101,116,101,0,115,105,122,101,0,115,105,122,101,32,60,61,32,112,115,45,62,99,117,114,114,101,110,116,95,98,121,116,101,115,0,98,45,62,104,101,97,100,101,114,46,115,105,122,101,32,61,61,32,115,105,122,101,0,112,115,45,62,109,104,101,97,100,32,61,61,32,112,115,45,62,109,97,114,107,101,100,0,40,112,115,45,62,109,97,114,107,101,100,41,32,60,61,32,40,112,115,45,62,101,111,109,41,0,118,45,62,109,97,114,107,0,111,116,104,101,114,45,62,118,97,108,32,61,61,32,84,82,85,69,0,118,97,114,50,114,101,97,115,111,110,0,116,104,105,115,45,62,118,97,108,32,61,61,32,84,82,85,69,0,33,112,115,45,62,105,109,112,108,118,97,108,105,100,0,115,101,116,105,109,112,108,0,112,115,45,62,105,109,112,108,46,115,105,122,101,32,61,61,32,50,0,97,32,33,61,32,98,0,115,111,114,116,116,119,111,108,105,116,115,0,33,118,45,62,109,97,114,107,0,109,97,114,107,95,118,97,114,0,112,117,115,104,95,118,97,114,95,97,115,95,109,97,114,107,101,100,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,101,120,112,101,99,116,101,100,32,116,111,32,98,101,32,105,110,32,83,65,84,32,115,116,97,116,101,10,0,112,115,45,62,108,97,115,116,114,104,101,97,100,101,114,32,60,61,32,112,115,45,62,114,101,112,111,114,116,115,0,114,104,101,97,100,101,114,0,37,115,10,0,37,115,32,37,115,10,0,37,115,37,99,32,0,115,101,99,111,110,100,115,0,108,101,118,101,108,0,112,115,45,62,102,105,120,101,100,32,60,61,32,112,115,45,62,109,97,120,95,118,97,114,0,114,101,112,111,114,116,0,118,97,114,105,97,98,108,101,115,0,117,115,101,100,0,111,114,105,103,105,110,97,108,0,99,111,110,102,108,105,99,116,115,0,108,101,97,114,110,101,100,0,108,105,109,105,116,0,97,103,105,108,105,116,121,0,77,66,0,37,54,115,0,0,37,54,115,37,49,48,115,0,37,45,49,48,115,37,52,115,0,102,112,0,114,101,108,101,109,104,101,97,100,0,45,37,52,46,49,102,32,0,45,37,50,117,101,37,117,32,0,37,53,46,49,102,32,0,37,53,117,32,0,37,51,117,101,37,117,32,0,33,112,115,45,62,76,69,86,69,76,0,115,97,116,0,33,115,97,116,105,115,102,105,101,100,40,112,115,41,0,100,101,99,105,100,101,0,33,112,115,45,62,99,111,110,102,108,105,99,116,0,108,105,116,0,97,115,115,105,103,110,95,100,101,99,105,115,105,111,110,0,108,105,116,45,62,118,97,108,32,61,61,32,85,78,68,69,70,0,97,115,115,105,103,110,0,112,115,45,62,108,105,116,115,32,60,32,108,105,116,32,38,38,32,108,105,116,32,60,61,32,112,115,45,62,108,105,116,115,32,43,32,50,32,42,32,112,115,45,62,109,97,120,95,118,97,114,32,43,32,49,0,116,112,117,115,104,0,40,112,115,45,62,116,114,97,105,108,41,32,60,61,32,40,112,115,45,62,101,111,116,41,0,114,101,97,115,111,110,32,33,61,32,38,112,115,45,62,105,109,112,108,0,97,115,115,105,103,110,95,114,101,97,115,111,110,0,76,73,84,50,83,71,78,40,108,105,116,41,32,62,32,48,0,100,101,99,105,100,101,95,112,104,97,115,101,0,108,111,119,32,60,61,32,104,105,103,104,0,114,114,110,103,0,108,111,119,32,60,61,32,114,101,115,0,114,101,115,32,60,61,32,104,105,103,104,0,112,115,45,62,104,104,101,97,100,32,62,32,112,115,45,62,104,101,97,112,32,43,32,49,0,104,112,111,112,0,104,116,111,112,0,49,32,60,61,32,112,115,45,62,109,97,120,95,118,97,114,0,114,100,101,99,105,100,101,0,49,32,60,61,32,100,101,108,116,97,0,100,101,108,116,97,32,60,61,32,112,115,45,62,109,97,120,95,118,97,114,0,97,0,103,99,100,0,98,0,97,32,62,61,32,98,0,112,115,45,62,97,108,115,32,60,32,112,115,45,62,97,108,115,104,101,97,100,0,97,100,101,99,105,100,101,0,33,112,115,45,62,102,97,105,108,101,100,95,97,115,115,117,109,112,116,105,111,110,0,102,97,110,97,108,121,122,101,0,112,115,45,62,102,97,105,108,101,100,95,97,115,115,117,109,112,116,105,111,110,45,62,118,97,108,32,61,61,32,70,65,76,83,69,0,112,115,45,62,97,104,101,97,100,32,61,61,32,112,115,45,62,97,100,100,101,100,0,114,101,97,115,111,110,45,62,108,111,99,107,101,100,0,112,115,45,62,108,108,111,99,107,101,100,32,62,32,48,0,33,99,45,62,108,111,99,107,101,100,0,37,115,102,97,110,97,108,121,122,101,32,116,111,111,107,32,37,46,49,102,32,115,101,99,111,110,100,115,10,0,111,116,104,101,114,45,62,118,97,108,32,61,61,32,70,65,76,83,69,0,105,109,112,108,50,114,101,97,115,111,110,0,40,112,115,45,62,108,105,116,115,32,43,32,40,49,32,94,32,40,40,111,116,104,101,114,41,45,112,115,45,62,108,105,116,115,41,41,41,45,62,118,97,108,32,61,61,32,84,82,85,69,0,112,115,45,62,97,100,100,101,100,99,108,97,117,115,101,115,32,61,61,32,112,115,45,62,108,97,100,100,101,100,32,43,32,112,115,45,62,111,97,100,100,101,100,0,97,100,100,95,115,105,109,112,108,105,102,105,101,100,95,99,108,97,117,115,101,0,40,112,115,45,62,108,99,108,97,117,115,101,115,41,32,60,61,32,40,112,115,45,62,69,79,76,41,0,40,112,115,45,62,111,99,108,97,117,115,101,115,41,32,60,61,32,40,112,115,45,62,101,111,111,41,0,112,115,45,62,69,79,76,32,33,61,32,112,115,45,62,111,99,108,97,117,115,101,115,0,112,115,45,62,100,117,115,101,100,104,101,97,100,32,61,61,32,112,115,45,62,100,117,115,101,100,0,108,105,116,108,101,118,101,108,32,60,61,32,112,115,45,62,76,69,86,69,76,0,40,112,115,45,62,108,101,118,101,108,115,41,32,60,61,32,40,112,115,45,62,101,111,108,101,118,101,108,115,41,0,112,115,45,62,108,101,118,101,108,115,104,101,97,100,32,60,32,112,115,45,62,101,111,108,101,118,101,108,115,0,40,112,115,45,62,100,117,115,101,100,41,32,60,61,32,40,112,115,45,62,101,111,100,117,115,101,100,41,0,112,115,45,62,100,117,115,101,100,104,101,97,100,32,60,32,112,115,45,62,101,111,100,117,115,101,100,0,112,115,45,62,108,101,118,101,108,115,32,43,32,108,105,116,108,101,118,101,108,32,60,32,112,115,45,62,108,101,118,101,108,115,104,101,97,100,0,112,115,45,62,108,101,118,101,108,115,91,108,105,116,108,101,118,101,108,93,0,103,108,117,101,32,60,61,32,77,65,88,71,76,85,69,0,112,115,45,62,108,104,101,97,100,32,33,61,32,112,115,45,62,111,99,108,97,117,115,101,115,0,110,117,109,95,102,97,108,115,101,32,43,32,110,117,109,95,116,114,117,101,32,43,32,110,117,109,95,117,110,100,101,102,32,61,61,32,115,105,122,101,0,115,105,122,101,32,60,61,32,50,32,124,124,32,33,114,101,101,110,116,101,114,101,100,0,99,111,117,110,116,95,114,101,115,111,108,118,101,100,32,62,61,32,50,0,33,112,115,45,62,99,105,109,112,108,118,97,108,105,100,0,115,101,116,99,105,109,112,108,0,112,115,45,62,99,105,109,112,108,46,115,105,122,101,32,61,61,32,50,0,114,101,97,115,111,110,0,97,115,115,105,103,110,95,102,111,114,99,101,100,0,33,114,101,97,115,111,110,45,62,108,111,99,107,101,100,0,86,65,82,50,76,73,84,40,118,41,32,33,61,32,85,78,68,69,70,0,102,105,120,118,97,114,0,33,118,45,62,108,101,118,101,108,0,114,101,115,111,108,118,101,95,116,111,112,95,108,101,118,101,108,95,117,110,105,116,0,114,101,97,115,111,110,32,61,61,32,38,112,115,45,62,105,109,112,108,0,99,45,62,115,105,122,101,32,62,61,32,49,0,99,111,110,110,101,99,116,95,104,101,97,100,95,116,97,105,108,0,99,45,62,115,105,122,101,32,62,61,32,50,0,99,45,62,115,105,122,101,32,61,61,32,50,0,108,112,117,115,104,0,33,115,45,62,99,111,117,110,116,0,33,115,45,62,108,100,115,105,122,101,0,115,45,62,99,111,117,110,116,32,60,61,32,111,108,100,115,105,122,101,0,37,37,82,85,80,68,51,50,32,37,117,32,37,117,0,40,114,101,115,41,45,62,108,101,97,114,110,101,100,0,110,101,119,95,99,108,97,117,115,101,0,40,114,101,115,41,45,62,115,105,122,101,32,62,32,50,0,115,111,114,116,108,105,116,115,0,40,99,109,112,95,97,100,100,101,100,41,40,112,115,44,32,40,97,97,41,91,105,93,44,32,40,97,97,41,91,105,32,43,32,49,93,41,32,60,61,32,48,0,98,32,33,61,32,85,78,68,69,70,0,99,109,112,95,97,100,100,101,100,0,99,0,97,100,100,95,97,110,116,101,99,101,100,101,110,116,0,112,115,45,62,99,111,110,102,108,105,99,116,115,32,62,61,32,112,115,45,62,108,114,101,115,116,97,114,116,0,114,101,115,116,97,114,116,0,112,115,45,62,76,69,86,69,76,32,62,32,49,0,117,110,100,111,0,112,115,45,62,99,105,109,112,108,118,97,108,105,100,0,114,101,115,101,116,99,105,109,112,108,0,108,105,116,45,62,118,97,108,32,61,61,32,84,82,85,69,0,117,110,97,115,115,105,103,110,0,112,45,62,108,105,116,115,91,49,93,32,61,61,32,108,105,116,0,105,116,101,114,97,116,105,111,110,0,98,99,112,95,113,117,101,117,101,95,105,115,95,101,109,112,116,121,40,112,115,41,0,112,115,45,62,105,115,105,109,112,108,105,102,121,32,60,32,112,115,45,62,102,105,120,101,100,0,97,115,115,117,109,112,116,105,111,110,115,95,115,97,116,105,115,102,105,101,100,0,99,108,97,117,115,101,95,115,97,116,105,115,102,105,101,100,40,99,41,0,111,114,105,103,105,110,97,108,95,99,108,97,117,115,101,115,95,115,97,116,105,115,102,105,101,100,0,108,32,62,32,48,0,99,114,101,115,99,111,114,101,0,97,99,99,117,32,60,32,70,76,84,67,65,82,82,89,0,109,117,108,102,108,116,0,97,99,99,117,32,38,32,70,76,84,77,83,66,0,37,115,10,37,115,105,110,105,116,105,97,108,32,114,101,100,117,99,116,105,111,110,32,108,105,109,105,116,32,37,117,32,99,108,97,117,115,101,115,10,37,115,10,0,115,97,116,105,115,102,105,101,100,0,33,102,111,114,99,101,100,0,102,111,114,99,101,0,40,112,115,45,62,108,105,116,115,32,43,32,40,49,32,94,32,40,40,112,91,112,32,61,61,32,99,45,62,108,105,116,115,32,63,32,49,32,58,32,45,49,93,41,45,112,115,45,62,108,105,116,115,41,41,41,45,62,118,97,108,32,61,61,32,84,82,85,69,0,108,105,116,45,62,118,97,108,32,61,61,32,70,65,76,83,69,0,118,108,101,118,101,108,32,60,61,32,112,115,45,62,76,69,86,69,76,0,100,114,105,118,101,0,112,115,45,62,99,111,110,102,108,105,99,116,0,97,110,97,108,121,122,101,0,33,117,45,62,108,101,118,101,108,0,117,45,62,114,101,97,115,111,110,0,112,115,45,62,76,69,86,69,76,0,115,116,97,114,116,45,62,109,97,114,107,0,115,116,97,114,116,32,33,61,32,117,105,112,0,115,116,97,114,116,45,62,108,101,118,101,108,32,60,32,112,115,45,62,76,69,86,69,76,0,112,115,45,62,100,104,101,97,100,32,61,61,32,112,115,45,62,100,102,115,0,117,45,62,109,97,114,107,0,33,118,45,62,114,101,115,111,108,118,101,100,0,112,115,45,62,97,104,101,97,100,32,60,61,32,112,115,45,62,101,111,97,0,112,115,45,62,100,102,115,32,60,32,112,115,45,62,100,104,101,97,100,0,112,111,112,0,40,112,115,45,62,100,102,115,41,32,60,61,32,40,112,115,45,62,101,111,100,41,0,112,117,115,104,0,115,99,111,114,101,32,33,61,32,73,78,70,70,76,84,0,105,110,99,95,115,99,111,114,101,0,115,99,111,114,101,32,60,32,73,78,70,70,76,84,0,105,110,99,95,97,99,116,105,118,105,116,121,0,98,99,112,0,116,104,105,115,45,62,118,97,108,32,61,61,32,70,65,76,83,69,0,112,114,111,112,108,0,99,45,62,115,105,122,101,32,62,32,48,0,99,45,62,115,105,122,101,32,33,61,32,49,0,111,116,104,101,114,32,61,61,32,116,104,105,115,32,38,38,32,99,45,62,115,105,122,101,32,62,32,49,0,111,116,104,101,114,32,61,61,32,99,45,62,108,105,116,115,91,49,93,0,116,104,105,115,32,61,61,32,99,45,62,108,105,116,115,91,48,93,0,110,101,120,116,32,61,61,32,99,45,62,110,101,120,116,91,48,93,0,99,45,62,108,105,116,115,91,48,93,32,61,61,32,116,104,105,115,0,110,101,119,95,108,105,116,45,62,118,97,108,32,61,61,32,84,82,85,69,32,124,124,32,110,101,119,95,108,105,116,45,62,118,97,108,32,61,61,32,85,78,68,69,70,0,115,104,111,117,108,100,95,100,105,115,99,111,110,110,101,99,116,95,104,101,97,100,95,116,97,105,108,0,112,114,111,112,50,0,40,112,115,45,62,108,105,116,115,32,43,32,40,49,32,94,32,40,40,116,104,105,115,41,45,112,115,45,62,108,105,116,115,41,41,41,45,62,118,97,108,32,61,61,32,84,82,85,69,0,112,115,45,62,97,108,115,116,97,105,108,32,61,61,32,112,115,45,62,97,108,115,0,97,115,115,117,109,101,0,40,112,115,45,62,97,108,115,41,32,60,61,32,40,112,115,45,62,101,111,97,108,115,41,0,115,105,109,112,108,105,102,121,95,97,110,100,95,97,100,100,95,111,114,105,103,105,110,97,108,95,99,108,97,117,115,101,0,116,114,105,118,105,97,108,95,99,108,97,117,115,101,0,40,99,109,112,95,112,116,114,41,40,112,115,44,32,40,97,97,41,91,105,93,44,32,40,97,97,41,91,105,32,43,32,49,93,41,32,60,61,32,48,0,97,100,100,95,108,105,116,0,40,112,115,45,62,97,100,100,101,100,41,32,60,61,32,40,112,115,45,62,101,111,97,41,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,73,78,84,95,77,73,78,32,108,105,116,101,114,97,108,10,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,110,101,119,32,118,97,114,105,97,98,108,101,32,105,110,100,101,120,32,97,102,116,101,114,32,39,112,105,99,111,115,97,116,95,112,117,115,104,39,10,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,116,114,121,105,110,103,32,116,111,32,105,109,112,111,114,116,32,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,10,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,116,114,121,105,110,103,32,116,111,32,105,109,112,111,114,116,32,105,110,118,97,108,105,100,32,99,111,110,116,101,120,116,10,0,115,116,114,0,110,101,119,95,112,114,101,102,105,120,0,115,105,109,112,108,105,102,121,0,102,111,114,99,101,100,32,124,124,32,112,115,45,62,108,115,105,109,112,108,105,102,121,32,60,61,32,112,115,45,62,112,114,111,112,97,103,97,116,105,111,110,115,0,102,111,114,99,101,100,32,124,124,32,112,115,45,62,102,115,105,109,112,108,105,102,121,32,60,61,32,112,115,45,62,102,105,120,101,100,0,112,115,45,62,116,116,97,105,108,32,61,61,32,112,115,45,62,116,104,101,97,100,0,112,115,45,62,116,116,97,105,108,50,32,61,61,32,112,115,45,62,116,104,101,97,100,0,76,73,84,50,73,78,84,40,108,105,116,41,32,60,32,48,0,48,32,60,32,105,108,105,116,32,38,38,32,105,108,105,116,32,60,61,32,40,105,110,116,41,112,115,45,62,109,97,120,95,118,97,114,0,118,45,62,105,110,116,101,114,110,97,108,0,110,111,116,108,105,116,45,62,118,97,108,32,61,61,32,85,78,68,69,70,0,112,115,45,62,118,97,114,115,91,105,108,105,116,93,46,105,110,116,101,114,110,97,108,0,40,112,115,45,62,114,105,108,115,41,32,60,61,32,40,112,115,45,62,101,111,114,105,108,115,41,0,110,111,116,108,105,116,45,62,118,97,108,32,61,61,32,70,65,76,83,69,0,102,97,105,108,108,105,116,115,0,112,115,45,62,115,105,109,112,108,105,102,121,105,110,103,0,40,99,109,112,95,105,110,118,101,114,115,101,95,106,119,104,95,114,110,107,41,40,112,115,44,32,40,97,97,41,91,105,93,44,32,40,97,97,41,91,105,32,43,32,49,93,41,32,60,61,32,48,0,40,99,109,112,95,105,110,118,101,114,115,101,95,114,110,107,41,40,112,115,44,32,40,97,97,41,91,105,93,44,32,40,97,97,41,91,105,32,43,32,49,93,41,32,60,61,32,48,0,112,115,45,62,104,101,97,112,32,43,32,105,32,60,32,112,115,45,62,104,104,101,97,100,0,112,115,45,62,109,116,99,108,115,0,33,111,116,104,101,114,45,62,118,97,108,0,112,105,118,111,116,32,33,61,32,78,79,84,76,73,84,40,111,116,104,101,114,41,0,112,105,118,111,116,32,33,61,32,111,116,104,101,114,0,112,115,45,62,76,69,86,69,76,32,61,61,32,49,0,112,115,45,62,104,101,97,112,32,60,32,112,115,45,62,104,104,101,97,100,0,111,108,100,95,115,105,122,101,32,60,61,32,112,115,45,62,99,117,114,114,101,110,116,95,98,121,116,101,115,0,114,101,115,105,122,101,0,111,108,100,95,115,105,122,101,32,38,38,32,98,32,38,38,32,98,45,62,104,101,97,100,101,114,46,115,105,122,101,32,61,61,32,111,108,100,95,115,105,122,101,0,33,98,0,42,42,42,32,112,105,99,111,115,97,116,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,39,114,101,115,105,122,101,39,10,0,42,42,42,32,112,105,99,111,115,97,116,58,32,65,80,73,32,117,115,97,103,101,58,32,117,110,105,110,105,116,105,97,108,105,122,101,100,10,0,112,115,45,62,110,101,110,116,101,114,101,100,0,108,101,97,118,101,0,112,115,45,62,109,97,120,95,118,97,114,32,60,32,112,115,45,62,115,105,122,101,95,118,97,114,115,0,105,110,99,95,109,97,120,95,118,97,114,0,112,115,45,62,109,97,120,95,118,97,114,0,101,110,108,97,114,103,101,0,113,32,45,32,99,108,97,117,115,101,45,62,108,105,116,115,32,60,61,32,40,105,110,116,41,99,108,97,117,115,101,45,62,115,105,122,101,0,102,105,120,95,99,108,97,117,115,101,95,108,105,116,115,0,42,42,42,32,112,105,99,111,115,97,116,58,32,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,80,105,99,111,83,65,84,32,109,97,110,97,103,101,114,10,0,105,110,105,116,0,49,46,48,53,0,49,46,48,48,49,0,99,32,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall77(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getrusage
      var who = SYSCALLS.get(), usage = SYSCALLS.get();
      _memset(usage, 0, 136);
      HEAP32[((usage)>>2)]=1; // fake some values
      HEAP32[(((usage)+(4))>>2)]=2;
      HEAP32[(((usage)+(8))>>2)]=3;
      HEAP32[(((usage)+(12))>>2)]=4;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _BItoD=true;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _abs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_sysconf": _sysconf, "___lock": ___lock, "_pthread_cleanup_push": _pthread_cleanup_push, "___assert_fail": ___assert_fail, "_pthread_self": _pthread_self, "_abort": _abort, "___syscall77": ___syscall77, "___syscall6": ___syscall6, "_sbrk": _sbrk, "_time": _time, "_abs": _abs, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall146": ___syscall146, "___setErrNo": ___setErrNo, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _sysconf=env._sysconf;
  var ___lock=env.___lock;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___assert_fail=env.___assert_fail;
  var _pthread_self=env._pthread_self;
  var _abort=env._abort;
  var ___syscall77=env.___syscall77;
  var ___syscall6=env.___syscall6;
  var _sbrk=env._sbrk;
  var _time=env._time;
  var _abs=env._abs;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall146=env.___syscall146;
  var ___setErrNo=env.___setErrNo;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _conv($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $3 = $0;
 $4 = ($3*81)|0;
 $5 = $1;
 $6 = ($5*9)|0;
 $7 = (($4) + ($6))|0;
 $8 = $2;
 $9 = (($7) + ($8))|0;
 $10 = (($9) + 1)|0;
 STACKTOP = sp;return ($10|0);
}
function _inverse($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $num;
 $1 = (_malloc(12)|0);
 $arr = $1;
 $2 = $0;
 $3 = (($2) - 1)|0;
 $0 = $3;
 $4 = $0;
 $5 = (($4|0) / 81)&-1;
 $6 = $arr;
 HEAP32[$6>>2] = $5;
 $7 = $0;
 $8 = (($7|0) % 81)&-1;
 $0 = $8;
 $9 = $0;
 $10 = (($9|0) / 9)&-1;
 $11 = $arr;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13|0) % 9)&-1;
 $15 = $arr;
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = $14;
 $17 = $arr;
 STACKTOP = sp;return ($17|0);
}
function _solve($arr) {
 $arr = $arr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arr1 = 0, $arr2 = 0, $arr3 = 0, $arr4 = 0, $arr5 = 0, $arr6 = 0, $arr7 = 0, $arr8 = 0, $brr = 0, $col = 0, $i = 0, $indices = 0, $j = 0, $k = 0, $l = 0, $list = 0, $out = 0, $output = 0, $row = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp + 384|0;
 $brr = sp + 336|0;
 $output = sp + 8|0;
 $0 = $arr;
 $1 = (_picosat_init()|0);
 HEAP32[8>>2] = $1;
 $i = 0;
 $j = 0;
 $k = 0;
 $l = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(9);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($4|0) % 3)&-1;
  $6 = ($5*3)|0;
  $col = $6;
  $7 = $i;
  $8 = (($7|0) / 3)&-1;
  $9 = ($8*3)|0;
  $row = $9;
  $l = 0;
  $10 = $row;
  $j = $10;
  while(1) {
   $11 = $j;
   $12 = $row;
   $13 = (($12) + 3)|0;
   $14 = ($11|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $col;
   $k = $15;
   while(1) {
    $16 = $k;
    $17 = $col;
    $18 = (($17) + 3)|0;
    $19 = ($16|0)<($18|0);
    $20 = $j;
    if (!($19)) {
     break;
    }
    $21 = $l;
    $22 = $i;
    $23 = (($list) + (($22*72)|0)|0);
    $24 = (($23) + ($21<<3)|0);
    HEAP32[$24>>2] = $20;
    $25 = $k;
    $26 = $l;
    $27 = $i;
    $28 = (($list) + (($27*72)|0)|0);
    $29 = (($28) + ($26<<3)|0);
    $30 = ((($29)) + 4|0);
    HEAP32[$30>>2] = $25;
    $31 = $l;
    $32 = (($31) + 1)|0;
    $l = $32;
    $33 = $k;
    $34 = (($33) + 1)|0;
    $k = $34;
   }
   $35 = (($20) + 1)|0;
   $j = $35;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(9);
  if (!($39)) {
   break;
  }
  $j = 0;
  while(1) {
   $40 = $j;
   $41 = ($40|0)<(9);
   if (!($41)) {
    break;
   }
   $42 = (_malloc(40)|0);
   $arr1 = $42;
   $43 = $arr1;
   $44 = ((($43)) + 36|0);
   HEAP32[$44>>2] = 0;
   $k = 0;
   while(1) {
    $45 = $k;
    $46 = ($45|0)<(9);
    if (!($46)) {
     break;
    }
    $47 = $i;
    $48 = $j;
    $49 = $k;
    $50 = (_conv($47,$48,$49)|0);
    $51 = $k;
    $52 = $arr1;
    $53 = (($52) + ($51<<2)|0);
    HEAP32[$53>>2] = $50;
    $54 = $k;
    $55 = (($54) + 1)|0;
    $k = $55;
   }
   $56 = HEAP32[8>>2]|0;
   $57 = $arr1;
   (_picosat_add_lits($56,$57)|0);
   $58 = $j;
   $59 = (($58) + 1)|0;
   $j = $59;
  }
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 $i = 0;
 while(1) {
  $62 = $i;
  $63 = ($62|0)<(9);
  if (!($63)) {
   break;
  }
  $j = 0;
  while(1) {
   $64 = $j;
   $65 = ($64|0)<(9);
   if (!($65)) {
    break;
   }
   $k = 0;
   while(1) {
    $66 = $k;
    $67 = ($66|0)<(8);
    if (!($67)) {
     break;
    }
    $68 = $k;
    $69 = (($68) + 1)|0;
    $l = $69;
    while(1) {
     $70 = $l;
     $71 = ($70|0)<(9);
     if (!($71)) {
      break;
     }
     $72 = (_malloc(12)|0);
     $arr2 = $72;
     $73 = $i;
     $74 = $j;
     $75 = $k;
     $76 = (_conv($73,$74,$75)|0);
     $77 = (0 - ($76))|0;
     $78 = $arr2;
     HEAP32[$78>>2] = $77;
     $79 = $i;
     $80 = $j;
     $81 = $l;
     $82 = (_conv($79,$80,$81)|0);
     $83 = (0 - ($82))|0;
     $84 = $arr2;
     $85 = ((($84)) + 4|0);
     HEAP32[$85>>2] = $83;
     $86 = $arr2;
     $87 = ((($86)) + 8|0);
     HEAP32[$87>>2] = 0;
     $88 = HEAP32[8>>2]|0;
     $89 = $arr2;
     (_picosat_add_lits($88,$89)|0);
     $90 = $l;
     $91 = (($90) + 1)|0;
     $l = $91;
    }
    $92 = $k;
    $93 = (($92) + 1)|0;
    $k = $93;
   }
   $94 = $j;
   $95 = (($94) + 1)|0;
   $j = $95;
  }
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $i = 0;
 while(1) {
  $98 = $i;
  $99 = ($98|0)<(9);
  if (!($99)) {
   break;
  }
  $j = 0;
  while(1) {
   $100 = $j;
   $101 = ($100|0)<(9);
   if (!($101)) {
    break;
   }
   $102 = (_malloc(40)|0);
   $arr3 = $102;
   $103 = $arr3;
   $104 = ((($103)) + 36|0);
   HEAP32[$104>>2] = 0;
   $k = 0;
   while(1) {
    $105 = $k;
    $106 = ($105|0)<(9);
    if (!($106)) {
     break;
    }
    $107 = $i;
    $108 = $k;
    $109 = $j;
    $110 = (_conv($107,$108,$109)|0);
    $111 = $k;
    $112 = $arr3;
    $113 = (($112) + ($111<<2)|0);
    HEAP32[$113>>2] = $110;
    $114 = $k;
    $115 = (($114) + 1)|0;
    $k = $115;
   }
   $116 = HEAP32[8>>2]|0;
   $117 = $arr3;
   (_picosat_add_lits($116,$117)|0);
   $118 = $j;
   $119 = (($118) + 1)|0;
   $j = $119;
  }
  $120 = $i;
  $121 = (($120) + 1)|0;
  $i = $121;
 }
 $i = 0;
 while(1) {
  $122 = $i;
  $123 = ($122|0)<(9);
  if (!($123)) {
   break;
  }
  $j = 0;
  while(1) {
   $124 = $j;
   $125 = ($124|0)<(9);
   if (!($125)) {
    break;
   }
   $k = 0;
   while(1) {
    $126 = $k;
    $127 = ($126|0)<(8);
    if (!($127)) {
     break;
    }
    $128 = $k;
    $129 = (($128) + 1)|0;
    $l = $129;
    while(1) {
     $130 = $l;
     $131 = ($130|0)<(9);
     if (!($131)) {
      break;
     }
     $132 = (_malloc(12)|0);
     $arr4 = $132;
     $133 = $i;
     $134 = $k;
     $135 = $j;
     $136 = (_conv($133,$134,$135)|0);
     $137 = (0 - ($136))|0;
     $138 = $arr4;
     HEAP32[$138>>2] = $137;
     $139 = $i;
     $140 = $l;
     $141 = $j;
     $142 = (_conv($139,$140,$141)|0);
     $143 = (0 - ($142))|0;
     $144 = $arr4;
     $145 = ((($144)) + 4|0);
     HEAP32[$145>>2] = $143;
     $146 = $arr4;
     $147 = ((($146)) + 8|0);
     HEAP32[$147>>2] = 0;
     $148 = HEAP32[8>>2]|0;
     $149 = $arr4;
     (_picosat_add_lits($148,$149)|0);
     $150 = $l;
     $151 = (($150) + 1)|0;
     $l = $151;
    }
    $152 = $k;
    $153 = (($152) + 1)|0;
    $k = $153;
   }
   $154 = $j;
   $155 = (($154) + 1)|0;
   $j = $155;
  }
  $156 = $i;
  $157 = (($156) + 1)|0;
  $i = $157;
 }
 $i = 0;
 while(1) {
  $158 = $i;
  $159 = ($158|0)<(9);
  if (!($159)) {
   break;
  }
  $j = 0;
  while(1) {
   $160 = $j;
   $161 = ($160|0)<(9);
   if (!($161)) {
    break;
   }
   $162 = (_malloc(40)|0);
   $arr5 = $162;
   $163 = $arr5;
   $164 = ((($163)) + 36|0);
   HEAP32[$164>>2] = 0;
   $k = 0;
   while(1) {
    $165 = $k;
    $166 = ($165|0)<(9);
    if (!($166)) {
     break;
    }
    $167 = $k;
    $168 = $i;
    $169 = $j;
    $170 = (_conv($167,$168,$169)|0);
    $171 = $k;
    $172 = $arr5;
    $173 = (($172) + ($171<<2)|0);
    HEAP32[$173>>2] = $170;
    $174 = $k;
    $175 = (($174) + 1)|0;
    $k = $175;
   }
   $176 = HEAP32[8>>2]|0;
   $177 = $arr5;
   (_picosat_add_lits($176,$177)|0);
   $178 = $j;
   $179 = (($178) + 1)|0;
   $j = $179;
  }
  $180 = $i;
  $181 = (($180) + 1)|0;
  $i = $181;
 }
 $i = 0;
 while(1) {
  $182 = $i;
  $183 = ($182|0)<(9);
  if (!($183)) {
   break;
  }
  $j = 0;
  while(1) {
   $184 = $j;
   $185 = ($184|0)<(9);
   if (!($185)) {
    break;
   }
   $k = 0;
   while(1) {
    $186 = $k;
    $187 = ($186|0)<(8);
    if (!($187)) {
     break;
    }
    $188 = $k;
    $189 = (($188) + 1)|0;
    $l = $189;
    while(1) {
     $190 = $l;
     $191 = ($190|0)<(9);
     if (!($191)) {
      break;
     }
     $192 = (_malloc(12)|0);
     $arr6 = $192;
     $193 = $k;
     $194 = $i;
     $195 = $j;
     $196 = (_conv($193,$194,$195)|0);
     $197 = (0 - ($196))|0;
     $198 = $arr6;
     HEAP32[$198>>2] = $197;
     $199 = $l;
     $200 = $i;
     $201 = $j;
     $202 = (_conv($199,$200,$201)|0);
     $203 = (0 - ($202))|0;
     $204 = $arr6;
     $205 = ((($204)) + 4|0);
     HEAP32[$205>>2] = $203;
     $206 = $arr6;
     $207 = ((($206)) + 8|0);
     HEAP32[$207>>2] = 0;
     $208 = HEAP32[8>>2]|0;
     $209 = $arr6;
     (_picosat_add_lits($208,$209)|0);
     $210 = $l;
     $211 = (($210) + 1)|0;
     $l = $211;
    }
    $212 = $k;
    $213 = (($212) + 1)|0;
    $k = $213;
   }
   $214 = $j;
   $215 = (($214) + 1)|0;
   $j = $215;
  }
  $216 = $i;
  $217 = (($216) + 1)|0;
  $i = $217;
 }
 $i = 0;
 while(1) {
  $218 = $i;
  $219 = ($218|0)<(9);
  if (!($219)) {
   break;
  }
  $j = 0;
  while(1) {
   $220 = $j;
   $221 = ($220|0)<(9);
   if (!($221)) {
    break;
   }
   $222 = (_malloc(40)|0);
   $arr7 = $222;
   $223 = $arr7;
   $224 = ((($223)) + 36|0);
   HEAP32[$224>>2] = 0;
   $k = 0;
   while(1) {
    $225 = $k;
    $226 = ($225|0)<(9);
    if (!($226)) {
     break;
    }
    $227 = $k;
    $228 = $i;
    $229 = (($list) + (($228*72)|0)|0);
    $230 = (($229) + ($227<<3)|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $k;
    $233 = $i;
    $234 = (($list) + (($233*72)|0)|0);
    $235 = (($234) + ($232<<3)|0);
    $236 = ((($235)) + 4|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $j;
    $239 = (_conv($231,$237,$238)|0);
    $240 = $k;
    $241 = $arr7;
    $242 = (($241) + ($240<<2)|0);
    HEAP32[$242>>2] = $239;
    $243 = $k;
    $244 = (($243) + 1)|0;
    $k = $244;
   }
   $245 = HEAP32[8>>2]|0;
   $246 = $arr7;
   (_picosat_add_lits($245,$246)|0);
   $247 = $j;
   $248 = (($247) + 1)|0;
   $j = $248;
  }
  $249 = $i;
  $250 = (($249) + 1)|0;
  $i = $250;
 }
 $i = 0;
 while(1) {
  $251 = $i;
  $252 = ($251|0)<(9);
  if (!($252)) {
   break;
  }
  $j = 0;
  while(1) {
   $253 = $j;
   $254 = ($253|0)<(9);
   if (!($254)) {
    break;
   }
   $k = 0;
   while(1) {
    $255 = $k;
    $256 = ($255|0)<(8);
    if (!($256)) {
     break;
    }
    $257 = $k;
    $258 = (($257) + 1)|0;
    $l = $258;
    while(1) {
     $259 = $l;
     $260 = ($259|0)<(9);
     if (!($260)) {
      break;
     }
     $261 = (_malloc(12)|0);
     $arr8 = $261;
     $262 = $k;
     $263 = $i;
     $264 = (($list) + (($263*72)|0)|0);
     $265 = (($264) + ($262<<3)|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = $k;
     $268 = $i;
     $269 = (($list) + (($268*72)|0)|0);
     $270 = (($269) + ($267<<3)|0);
     $271 = ((($270)) + 4|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = $j;
     $274 = (_conv($266,$272,$273)|0);
     $275 = (0 - ($274))|0;
     $276 = $arr8;
     HEAP32[$276>>2] = $275;
     $277 = $l;
     $278 = $i;
     $279 = (($list) + (($278*72)|0)|0);
     $280 = (($279) + ($277<<3)|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $l;
     $283 = $i;
     $284 = (($list) + (($283*72)|0)|0);
     $285 = (($284) + ($282<<3)|0);
     $286 = ((($285)) + 4|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $j;
     $289 = (_conv($281,$287,$288)|0);
     $290 = (0 - ($289))|0;
     $291 = $arr8;
     $292 = ((($291)) + 4|0);
     HEAP32[$292>>2] = $290;
     $293 = $arr8;
     $294 = ((($293)) + 8|0);
     HEAP32[$294>>2] = 0;
     $295 = HEAP32[8>>2]|0;
     $296 = $arr8;
     (_picosat_add_lits($295,$296)|0);
     $297 = $l;
     $298 = (($297) + 1)|0;
     $l = $298;
    }
    $299 = $k;
    $300 = (($299) + 1)|0;
    $k = $300;
   }
   $301 = $j;
   $302 = (($301) + 1)|0;
   $j = $302;
  }
  $303 = $i;
  $304 = (($303) + 1)|0;
  $i = $304;
 }
 $i = 0;
 while(1) {
  $305 = $i;
  $306 = ($305|0)<(9);
  if (!($306)) {
   break;
  }
  $j = 0;
  while(1) {
   $307 = $j;
   $308 = ($307|0)<(9);
   $309 = $i;
   if (!($308)) {
    break;
   }
   $310 = ($309*9)|0;
   $311 = $j;
   $312 = (($310) + ($311))|0;
   $313 = $0;
   $314 = (($313) + ($312)|0);
   $315 = HEAP8[$314>>0]|0;
   $316 = $315 << 24 >> 24;
   $317 = ($316|0)!=(48);
   if ($317) {
    $318 = $i;
    $319 = $j;
    $320 = $i;
    $321 = ($320*9)|0;
    $322 = $j;
    $323 = (($321) + ($322))|0;
    $324 = $0;
    $325 = (($324) + ($323)|0);
    $326 = HEAP8[$325>>0]|0;
    $327 = $326 << 24 >> 24;
    $328 = (($327) - 48)|0;
    $329 = (($328) - 1)|0;
    $330 = (_conv($318,$319,$329)|0);
    HEAP32[$brr>>2] = $330;
    $331 = ((($brr)) + 4|0);
    HEAP32[$331>>2] = 0;
    $332 = HEAP32[8>>2]|0;
    (_picosat_add_lits($332,$brr)|0);
   }
   $333 = $j;
   $334 = (($333) + 1)|0;
   $j = $334;
  }
  $335 = (($309) + 1)|0;
  $i = $335;
 }
 $336 = HEAP32[8>>2]|0;
 (_picosat_sat($336,-1)|0);
 $i = 1;
 while(1) {
  $337 = $i;
  $338 = ($337|0)<=(729);
  if (!($338)) {
   break;
  }
  $339 = HEAP32[8>>2]|0;
  $340 = $i;
  $341 = (_picosat_deref($339,$340)|0);
  $out = $341;
  $342 = $out;
  $343 = ($342|0)>(0);
  if ($343) {
   $344 = $i;
   $345 = (_inverse($344)|0);
   $indices = $345;
   $346 = $indices;
   $347 = ((($346)) + 8|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = (($348) + 1)|0;
   $350 = $indices;
   $351 = ((($350)) + 4|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = $indices;
   $354 = HEAP32[$353>>2]|0;
   $355 = (($output) + (($354*36)|0)|0);
   $356 = (($355) + ($352<<2)|0);
   HEAP32[$356>>2] = $349;
  }
  $357 = $i;
  $358 = (($357) + 1)|0;
  $i = $358;
 }
 $i = 0;
 while(1) {
  $359 = $i;
  $360 = ($359|0)<(9);
  if (!($360)) {
   break;
  }
  $j = 0;
  while(1) {
   $361 = $j;
   $362 = ($361|0)<(9);
   if (!($362)) {
    break;
   }
   $363 = $j;
   $364 = $i;
   $365 = (($output) + (($364*36)|0)|0);
   $366 = (($365) + ($363<<2)|0);
   $367 = HEAP32[$366>>2]|0;
   $368 = (($367) + 48)|0;
   $369 = $368&255;
   $370 = $i;
   $371 = ($370*9)|0;
   $372 = $j;
   $373 = (($371) + ($372))|0;
   $374 = $0;
   $375 = (($374) + ($373)|0);
   HEAP8[$375>>0] = $369;
   $376 = $j;
   $377 = (($376) + 1)|0;
   $j = $377;
  }
  $378 = $i;
  $379 = (($378) + 1)|0;
  $i = $379;
 }
 STACKTOP = sp;return;
}
function _picosat_init() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_init(0,0,0,0)|0);
 return ($0|0);
}
function _picosat_add($ps,$int_lit) {
 $ps = $ps|0;
 $int_lit = $int_lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $lit = 0;
 var $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $int_lit;
 $2 = $0;
 $3 = ((($2)) + 704|0);
 $4 = HEAP32[$3>>2]|0;
 $res = $4;
 $5 = $0;
 $6 = ((($5)) + 500|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $0;
 if ($8) {
  _enter($9);
 } else {
  _check_ready($9);
 }
 $10 = $0;
 $11 = ((($10)) + 312|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $0;
  $15 = ((($14)) + 316|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $0;
   $19 = ((($18)) + 704|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $0;
   $22 = ((($21)) + 324|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($20>>>0)>=($23>>>0);
   if ($24) {
    $25 = HEAP32[56>>2]|0;
    (_fputs(957,$25)|0);
    _abort();
    // unreachable;
   }
  }
 }
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(1);
 if ($28) {
  $29 = $0;
  _reset_incremental_usage($29);
 }
 $30 = $0;
 $31 = ((($30)) + 304|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $0;
  $35 = ((($34)) + 296|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $0;
  $38 = ((($37)) + 300|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36|0)==($39|0);
  do {
   if ($40) {
    $41 = $0;
    $42 = ((($41)) + 300|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $0;
    $45 = ((($44)) + 292|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $43;
    $48 = $46;
    $49 = (($47) - ($48))|0;
    $50 = (($49|0) / 4)&-1;
    $old_num = $50;
    $51 = $old_num;
    $52 = ($51|0)!=(0);
    $53 = $old_num;
    $54 = $53<<1;
    $55 = $52 ? $54 : 1;
    $new_num = $55;
    $56 = $0;
    $57 = ((($56)) + 296|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $0;
    $60 = ((($59)) + 292|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $58;
    $63 = $61;
    $64 = (($62) - ($63))|0;
    $65 = (($64|0) / 4)&-1;
    $count = $65;
    $66 = $0;
    $67 = ((($66)) + 292|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $0;
    $70 = ((($69)) + 300|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($68>>>0)<=($71>>>0);
    if ($72) {
     $73 = $old_num;
     $74 = $73<<2;
     $old_size = $74;
     $75 = $new_num;
     $76 = $75<<2;
     $new_size = $76;
     $77 = $0;
     $78 = $0;
     $79 = ((($78)) + 292|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $old_size;
     $82 = $new_size;
     $83 = (_resize($77,$80,$81,$82)|0);
     $84 = $0;
     $85 = ((($84)) + 292|0);
     HEAP32[$85>>2] = $83;
     $86 = $0;
     $87 = ((($86)) + 292|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $count;
     $90 = (($88) + ($89<<2)|0);
     $91 = $0;
     $92 = ((($91)) + 296|0);
     HEAP32[$92>>2] = $90;
     $93 = $0;
     $94 = ((($93)) + 292|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $new_num;
     $97 = (($95) + ($96<<2)|0);
     $98 = $0;
     $99 = ((($98)) + 300|0);
     HEAP32[$99>>2] = $97;
     break;
    } else {
     ___assert_fail((1031|0),(904|0),6097,(1061|0));
     // unreachable;
    }
   }
  } while(0);
  $100 = $1;
  $101 = $0;
  $102 = ((($101)) + 296|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + 4|0);
  HEAP32[$102>>2] = $104;
  HEAP32[$103>>2] = $100;
 }
 $105 = $1;
 $106 = ($105|0)!=(0);
 $107 = $0;
 if ($106) {
  $108 = $1;
  $109 = (_import_lit($107,$108,1)|0);
  $lit = $109;
  $110 = $0;
  $111 = $lit;
  _add_lit($110,$111);
 } else {
  _simplify_and_add_original_clause($107);
 }
 $112 = $0;
 $113 = ((($112)) + 500|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0);
 if (!($115)) {
  $117 = $res;
  STACKTOP = sp;return ($117|0);
 }
 $116 = $0;
 _leave($116);
 $117 = $res;
 STACKTOP = sp;return ($117|0);
}
function _picosat_add_lits($ps,$lits) {
 $ps = $ps|0;
 $lits = $lits|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lit = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lits;
 $2 = $1;
 $p = $2;
 while(1) {
  $3 = $p;
  $4 = HEAP32[$3>>2]|0;
  $lit = $4;
  $5 = ($4|0)!=(0);
  $6 = $0;
  if (!($5)) {
   break;
  }
  $7 = $lit;
  (_picosat_add($6,$7)|0);
  $8 = $p;
  $9 = ((($8)) + 4|0);
  $p = $9;
 }
 $10 = (_picosat_add($6,0)|0);
 STACKTOP = sp;return ($10|0);
}
function _picosat_sat($ps,$l) {
 $ps = $ps|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ch = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $l;
 $2 = $0;
 _enter($2);
 $3 = $0;
 $4 = ((($3)) + 540|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = $0;
 $8 = ((($7)) + 336|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 340|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9>>>0)<($12>>>0);
 if ($13) {
  $14 = HEAP32[56>>2]|0;
  (_fputs(914,$14)|0);
  _abort();
  // unreachable;
 }
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(1);
 if ($17) {
  $18 = $0;
  _reset_incremental_usage($18);
 }
 $19 = $0;
 _assume_contexts($19);
 $20 = $0;
 $21 = $1;
 $22 = (_sat($20,$21)|0);
 $res = $22;
 $23 = $0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(1);
 if (!($25)) {
  ___assert_fail((1073|0),(904|0),6355,(1092|0));
  // unreachable;
 }
 $26 = $res;
 switch ($26|0) {
 case 20:  {
  $ch = 48;
  $27 = $0;
  HEAP32[$27>>2] = 3;
  break;
 }
 case 10:  {
  $ch = 49;
  $28 = $0;
  HEAP32[$28>>2] = 2;
  break;
 }
 default: {
  $ch = 63;
  $29 = $0;
  HEAP32[$29>>2] = 4;
 }
 }
 $30 = $0;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $37 = $0;
  _leave($37);
  $38 = $res;
  $39 = $0;
  $40 = ((($39)) + 8|0);
  HEAP32[$40>>2] = $38;
  $41 = $res;
  STACKTOP = sp;return ($41|0);
 }
 $34 = $0;
 $35 = $ch;
 _report($34,1,$35);
 $36 = $0;
 _rheader($36);
 $37 = $0;
 _leave($37);
 $38 = $res;
 $39 = $0;
 $40 = ((($39)) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $res;
 STACKTOP = sp;return ($41|0);
}
function _picosat_deref($ps,$int_lit) {
 $ps = $ps|0;
 $int_lit = $int_lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $int_lit;
 $3 = $1;
 _check_ready($3);
 $4 = $1;
 _check_sat_state($4);
 $5 = $2;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $7 = HEAP32[56>>2]|0;
  (_fputs(1104,$7)|0);
  _abort();
  // unreachable;
 }
 $8 = $1;
 $9 = ((($8)) + 328|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[56>>2]|0;
  (_fputs(1156,$12)|0);
  _abort();
  // unreachable;
 }
 $13 = $2;
 $14 = (Math_abs(($13|0))|0);
 $15 = $1;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)>($17|0);
 if ($18) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $19 = $1;
 $20 = $2;
 $21 = (_int2lit($19,$20)|0);
 $lit = $21;
 $22 = $lit;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 << 24 >> 24;
 $25 = ($24|0)==(1);
 if ($25) {
  $0 = 1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $26 = $lit;
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 << 24 >> 24;
 $29 = ($28|0)==(-1);
 if ($29) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 } else {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _picosat_time_stamp() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $res = 0.0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp + 8|0;
 $res = -1.0;
 $res = 0.0;
 $0 = (_getrusage(0,$u)|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  $22 = $res;
  STACKTOP = sp;return (+$22);
 }
 $2 = HEAP32[$u>>2]|0;
 $3 = (+($2|0));
 $4 = ((($u)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+($5|0));
 $7 = 9.9999999999999995E-7 * $6;
 $8 = $3 + $7;
 $9 = $res;
 $10 = $9 + $8;
 $res = $10;
 $11 = ((($u)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($12|0));
 $14 = ((($u)) + 8|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (+($16|0));
 $18 = 9.9999999999999995E-7 * $17;
 $19 = $13 + $18;
 $20 = $res;
 $21 = $20 + $19;
 $res = $21;
 $22 = $res;
 STACKTOP = sp;return (+$22);
}
function _init($pmgr,$pnew,$presize,$pdelete) {
 $pmgr = $pmgr|0;
 $pnew = $pnew|0;
 $presize = $presize|0;
 $pdelete = $pdelete|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $new_num = 0;
 var $new_size = 0, $old_num = 0, $old_size = 0, $ps = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pmgr;
 $1 = $pnew;
 $2 = $presize;
 $3 = $pdelete;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = $0;
  $8 = (FUNCTION_TABLE_iii[$6 & 0]($7,816)|0);
  $10 = $8;
 } else {
  $9 = (_malloc(816)|0);
  $10 = $9;
 }
 $ps = $10;
 $11 = $ps;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $13 = HEAP32[56>>2]|0;
  (_fputs(6670,$13)|0);
  _abort();
  // unreachable;
 }
 $14 = $ps;
 _memset(($14|0),0,816)|0;
 $15 = $0;
 $16 = $ps;
 $17 = ((($16)) + 792|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = $ps;
 $20 = ((($19)) + 796|0);
 HEAP32[$20>>2] = $18;
 $21 = $2;
 $22 = $ps;
 $23 = ((($22)) + 800|0);
 HEAP32[$23>>2] = $21;
 $24 = $3;
 $25 = $ps;
 $26 = ((($25)) + 804|0);
 HEAP32[$26>>2] = $24;
 $27 = $ps;
 $28 = ((($27)) + 36|0);
 HEAP32[$28>>2] = 1;
 $29 = $ps;
 HEAP32[$29>>2] = 0;
 $30 = $ps;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 2;
 $32 = $ps;
 $33 = ((($32)) + 536|0);
 HEAP32[$33>>2] = -2;
 $34 = $ps;
 $35 = ((($34)) + 788|0);
 HEAP32[$35>>2] = -1;
 $36 = $ps;
 $37 = $ps;
 $38 = ((($37)) + 36|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39<<1;
 $41 = $40;
 $42 = (_new($36,$41)|0);
 $43 = $ps;
 $44 = ((($43)) + 40|0);
 HEAP32[$44>>2] = $42;
 $45 = $ps;
 $46 = $ps;
 $47 = ((($46)) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48<<1;
 $50 = $49<<2;
 $51 = (_new($45,$50)|0);
 $52 = $ps;
 $53 = ((($52)) + 52|0);
 HEAP32[$53>>2] = $51;
 $54 = $ps;
 $55 = $ps;
 $56 = ((($55)) + 36|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57<<1;
 $59 = $58<<2;
 $60 = (_new($54,$59)|0);
 $61 = $ps;
 $62 = ((($61)) + 56|0);
 HEAP32[$62>>2] = $60;
 $63 = $ps;
 $64 = $ps;
 $65 = ((($64)) + 36|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66<<1;
 $68 = $67<<2;
 $69 = (_new($63,$68)|0);
 $70 = $ps;
 $71 = ((($70)) + 60|0);
 HEAP32[$71>>2] = $69;
 $72 = $ps;
 $73 = $ps;
 $74 = ((($73)) + 36|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75<<1;
 $77 = $76<<3;
 $78 = (_new($72,$77)|0);
 $79 = $ps;
 $80 = ((($79)) + 64|0);
 HEAP32[$80>>2] = $78;
 $81 = $ps;
 $82 = $ps;
 $83 = ((($82)) + 36|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84*12)|0;
 $86 = (_new($81,$85)|0);
 $87 = $ps;
 $88 = ((($87)) + 44|0);
 HEAP32[$88>>2] = $86;
 $89 = $ps;
 $90 = $ps;
 $91 = ((($90)) + 36|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92<<3;
 $94 = (_new($89,$93)|0);
 $95 = $ps;
 $96 = ((($95)) + 48|0);
 HEAP32[$96>>2] = $94;
 $97 = $ps;
 $98 = ((($97)) + 264|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $ps;
 $101 = ((($100)) + 256|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $99;
 $104 = $102;
 $105 = (($103) - ($104))|0;
 $106 = (($105|0) / 4)&-1;
 $old_num = $106;
 $107 = $old_num;
 $108 = ($107|0)!=(0);
 $109 = $old_num;
 $110 = $109<<1;
 $111 = $108 ? $110 : 1;
 $new_num = $111;
 $112 = $ps;
 $113 = ((($112)) + 260|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $ps;
 $116 = ((($115)) + 256|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $114;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 4)&-1;
 $count = $121;
 $122 = $ps;
 $123 = ((($122)) + 256|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $ps;
 $126 = ((($125)) + 264|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124>>>0)<=($127>>>0);
 if ($128) {
  $129 = $old_num;
  $130 = $129<<2;
  $old_size = $130;
  $131 = $new_num;
  $132 = $131<<2;
  $new_size = $132;
  $133 = $ps;
  $134 = $ps;
  $135 = ((($134)) + 256|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $old_size;
  $138 = $new_size;
  $139 = (_resize($133,$136,$137,$138)|0);
  $140 = $ps;
  $141 = ((($140)) + 256|0);
  HEAP32[$141>>2] = $139;
  $142 = $ps;
  $143 = ((($142)) + 256|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $count;
  $146 = (($144) + ($145<<2)|0);
  $147 = $ps;
  $148 = ((($147)) + 260|0);
  HEAP32[$148>>2] = $146;
  $149 = $ps;
  $150 = ((($149)) + 256|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $new_num;
  $153 = (($151) + ($152<<2)|0);
  $154 = $ps;
  $155 = ((($154)) + 264|0);
  HEAP32[$155>>2] = $153;
  $156 = $ps;
  $157 = ((($156)) + 256|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($158)) + 4|0);
  $160 = $ps;
  $161 = ((($160)) + 260|0);
  HEAP32[$161>>2] = $159;
  $162 = (_base2flt(1,0)|0);
  $163 = $ps;
  $164 = ((($163)) + 420|0);
  HEAP32[$164>>2] = $162;
  $165 = (_ascii2flt(6735)|0);
  $166 = $ps;
  $167 = ((($166)) + 432|0);
  HEAP32[$167>>2] = $165;
  $168 = (_base2flt(1,90)|0);
  $169 = $ps;
  $170 = ((($169)) + 424|0);
  HEAP32[$170>>2] = $168;
  $171 = (_base2flt(1,-90)|0);
  $172 = $ps;
  $173 = ((($172)) + 428|0);
  HEAP32[$173>>2] = $171;
  $174 = (_base2flt(1,0)|0);
  $175 = $ps;
  $176 = ((($175)) + 436|0);
  HEAP32[$176>>2] = $174;
  $177 = (_ascii2flt(6740)|0);
  $178 = $ps;
  $179 = ((($178)) + 448|0);
  HEAP32[$179>>2] = $177;
  $180 = (_base2flt(1,90)|0);
  $181 = $ps;
  $182 = ((($181)) + 440|0);
  HEAP32[$182>>2] = $180;
  $183 = (_base2flt(1,-90)|0);
  $184 = $ps;
  $185 = ((($184)) + 444|0);
  HEAP32[$185>>2] = $183;
  $186 = $ps;
  $187 = ((($186)) + 576|0);
  HEAP32[$187>>2] = 100;
  $188 = $ps;
  $189 = ((($188)) + 572|0);
  HEAP32[$189>>2] = 100;
  $190 = $ps;
  $191 = ((($190)) + 624|0);
  $192 = $191;
  $193 = $192;
  HEAP32[$193>>2] = -1;
  $194 = (($192) + 4)|0;
  $195 = $194;
  HEAP32[$195>>2] = -1;
  $196 = HEAP32[60>>2]|0;
  $197 = $ps;
  $198 = ((($197)) + 12|0);
  HEAP32[$198>>2] = $196;
  $199 = $ps;
  _new_prefix($199,6746);
  $200 = $ps;
  $201 = ((($200)) + 20|0);
  HEAP32[$201>>2] = 0;
  $202 = $ps;
  $203 = ((($202)) + 24|0);
  HEAP32[$203>>2] = 0;
  $204 = $ps;
  $205 = ((($204)) + 68|0);
  ;HEAP32[$205>>2]=0|0;HEAP32[$205+4>>2]=0|0;HEAP32[$205+8>>2]=0|0;HEAP32[$205+12>>2]=0|0;HEAP32[$205+16>>2]=0|0;HEAP32[$205+20>>2]=0|0;
  $206 = $ps;
  $207 = ((($206)) + 68|0);
  HEAP32[$207>>2] = 2;
  $208 = $ps;
  $209 = ((($208)) + 92|0);
  ;HEAP32[$209>>2]=0|0;HEAP32[$209+4>>2]=0|0;HEAP32[$209+8>>2]=0|0;HEAP32[$209+12>>2]=0|0;HEAP32[$209+16>>2]=0|0;HEAP32[$209+20>>2]=0|0;
  $210 = $ps;
  $211 = ((($210)) + 92|0);
  HEAP32[$211>>2] = 2;
  $212 = $ps;
  $213 = ((($212)) + 4|0);
  HEAP32[$213>>2] = 2;
  $214 = $ps;
  HEAP32[$214>>2] = 1;
  $215 = $ps;
  $216 = ((($215)) + 8|0);
  HEAP32[$216>>2] = 0;
  $217 = $ps;
  STACKTOP = sp;return ($217|0);
 } else {
  ___assert_fail((1994|0),(904|0),1147,(6730|0));
  // unreachable;
 }
 return (0)|0;
}
function _enter($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 496|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 _check_ready($6);
 $7 = (+_picosat_time_stamp());
 $8 = $0;
 $9 = ((($8)) + 488|0);
 HEAPF64[$9>>3] = $7;
 STACKTOP = sp;return;
}
function _enlarge($ps,$new_size_vars) {
 $ps = $ps|0;
 $new_size_vars = $new_size_vars|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lits_delta = 0, $new_size = 0, $new_size10 = 0, $new_size12 = 0, $new_size2 = 0, $new_size4 = 0, $new_size6 = 0, $new_size8 = 0, $old_lits = 0, $old_rnks = 0, $old_size = 0, $old_size1 = 0, $old_size11 = 0, $old_size3 = 0, $old_size5 = 0, $old_size7 = 0;
 var $old_size9 = 0, $rnks_delta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $new_size_vars;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $old_lits = $4;
 $5 = $0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $old_rnks = $7;
 $8 = $0;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10<<1;
 $12 = $11;
 $old_size = $12;
 $13 = $1;
 $14 = $13<<1;
 $15 = $14;
 $new_size = $15;
 $16 = $0;
 $17 = $0;
 $18 = ((($17)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $old_size;
 $21 = $new_size;
 $22 = (_resize($16,$19,$20,$21)|0);
 $23 = $0;
 $24 = ((($23)) + 40|0);
 HEAP32[$24>>2] = $22;
 $25 = $0;
 $26 = ((($25)) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27<<1;
 $29 = $28<<2;
 $old_size1 = $29;
 $30 = $1;
 $31 = $30<<1;
 $32 = $31<<2;
 $new_size2 = $32;
 $33 = $0;
 $34 = $0;
 $35 = ((($34)) + 52|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $old_size1;
 $38 = $new_size2;
 $39 = (_resize($33,$36,$37,$38)|0);
 $40 = $0;
 $41 = ((($40)) + 52|0);
 HEAP32[$41>>2] = $39;
 $42 = $0;
 $43 = ((($42)) + 36|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44<<1;
 $46 = $45<<2;
 $old_size3 = $46;
 $47 = $1;
 $48 = $47<<1;
 $49 = $48<<2;
 $new_size4 = $49;
 $50 = $0;
 $51 = $0;
 $52 = ((($51)) + 56|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $old_size3;
 $55 = $new_size4;
 $56 = (_resize($50,$53,$54,$55)|0);
 $57 = $0;
 $58 = ((($57)) + 56|0);
 HEAP32[$58>>2] = $56;
 $59 = $0;
 $60 = ((($59)) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61<<1;
 $63 = $62<<2;
 $old_size5 = $63;
 $64 = $1;
 $65 = $64<<1;
 $66 = $65<<2;
 $new_size6 = $66;
 $67 = $0;
 $68 = $0;
 $69 = ((($68)) + 60|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $old_size5;
 $72 = $new_size6;
 $73 = (_resize($67,$70,$71,$72)|0);
 $74 = $0;
 $75 = ((($74)) + 60|0);
 HEAP32[$75>>2] = $73;
 $76 = $0;
 $77 = ((($76)) + 36|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $78<<1;
 $80 = $79<<3;
 $old_size7 = $80;
 $81 = $1;
 $82 = $81<<1;
 $83 = $82<<3;
 $new_size8 = $83;
 $84 = $0;
 $85 = $0;
 $86 = ((($85)) + 64|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $old_size7;
 $89 = $new_size8;
 $90 = (_resize($84,$87,$88,$89)|0);
 $91 = $0;
 $92 = ((($91)) + 64|0);
 HEAP32[$92>>2] = $90;
 $93 = $0;
 $94 = ((($93)) + 36|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95*12)|0;
 $old_size9 = $96;
 $97 = $1;
 $98 = ($97*12)|0;
 $new_size10 = $98;
 $99 = $0;
 $100 = $0;
 $101 = ((($100)) + 44|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $old_size9;
 $104 = $new_size10;
 $105 = (_resize($99,$102,$103,$104)|0);
 $106 = $0;
 $107 = ((($106)) + 44|0);
 HEAP32[$107>>2] = $105;
 $108 = $0;
 $109 = ((($108)) + 36|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110<<3;
 $old_size11 = $111;
 $112 = $1;
 $113 = $112<<3;
 $new_size12 = $113;
 $114 = $0;
 $115 = $0;
 $116 = ((($115)) + 48|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $old_size11;
 $119 = $new_size12;
 $120 = (_resize($114,$117,$118,$119)|0);
 $121 = $0;
 $122 = ((($121)) + 48|0);
 HEAP32[$122>>2] = $120;
 $123 = $0;
 $124 = ((($123)) + 40|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $old_lits;
 $127 = $125;
 $128 = $126;
 $129 = (($127) - ($128))|0;
 $lits_delta = $129;
 $130 = ($129|0)!=(0);
 if ($130) {
  $131 = $0;
  $132 = $lits_delta;
  _fix_trail_lits($131,$132);
  $133 = $0;
  $134 = $lits_delta;
  _fix_clause_lits($133,$134);
  $135 = $0;
  $136 = $lits_delta;
  _fix_added_lits($135,$136);
  $137 = $0;
  $138 = $lits_delta;
  _fix_assumed_lits($137,$138);
  $139 = $0;
  $140 = $lits_delta;
  _fix_cls_lits($139,$140);
  $141 = $0;
  $142 = $lits_delta;
  _fix_impl_lits($141,$142);
 }
 $143 = $0;
 $144 = ((($143)) + 48|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $old_rnks;
 $147 = $145;
 $148 = $146;
 $149 = (($147) - ($148))|0;
 $150 = (($149|0) / 8)&-1;
 $rnks_delta = $150;
 $151 = ($150|0)!=(0);
 if ($151) {
  $152 = $0;
  $153 = $rnks_delta;
  _fix_heap_rnks($152,$153);
 }
 $154 = $0;
 $155 = ((($154)) + 352|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $0;
 $158 = ((($157)) + 348|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ($156|0)==($159|0);
 if ($160) {
  $161 = $1;
  $162 = $0;
  $163 = ((($162)) + 36|0);
  HEAP32[$163>>2] = $161;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2294|0),(904|0),2655,(6608|0));
  // unreachable;
 }
}
function _inc_max_var($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $lit = 0, $r = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3>>>0)<($6>>>0);
 if (!($7)) {
  ___assert_fail((6556|0),(904|0),4016,(6584|0));
  // unreachable;
 }
 $8 = $0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if ($15) {
  $16 = $0;
  $17 = $0;
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 3)|0;
  $24 = $23<<1;
  $25 = (($24>>>0) / 4)&-1;
  $26 = (($19) + ($25))|0;
  _enlarge($16,$26);
 }
 $27 = $0;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$28>>2] = $30;
 $31 = $0;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  ___assert_fail((6596|0),(904|0),4022,(6584|0));
  // unreachable;
 }
 $35 = $0;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = ((($38)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($37>>>0)<($40>>>0);
 if ($41) {
  $42 = $0;
  $43 = ((($42)) + 40|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $0;
  $46 = ((($45)) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47<<1;
  $49 = (($44) + ($48)|0);
  $lit = $49;
  $50 = $lit;
  $51 = ((($50)) + 1|0);
  HEAP8[$51>>0] = 0;
  $52 = $lit;
  HEAP8[$52>>0] = 0;
  $53 = $0;
  $54 = ((($53)) + 56|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $0;
  $57 = ((($56)) + 32|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58<<1;
  $60 = (($55) + ($59<<2)|0);
  ;HEAP32[$60>>2]=0|0;HEAP32[$60+4>>2]=0|0;
  $61 = $0;
  $62 = ((($61)) + 60|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $0;
  $65 = ((($64)) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66<<1;
  $68 = (($63) + ($67<<2)|0);
  ;HEAP32[$68>>2]=0|0;HEAP32[$68+4>>2]=0|0;
  $69 = $0;
  $70 = ((($69)) + 64|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $0;
  $73 = ((($72)) + 32|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $74<<1;
  $76 = (($71) + ($75<<3)|0);
  ;HEAP32[$76>>2]=0|0;HEAP32[$76+4>>2]=0|0;HEAP32[$76+8>>2]=0|0;HEAP32[$76+12>>2]=0|0;
  $77 = $0;
  $78 = ((($77)) + 52|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $0;
  $81 = ((($80)) + 32|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82<<1;
  $84 = (($79) + ($83<<2)|0);
  ;HEAP32[$84>>2]=0|0;HEAP32[$84+4>>2]=0|0;
  $85 = $0;
  $86 = ((($85)) + 44|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $0;
  $89 = ((($88)) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) + (($90*12)|0)|0);
  $v = $91;
  $92 = $v;
  ;HEAP32[$92>>2]=0|0;HEAP32[$92+4>>2]=0|0;HEAP32[$92+8>>2]=0|0;
  $93 = $0;
  $94 = ((($93)) + 48|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $0;
  $97 = ((($96)) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($95) + ($98<<3)|0);
  $r = $99;
  $100 = $r;
  ;HEAP32[$100>>2]=0|0;HEAP32[$100+4>>2]=0|0;
  $101 = $0;
  $102 = $r;
  _hpush($101,$102);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6556|0),(904|0),4024,(6584|0));
  // unreachable;
 }
}
function _leave($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 496|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  ___assert_fail((6537|0),(904|0),5815,(6550|0));
  // unreachable;
 }
 $5 = $0;
 $6 = ((($5)) + 496|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$6>>2] = $8;
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 _sflush($10);
 STACKTOP = sp;return;
}
function _check_ready($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = HEAP32[56>>2]|0;
 (_fputs(6498,$6)|0);
 _abort();
 // unreachable;
}
function _reset_incremental_usage($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $lit = 0, $num_non_false = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 _check_sat_or_unsat_or_unknown_state($1);
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  _undo($6,0);
 }
 $7 = $0;
 _reset_assumptions($7);
 $8 = $0;
 $9 = ((($8)) + 332|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $num_non_false = 0;
  $12 = $0;
  $13 = ((($12)) + 332|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  $q = $15;
  while(1) {
   $16 = $q;
   $17 = $0;
   $18 = ((($17)) + 332|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_end_of_lits($19)|0);
   $21 = ($16>>>0)<($20>>>0);
   if (!($21)) {
    break;
   }
   $22 = $q;
   $23 = HEAP32[$22>>2]|0;
   $lit = $23;
   $24 = $lit;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)!=(-1);
   if ($27) {
    $28 = $num_non_false;
    $29 = (($28) + 1)|0;
    $num_non_false = $29;
   }
   $30 = $q;
   $31 = ((($30)) + 4|0);
   $q = $31;
  }
  $32 = $0;
  $33 = ((($32)) + 332|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  $36 = ((($35)) + 92|0);
  $37 = ($34|0)==($36|0);
  if ($37) {
   $38 = $0;
   _resetcimpl($38);
  }
  $39 = $0;
  $40 = ((($39)) + 332|0);
  HEAP32[$40>>2] = 0;
 }
 $41 = $0;
 _reset_partial($41);
 $42 = $0;
 $43 = ((($42)) + 752|0);
 $44 = $43;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $0;
 $51 = ((($50)) + 776|0);
 $52 = $51;
 $53 = $52;
 HEAP32[$53>>2] = $46;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = $49;
 $56 = $0;
 $57 = ((($56)) + 788|0);
 HEAP32[$57>>2] = -1;
 $58 = $0;
 $59 = ((($58)) + 32|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $0;
 $62 = ((($61)) + 784|0);
 HEAP32[$62>>2] = $60;
 $63 = $0;
 HEAP32[$63>>2] = 1;
 STACKTOP = sp;return;
}
function _int2lit($ps,$l) {
 $ps = $ps|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $l;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (_int2unsigned($5)|0);
 $7 = (($4) + ($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _resize($ps,$void_ptr,$old_size,$new_size) {
 $ps = $ps|0;
 $void_ptr = $void_ptr|0;
 $old_size = $old_size|0;
 $new_size = $new_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $b = 0, $new_bytes = 0, $old_bytes = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $void_ptr;
 $3 = $old_size;
 $4 = $new_size;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $7 = $2;
 $8 = ((($7)) + -8|0);
 $9 = $6 ? $8 : 0;
 $b = $9;
 $10 = $3;
 $11 = $1;
 $12 = ((($11)) + 456|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10>>>0)<=($13>>>0);
 if (!($14)) {
  ___assert_fail((6374|0),(904|0),986,(6404|0));
  // unreachable;
 }
 $15 = $3;
 $16 = $1;
 $17 = ((($16)) + 456|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) - ($15))|0;
 HEAP32[$17>>2] = $19;
 $20 = $3;
 $old_bytes = $20;
 $21 = ($20|0)!=(0);
 do {
  if ($21) {
   $22 = $3;
   $23 = ($22|0)!=(0);
   $24 = $b;
   $25 = ($24|0)!=(0|0);
   $or$cond = $23 & $25;
   if (!($or$cond)) {
    ___assert_fail((6411|0),(904|0),990,(6404|0));
    // unreachable;
   }
   $26 = $b;
   $27 = HEAP32[$26>>2]|0;
   $28 = $3;
   $29 = ($27|0)==($28|0);
   if ($29) {
    $30 = $old_bytes;
    $31 = (($30) + 8)|0;
    $old_bytes = $31;
    break;
   } else {
    ___assert_fail((6411|0),(904|0),990,(6404|0));
    // unreachable;
   }
  } else {
   $32 = $b;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    ___assert_fail((6455|0),(904|0),993,(6404|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $34 = $4;
 $new_bytes = $34;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $new_bytes;
  $37 = (($36) + 8)|0;
  $new_bytes = $37;
 }
 $38 = $1;
 $39 = ((($38)) + 800|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $1;
  $43 = ((($42)) + 800|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  $46 = ((($45)) + 792|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $b;
  $49 = $old_bytes;
  $50 = $new_bytes;
  $51 = (FUNCTION_TABLE_iiiii[$44 & 0]($47,$48,$49,$50)|0);
  $b = $51;
 } else {
  $52 = $b;
  $53 = $new_bytes;
  $54 = (_realloc($52,$53)|0);
  $b = $54;
 }
 $55 = $4;
 $56 = ($55|0)!=(0);
 $57 = $b;
 $58 = ($57|0)!=(0|0);
 if (!($56)) {
  if ($58) {
   ___assert_fail((6455|0),(904|0),1004,(6404|0));
   // unreachable;
  }
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 if (!($58)) {
  $59 = HEAP32[56>>2]|0;
  (_fputs(6458,$59)|0);
  _abort();
  // unreachable;
 }
 $60 = $4;
 $61 = $b;
 HEAP32[$61>>2] = $60;
 $62 = $4;
 $63 = $1;
 $64 = ((($63)) + 456|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($62))|0;
 HEAP32[$64>>2] = $66;
 $67 = $1;
 $68 = ((($67)) + 456|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $1;
 $71 = ((($70)) + 460|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($69>>>0)>($72>>>0);
 if ($73) {
  $74 = $1;
  $75 = ((($74)) + 456|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $1;
  $78 = ((($77)) + 460|0);
  HEAP32[$78>>2] = $76;
 }
 $79 = $b;
 $80 = ((($79)) + 8|0);
 $0 = $80;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _simplify($ps,$forced) {
 $ps = $ps|0;
 $forced = $forced|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $collect = 0, $count = 0;
 var $delta = 0, $ilit = 0, $lit = 0, $new_num = 0, $new_size = 0, $notlit = 0, $old_num = 0, $old_size = 0, $p = 0, $q = 0, $t = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $forced;
 $2 = $0;
 $3 = ((($2)) + 328|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  ___assert_fail((2179|0),(904|0),4780,(5830|0));
  // unreachable;
 }
 $6 = $0;
 $7 = (_satisfied($6)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  ___assert_fail((2799|0),(904|0),4781,(5830|0));
  // unreachable;
 }
 $9 = $1;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $0;
  $12 = ((($11)) + 608|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = ((($19)) + 616|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($18>>>0)<($26>>>0);
  $28 = ($15>>>0)<=($23>>>0);
  $29 = ($18|0)==($26|0);
  $30 = $29 & $28;
  $31 = $27 | $30;
  if (!($31)) {
   ___assert_fail((5839|0),(904|0),4782,(5830|0));
   // unreachable;
  }
 }
 $32 = $1;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $34 = $0;
  $35 = ((($34)) + 556|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $0;
  $38 = ((($37)) + 632|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36>>>0)<=($39>>>0);
  if (!($40)) {
   ___assert_fail((5883|0),(904|0),4783,(5830|0));
   // unreachable;
  }
 }
 $41 = $0;
 $42 = ((($41)) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $0;
  _undo($45,0);
 }
 $46 = $0;
 $47 = ((($46)) + 664|0);
 HEAP32[$47>>2] = 1;
 $48 = $0;
 _faillits($48);
 $49 = $0;
 $50 = ((($49)) + 664|0);
 HEAP32[$50>>2] = 0;
 $51 = $0;
 $52 = ((($51)) + 328|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  STACKTOP = sp;return;
 }
 $55 = $0;
 $56 = ((($55)) + 188|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $0;
 $59 = ((($58)) + 192|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($57|0)!=($60|0);
 L21: do {
  if ($61) {
   $62 = $0;
   $63 = ((($62)) + 136|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $0;
   $66 = ((($65)) + 128|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($64|0)==($67|0);
   if (!($68)) {
    ___assert_fail((5920|0),(904|0),4797,(5830|0));
    // unreachable;
   }
   $69 = $0;
   $70 = ((($69)) + 140|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $0;
   $73 = ((($72)) + 128|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($71|0)==($74|0);
   if (!($75)) {
    ___assert_fail((5943|0),(904|0),4798,(5830|0));
    // unreachable;
   }
   $76 = $0;
   $77 = ((($76)) + 124|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $0;
   $80 = ((($79)) + 136|0);
   HEAP32[$80>>2] = $78;
   $81 = $0;
   $82 = ((($81)) + 124|0);
   $83 = HEAP32[$82>>2]|0;
   $t = $83;
   while(1) {
    $84 = $t;
    $85 = $0;
    $86 = ((($85)) + 128|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($84>>>0)<($87>>>0);
    if (!($88)) {
     label = 29;
     break;
    }
    $89 = $t;
    $90 = HEAP32[$89>>2]|0;
    $lit = $90;
    $91 = $0;
    $92 = ((($91)) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $lit;
    $95 = $0;
    $96 = ((($95)) + 40|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $94;
    $99 = $97;
    $100 = (($98) - ($99))|0;
    $101 = (($100|0) / 2)&-1;
    $102 = (($93) + (($101*12)|0)|0);
    $v = $102;
    $103 = $v;
    $104 = HEAP16[$103>>1]|0;
    $105 = ($104&65535) >>> 6;
    $106 = $105 & 1;
    $107 = $106&65535;
    $108 = ($107|0)!=(0);
    $109 = $lit;
    $110 = $0;
    if ($108) {
     $111 = ((($110)) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $109;
     $114 = $112;
     $115 = (($113) - ($114))|0;
     $116 = $115 & 1;
     $117 = ($116|0)!=(0);
     $118 = $117 ? -1 : 1;
     $119 = $lit;
     $120 = $0;
     $121 = ((($120)) + 40|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $119;
     $124 = $122;
     $125 = (($123) - ($124))|0;
     $126 = (($125|0) / 2)&-1;
     $127 = Math_imul($118, $126)|0;
     $128 = ($127|0)<(0);
     if (!($128)) {
      label = 23;
      break;
     }
     $129 = $lit;
     $130 = HEAP8[$129>>0]|0;
     $131 = $130 << 24 >> 24;
     $132 = ($131|0)==(1);
     if (!($132)) {
      label = 25;
      break;
     }
     $133 = $0;
     $134 = $lit;
     _unassign($133,$134);
    } else {
     $135 = ((($110)) + 136|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($136)) + 4|0);
     HEAP32[$135>>2] = $137;
     HEAP32[$136>>2] = $109;
    }
    $138 = $t;
    $139 = ((($138)) + 4|0);
    $t = $139;
   }
   if ((label|0) == 23) {
    ___assert_fail((5967|0),(904|0),4804,(5830|0));
    // unreachable;
   }
   else if ((label|0) == 25) {
    ___assert_fail((4450|0),(904|0),4805,(5830|0));
    // unreachable;
   }
   else if ((label|0) == 29) {
    $140 = $0;
    $141 = ((($140)) + 136|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $0;
    $144 = ((($143)) + 128|0);
    HEAP32[$144>>2] = $142;
    $145 = $0;
    $146 = ((($145)) + 140|0);
    HEAP32[$146>>2] = $142;
    $147 = $0;
    $148 = ((($147)) + 188|0);
    $149 = HEAP32[$148>>2]|0;
    $q = $149;
    while(1) {
     $150 = $q;
     $151 = $0;
     $152 = ((($151)) + 192|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($150|0)!=($153|0);
     if (!($154)) {
      break L21;
     }
     $155 = $q;
     $156 = HEAP32[$155>>2]|0;
     $ilit = $156;
     $157 = $ilit;
     $158 = (0)<($157|0);
     if (!($158)) {
      label = 33;
      break;
     }
     $159 = $ilit;
     $160 = $0;
     $161 = ((($160)) + 32|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($159|0)<=($162|0);
     if (!($163)) {
      label = 33;
      break;
     }
     $164 = $0;
     $165 = ((($164)) + 44|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $ilit;
     $168 = (($166) + (($167*12)|0)|0);
     $v = $168;
     $169 = $v;
     $170 = HEAP16[$169>>1]|0;
     $171 = ($170&65535) >>> 6;
     $172 = $171 & 1;
     $173 = $172&65535;
     $174 = ($173|0)!=(0);
     if (!($174)) {
      label = 35;
      break;
     }
     $175 = $v;
     $176 = ((($175)) + 4|0);
     HEAP32[$176>>2] = 0;
     $177 = $v;
     $178 = ((($177)) + 8|0);
     HEAP32[$178>>2] = 0;
     $179 = $0;
     $180 = $ilit;
     $181 = (0 - ($180))|0;
     $182 = (_int2lit($179,$181)|0);
     $lit = $182;
     $183 = $lit;
     $184 = HEAP8[$183>>0]|0;
     $185 = $184 << 24 >> 24;
     $186 = ($185|0)==(0);
     if (!($186)) {
      label = 37;
      break;
     }
     $187 = $lit;
     HEAP8[$187>>0] = 1;
     $188 = $0;
     $189 = ((($188)) + 40|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $lit;
     $192 = $0;
     $193 = ((($192)) + 40|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $191;
     $196 = $194;
     $197 = (($195) - ($196))|0;
     $198 = 1 ^ $197;
     $199 = (($190) + ($198)|0);
     $notlit = $199;
     $200 = $notlit;
     $201 = HEAP8[$200>>0]|0;
     $202 = $201 << 24 >> 24;
     $203 = ($202|0)==(0);
     if (!($203)) {
      label = 39;
      break;
     }
     $204 = $notlit;
     HEAP8[$204>>0] = -1;
     $205 = $q;
     $206 = ((($205)) + 4|0);
     $q = $206;
    }
    if ((label|0) == 33) {
     ___assert_fail((5984|0),(904|0),4814,(5830|0));
     // unreachable;
    }
    else if ((label|0) == 35) {
     ___assert_fail((6021|0),(904|0),4816,(5830|0));
     // unreachable;
    }
    else if ((label|0) == 37) {
     ___assert_fail((2855|0),(904|0),4820,(5830|0));
     // unreachable;
    }
    else if ((label|0) == 39) {
     ___assert_fail((6033|0),(904|0),4823,(5830|0));
     // unreachable;
    }
   }
  }
 } while(0);
 $collect = 0;
 $207 = $0;
 $208 = ((($207)) + 268|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = $0;
 $211 = ((($210)) + 272|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ($209|0)==($212|0);
 $214 = $0;
 if ($213) {
  $215 = ((($214)) + 280|0);
  $216 = HEAP32[$215>>2]|0;
  $219 = $216;
 } else {
  $217 = ((($214)) + 268|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218;
 }
 $p = $219;
 while(1) {
  $220 = $p;
  $221 = $0;
  $222 = ((($221)) + 284|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = ($220|0)!=($223|0);
  if (!($224)) {
   break;
  }
  $225 = $p;
  $226 = HEAP32[$225>>2]|0;
  $c = $226;
  $227 = $c;
  $228 = ($227|0)!=(0|0);
  if ($228) {
   $229 = $c;
   $230 = ((($229)) + 4|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = $231 >>> 2;
   $233 = $232 & 1;
   $234 = ($233|0)!=(0);
   if (!($234)) {
    $235 = $c;
    $236 = ((($235)) + 4|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $237 & 1;
    $239 = ($238|0)!=(0);
    if ($239) {
     label = 49;
     break;
    }
    $240 = $0;
    $241 = $c;
    $242 = (_clause_is_toplevel_satisfied($240,$241)|0);
    $243 = ($242|0)!=(0);
    if ($243) {
     $244 = $c;
     _mark_clause_to_be_collected($244);
     $245 = $collect;
     $246 = (($245) + 1)|0;
     $collect = $246;
    }
   }
  }
  $247 = $p;
  $248 = ((($247)) + 4|0);
  $249 = $0;
  $250 = ((($249)) + 272|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)==($251|0);
  if ($252) {
   $253 = $0;
   $254 = ((($253)) + 280|0);
   $255 = HEAP32[$254>>2]|0;
   $258 = $255;
  } else {
   $256 = $p;
   $257 = ((($256)) + 4|0);
   $258 = $257;
  }
  $p = $258;
 }
 if ((label|0) == 49) {
  ___assert_fail((1441|0),(904|0),4842,(5830|0));
  // unreachable;
 }
 $259 = $0;
 (_collect_clauses($259)|0);
 $260 = $0;
 $261 = ((($260)) + 188|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = $0;
 $264 = ((($263)) + 192|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = ($262|0)!=($265|0);
 do {
  if ($266) {
   $267 = $0;
   $268 = ((($267)) + 188|0);
   $269 = HEAP32[$268>>2]|0;
   $q = $269;
   while(1) {
    $270 = $q;
    $271 = $0;
    $272 = ((($271)) + 192|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ($270|0)!=($273|0);
    if (!($274)) {
     label = 73;
     break;
    }
    $275 = $q;
    $276 = HEAP32[$275>>2]|0;
    $ilit = $276;
    $277 = $ilit;
    $278 = (0)<($277|0);
    if (!($278)) {
     label = 61;
     break;
    }
    $279 = $ilit;
    $280 = $0;
    $281 = ((($280)) + 32|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = ($279|0)<=($282|0);
    if (!($283)) {
     label = 61;
     break;
    }
    $284 = $ilit;
    $285 = $0;
    $286 = ((($285)) + 44|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (($287) + (($284*12)|0)|0);
    $289 = HEAP16[$288>>1]|0;
    $290 = ($289&65535) >>> 6;
    $291 = $290 & 1;
    $292 = $291&65535;
    $293 = ($292|0)!=(0);
    if (!($293)) {
     label = 63;
     break;
    }
    $294 = $0;
    $295 = ((($294)) + 180|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $0;
    $298 = ((($297)) + 184|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = ($296|0)==($299|0);
    if ($300) {
     $301 = $0;
     $302 = ((($301)) + 184|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = $0;
     $305 = ((($304)) + 176|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $303;
     $308 = $306;
     $309 = (($307) - ($308))|0;
     $310 = (($309|0) / 4)&-1;
     $old_num = $310;
     $311 = $old_num;
     $312 = ($311|0)!=(0);
     $313 = $old_num;
     $314 = $313<<1;
     $315 = $312 ? $314 : 1;
     $new_num = $315;
     $316 = $0;
     $317 = ((($316)) + 180|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $0;
     $320 = ((($319)) + 176|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = $318;
     $323 = $321;
     $324 = (($322) - ($323))|0;
     $325 = (($324|0) / 4)&-1;
     $count = $325;
     $326 = $0;
     $327 = ((($326)) + 176|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = $0;
     $330 = ((($329)) + 184|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($328>>>0)<=($331>>>0);
     if (!($332)) {
      label = 66;
      break;
     }
     $333 = $old_num;
     $334 = $333<<2;
     $old_size = $334;
     $335 = $new_num;
     $336 = $335<<2;
     $new_size = $336;
     $337 = $0;
     $338 = $0;
     $339 = ((($338)) + 176|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = $old_size;
     $342 = $new_size;
     $343 = (_resize($337,$340,$341,$342)|0);
     $344 = $0;
     $345 = ((($344)) + 176|0);
     HEAP32[$345>>2] = $343;
     $346 = $0;
     $347 = ((($346)) + 176|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = $count;
     $350 = (($348) + ($349<<2)|0);
     $351 = $0;
     $352 = ((($351)) + 180|0);
     HEAP32[$352>>2] = $350;
     $353 = $0;
     $354 = ((($353)) + 176|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $new_num;
     $357 = (($355) + ($356<<2)|0);
     $358 = $0;
     $359 = ((($358)) + 184|0);
     HEAP32[$359>>2] = $357;
    }
    $360 = $ilit;
    $361 = $0;
    $362 = ((($361)) + 180|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ((($363)) + 4|0);
    HEAP32[$362>>2] = $364;
    HEAP32[$363>>2] = $360;
    $365 = $0;
    $366 = $ilit;
    $367 = (0 - ($366))|0;
    $368 = (_int2lit($365,$367)|0);
    $lit = $368;
    $369 = $lit;
    $370 = HEAP8[$369>>0]|0;
    $371 = $370 << 24 >> 24;
    $372 = ($371|0)==(1);
    if (!($372)) {
     label = 69;
     break;
    }
    $373 = $lit;
    HEAP8[$373>>0] = 0;
    $374 = $0;
    $375 = ((($374)) + 40|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = $lit;
    $378 = $0;
    $379 = ((($378)) + 40|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = $377;
    $382 = $380;
    $383 = (($381) - ($382))|0;
    $384 = 1 ^ $383;
    $385 = (($376) + ($384)|0);
    $notlit = $385;
    $386 = $notlit;
    $387 = HEAP8[$386>>0]|0;
    $388 = $387 << 24 >> 24;
    $389 = ($388|0)==(-1);
    if (!($389)) {
     label = 71;
     break;
    }
    $390 = $notlit;
    HEAP8[$390>>0] = 0;
    $391 = $q;
    $392 = ((($391)) + 4|0);
    $q = $392;
   }
   if ((label|0) == 61) {
    ___assert_fail((5984|0),(904|0),4861,(5830|0));
    // unreachable;
   }
   else if ((label|0) == 63) {
    ___assert_fail((6054|0),(904|0),4862,(5830|0));
    // unreachable;
   }
   else if ((label|0) == 66) {
    ___assert_fail((6078|0),(904|0),4864,(5830|0));
    // unreachable;
   }
   else if ((label|0) == 69) {
    ___assert_fail((4450|0),(904|0),4867,(5830|0));
    // unreachable;
   }
   else if ((label|0) == 71) {
    ___assert_fail((6105|0),(904|0),4870,(5830|0));
    // unreachable;
   }
   else if ((label|0) == 73) {
    $393 = $0;
    $394 = ((($393)) + 188|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $0;
    $397 = ((($396)) + 192|0);
    HEAP32[$397>>2] = $395;
    break;
   }
  }
 } while(0);
 $398 = $0;
 $399 = ((($398)) + 696|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = $0;
 $402 = ((($401)) + 700|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = (($400) + ($403))|0;
 $405 = ($404*10)|0;
 $406 = (($405) + 100000)|0;
 $delta = $406;
 $407 = $delta;
 $408 = ($407>>>0)>(2000000);
 $$ = $408 ? 2000000 : $406;
 $delta = $$;
 $409 = $0;
 $410 = ((($409)) + 616|0);
 $411 = $410;
 $412 = $411;
 $413 = HEAP32[$412>>2]|0;
 $414 = (($411) + 4)|0;
 $415 = $414;
 $416 = HEAP32[$415>>2]|0;
 $417 = $delta;
 $418 = (_i64Add(($413|0),($416|0),($417|0),0)|0);
 $419 = tempRet0;
 $420 = $0;
 $421 = ((($420)) + 608|0);
 $422 = $421;
 $423 = $422;
 HEAP32[$423>>2] = $418;
 $424 = (($422) + 4)|0;
 $425 = $424;
 HEAP32[$425>>2] = $419;
 $426 = $0;
 $427 = ((($426)) + 632|0);
 $428 = HEAP32[$427>>2]|0;
 $429 = $0;
 $430 = ((($429)) + 556|0);
 HEAP32[$430>>2] = $428;
 $431 = $0;
 $432 = ((($431)) + 552|0);
 $433 = HEAP32[$432>>2]|0;
 $434 = (($433) + 1)|0;
 HEAP32[$432>>2] = $434;
 $435 = $0;
 _report($435,1,115);
 STACKTOP = sp;return;
}
function _new_prefix($ps,$str) {
 $ps = $ps|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $str;
 $2 = $0;
 _delete_prefix($2);
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = $1;
  $7 = (_strlen($6)|0);
  $8 = (($7) + 1)|0;
  $9 = (_new($5,$8)|0);
  $10 = $0;
  $11 = ((($10)) + 16|0);
  HEAP32[$11>>2] = $9;
  $12 = $0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  (_strcpy($14,$15)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((5815|0),(904|0),1097,(5819|0));
  // unreachable;
 }
}
function _import_lit($ps,$lit,$nointernal) {
 $ps = $ps|0;
 $lit = $lit|0;
 $nointernal = $nointernal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $nointernal;
 $3 = $1;
 $4 = ($3|0)==(-2147483648);
 if ($4) {
  $5 = HEAP32[56>>2]|0;
  (_fputs(5593,$5)|0);
  _abort();
  // unreachable;
 }
 $6 = $1;
 $7 = (Math_abs(($6|0))|0);
 $8 = $0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)>($10|0);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 164|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = ((($15)) + 168|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)!=($17|0);
  if ($18) {
   $19 = HEAP32[56>>2]|0;
   (_fputs(5634,$19)|0);
   _abort();
   // unreachable;
  }
 }
 $20 = $1;
 $21 = (Math_abs(($20|0))|0);
 $22 = $0;
 $23 = ((($22)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21|0)<=($24|0);
 if (!($25)) {
  while(1) {
   $59 = $1;
   $60 = (Math_abs(($59|0))|0);
   $61 = $0;
   $62 = ((($61)) + 32|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($60|0)>($63|0);
   $65 = $0;
   if (!($64)) {
    break;
   }
   _inc_max_var($65);
  }
  $66 = $1;
  $67 = (_int2lit($65,$66)|0);
  $res = $67;
  $68 = $res;
  STACKTOP = sp;return ($68|0);
 }
 $26 = $0;
 $27 = $1;
 $28 = (_int2lit($26,$27)|0);
 $res = $28;
 $29 = $0;
 $30 = ((($29)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $res;
 $33 = $0;
 $34 = ((($33)) + 40|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $32;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 2)&-1;
 $40 = (($31) + (($39*12)|0)|0);
 $v = $40;
 $41 = $2;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $v;
  $44 = HEAP16[$43>>1]|0;
  $45 = ($44&65535) >>> 6;
  $46 = $45 & 1;
  $47 = $46&65535;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = HEAP32[56>>2]|0;
   (_fputs(5699,$49)|0);
   _abort();
   // unreachable;
  }
 }
 $50 = $2;
 $51 = ($50|0)!=(0);
 if ($51) {
  $68 = $res;
  STACKTOP = sp;return ($68|0);
 }
 $52 = $v;
 $53 = HEAP16[$52>>1]|0;
 $54 = ($53&65535) >>> 6;
 $55 = $54 & 1;
 $56 = $55&65535;
 $57 = ($56|0)!=(0);
 if ($57) {
  $68 = $res;
  STACKTOP = sp;return ($68|0);
 } else {
  $58 = HEAP32[56>>2]|0;
  (_fputs(5757,$58)|0);
  _abort();
  // unreachable;
 }
 return (0)|0;
}
function _add_lit($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((2835|0),(904|0),1692,(5560|0));
  // unreachable;
 }
 $4 = $0;
 $5 = ((($4)) + 340|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 344|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)==($9|0);
 if (!($10)) {
  $70 = $1;
  $71 = $0;
  $72 = ((($71)) + 340|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  HEAP32[$72>>2] = $74;
  HEAP32[$73>>2] = $70;
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = ((($11)) + 344|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = ((($14)) + 336|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $13;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = (($19|0) / 4)&-1;
 $old_num = $20;
 $21 = $old_num;
 $22 = ($21|0)!=(0);
 $23 = $old_num;
 $24 = $23<<1;
 $25 = $22 ? $24 : 1;
 $new_num = $25;
 $26 = $0;
 $27 = ((($26)) + 340|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = ((($29)) + 336|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $28;
 $33 = $31;
 $34 = (($32) - ($33))|0;
 $35 = (($34|0) / 4)&-1;
 $count = $35;
 $36 = $0;
 $37 = ((($36)) + 336|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $0;
 $40 = ((($39)) + 344|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38>>>0)<=($41>>>0);
 if (!($42)) {
  ___assert_fail((5568|0),(904|0),1695,(5560|0));
  // unreachable;
 }
 $43 = $old_num;
 $44 = $43<<2;
 $old_size = $44;
 $45 = $new_num;
 $46 = $45<<2;
 $new_size = $46;
 $47 = $0;
 $48 = $0;
 $49 = ((($48)) + 336|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $old_size;
 $52 = $new_size;
 $53 = (_resize($47,$50,$51,$52)|0);
 $54 = $0;
 $55 = ((($54)) + 336|0);
 HEAP32[$55>>2] = $53;
 $56 = $0;
 $57 = ((($56)) + 336|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $count;
 $60 = (($58) + ($59<<2)|0);
 $61 = $0;
 $62 = ((($61)) + 340|0);
 HEAP32[$62>>2] = $60;
 $63 = $0;
 $64 = ((($63)) + 336|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $new_num;
 $67 = (($65) + ($66<<2)|0);
 $68 = $0;
 $69 = ((($68)) + 344|0);
 HEAP32[$69>>2] = $67;
 $70 = $1;
 $71 = $0;
 $72 = ((($71)) + 340|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 4|0);
 HEAP32[$72>>2] = $74;
 HEAP32[$73>>2] = $70;
 STACKTOP = sp;return;
}
function _simplify_and_add_original_clause($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = (_trivial_clause($1)|0);
 $3 = ($2|0)!=(0);
 $4 = $0;
 if ($3) {
  $5 = ((($4)) + 336|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $0;
  $8 = ((($7)) + 340|0);
  HEAP32[$8>>2] = $6;
  $9 = $0;
  $10 = ((($9)) + 272|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = ((($12)) + 276|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)==($14|0);
  do {
   if ($15) {
    $16 = $0;
    $17 = ((($16)) + 276|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $0;
    $20 = ((($19)) + 268|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18;
    $23 = $21;
    $24 = (($22) - ($23))|0;
    $25 = (($24|0) / 4)&-1;
    $old_num = $25;
    $26 = $old_num;
    $27 = ($26|0)!=(0);
    $28 = $old_num;
    $29 = $28<<1;
    $30 = $27 ? $29 : 1;
    $new_num = $30;
    $31 = $0;
    $32 = ((($31)) + 272|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $0;
    $35 = ((($34)) + 268|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $33;
    $38 = $36;
    $39 = (($37) - ($38))|0;
    $40 = (($39|0) / 4)&-1;
    $count = $40;
    $41 = $0;
    $42 = ((($41)) + 268|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $0;
    $45 = ((($44)) + 276|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($43>>>0)<=($46>>>0);
    if ($47) {
     $48 = $old_num;
     $49 = $48<<2;
     $old_size = $49;
     $50 = $new_num;
     $51 = $50<<2;
     $new_size = $51;
     $52 = $0;
     $53 = $0;
     $54 = ((($53)) + 268|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $old_size;
     $57 = $new_size;
     $58 = (_resize($52,$55,$56,$57)|0);
     $59 = $0;
     $60 = ((($59)) + 268|0);
     HEAP32[$60>>2] = $58;
     $61 = $0;
     $62 = ((($61)) + 268|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $count;
     $65 = (($63) + ($64<<2)|0);
     $66 = $0;
     $67 = ((($66)) + 272|0);
     HEAP32[$67>>2] = $65;
     $68 = $0;
     $69 = ((($68)) + 268|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $new_num;
     $72 = (($70) + ($71<<2)|0);
     $73 = $0;
     $74 = ((($73)) + 276|0);
     HEAP32[$74>>2] = $72;
     break;
    } else {
     ___assert_fail((3548|0),(904|0),2387,(5471|0));
     // unreachable;
    }
   }
  } while(0);
  $75 = $0;
  $76 = ((($75)) + 272|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 4|0);
  HEAP32[$76>>2] = $78;
  HEAP32[$77>>2] = 0;
  $79 = $0;
  $80 = ((($79)) + 720|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 1)|0;
  HEAP32[$80>>2] = $82;
  $83 = $0;
  $84 = ((($83)) + 704|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 1)|0;
  HEAP32[$84>>2] = $86;
  STACKTOP = sp;return;
 }
 $87 = ((($4)) + 164|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $0;
 $90 = ((($89)) + 168|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($88|0)!=($91|0);
 if ($92) {
  $93 = $0;
  $94 = $0;
  $95 = ((($94)) + 40|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $0;
  $98 = ((($97)) + 168|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($99)) + -4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $0;
  $103 = ((($102)) + 40|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $101;
  $106 = $104;
  $107 = (($105) - ($106))|0;
  $108 = 1 ^ $107;
  $109 = (($96) + ($108)|0);
  _add_lit($93,$109);
 }
 $110 = $0;
 $111 = (_add_simplified_clause($110,0)|0);
 $c = $111;
 $112 = $c;
 $113 = $0;
 $114 = ((($113)) + 68|0);
 $115 = ($112|0)==($114|0);
 if (!($115)) {
  STACKTOP = sp;return;
 }
 $116 = $0;
 $117 = ((($116)) + 116|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0);
 if ($119) {
  ___assert_fail((2400|0),(904|0),2403,(5471|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _assume_contexts($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 148|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 152|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)!=($6|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = ((($8)) + 164|0);
 $10 = HEAP32[$9>>2]|0;
 $p = $10;
 while(1) {
  $11 = $p;
  $12 = $0;
  $13 = ((($12)) + 168|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)!=($14|0);
  if (!($15)) {
   break;
  }
  $16 = $0;
  $17 = $p;
  $18 = HEAP32[$17>>2]|0;
  _assume($16,$18);
  $19 = $p;
  $20 = ((($19)) + 4|0);
  $p = $20;
 }
 STACKTOP = sp;return;
}
function _assume($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $0;
 $3 = ((($2)) + 152|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 160|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $80 = $1;
  $81 = $0;
  $82 = ((($81)) + 152|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 4|0);
  HEAP32[$82>>2] = $84;
  HEAP32[$83>>2] = $80;
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 156|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 148|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if (!($15)) {
  ___assert_fail((5416|0),(904|0),6166,(5439|0));
  // unreachable;
 }
 $16 = $0;
 $17 = ((($16)) + 160|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = ((($19)) + 148|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $18;
 $23 = $21;
 $24 = (($22) - ($23))|0;
 $25 = (($24|0) / 4)&-1;
 $old_num = $25;
 $26 = $old_num;
 $27 = ($26|0)!=(0);
 $28 = $old_num;
 $29 = $28<<1;
 $30 = $27 ? $29 : 1;
 $new_num = $30;
 $31 = $0;
 $32 = ((($31)) + 152|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = ((($34)) + 148|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $33;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $count = $40;
 $41 = $0;
 $42 = ((($41)) + 148|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $0;
 $45 = ((($44)) + 160|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43>>>0)<=($46>>>0);
 if (!($47)) {
  ___assert_fail((5446|0),(904|0),6167,(5439|0));
  // unreachable;
 }
 $48 = $old_num;
 $49 = $48<<2;
 $old_size = $49;
 $50 = $new_num;
 $51 = $50<<2;
 $new_size = $51;
 $52 = $0;
 $53 = $0;
 $54 = ((($53)) + 148|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $old_size;
 $57 = $new_size;
 $58 = (_resize($52,$55,$56,$57)|0);
 $59 = $0;
 $60 = ((($59)) + 148|0);
 HEAP32[$60>>2] = $58;
 $61 = $0;
 $62 = ((($61)) + 148|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $count;
 $65 = (($63) + ($64<<2)|0);
 $66 = $0;
 $67 = ((($66)) + 152|0);
 HEAP32[$67>>2] = $65;
 $68 = $0;
 $69 = ((($68)) + 148|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $new_num;
 $72 = (($70) + ($71<<2)|0);
 $73 = $0;
 $74 = ((($73)) + 160|0);
 HEAP32[$74>>2] = $72;
 $75 = $0;
 $76 = ((($75)) + 148|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $0;
 $79 = ((($78)) + 156|0);
 HEAP32[$79>>2] = $77;
 $80 = $1;
 $81 = $0;
 $82 = ((($81)) + 152|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($83)) + 4|0);
 HEAP32[$82>>2] = $84;
 HEAP32[$83>>2] = $80;
 STACKTOP = sp;return;
}
function _sat($ps,$l) {
 $ps = $ps|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $backtracked = 0, $count = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $l;
 $count = 0;
 $3 = $1;
 $4 = ((($3)) + 332|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $7 = $1;
  _bcp($7);
 }
 $8 = $1;
 $9 = ((($8)) + 332|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  _backtrack($12);
 }
 $13 = $1;
 $14 = ((($13)) + 328|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $0 = 20;
  $204 = $0;
  STACKTOP = sp;return ($204|0);
 }
 $17 = $1;
 $18 = (_satisfied($17)|0);
 $19 = ($18|0)!=(0);
 L11: do {
  if (!($19)) {
   $20 = $1;
   $21 = ((($20)) + 608|0);
   $22 = $21;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = ((($28)) + 616|0);
   $30 = $29;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = ($27>>>0)<($35>>>0);
   $37 = ($24>>>0)<=($32>>>0);
   $38 = ($27|0)==($35|0);
   $39 = $38 & $37;
   $40 = $36 | $39;
   if ($40) {
    $41 = $1;
    _simplify($41,0);
   }
   $42 = $1;
   $43 = ((($42)) + 328|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)!=(0|0);
   if ($45) {
    $0 = 20;
    $204 = $0;
    STACKTOP = sp;return ($204|0);
   }
   $46 = $1;
   $47 = (_satisfied($46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $49 = $1;
    _init_restart($49);
    $50 = $1;
    $51 = ((($50)) + 568|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)!=(0);
    if (!($53)) {
     $54 = $1;
     _init_reduce($54);
    }
    $55 = $1;
    $56 = ((($55)) + 632|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $1;
    $59 = ((($58)) + 560|0);
    HEAP32[$59>>2] = $57;
    $backtracked = 0;
    while(1) {
     $60 = $1;
     $61 = ((($60)) + 332|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)!=(0|0);
     if (!($63)) {
      $64 = $1;
      _bcp($64);
     }
     $65 = $1;
     $66 = ((($65)) + 332|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)!=(0|0);
     $69 = $1;
     if ($68) {
      _incincs($69);
      $70 = $1;
      _backtrack($70);
      $71 = $1;
      $72 = ((($71)) + 328|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)!=(0|0);
      if ($74) {
       label = 20;
       break;
      }
      $backtracked = 1;
      continue;
     }
     $75 = (_satisfied($69)|0);
     $76 = ($75|0)!=(0);
     if ($76) {
      break L11;
     }
     $79 = $backtracked;
     $80 = ($79|0)!=(0);
     if ($80) {
      $backtracked = 0;
      $81 = $1;
      $82 = ((($81)) + 28|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)!=(0);
      if (!($84)) {
       $85 = $1;
       $86 = ((($85)) + 560|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $1;
       $89 = ((($88)) + 632|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($87>>>0)<($90>>>0);
       if ($91) {
        $92 = $1;
        _iteration($92);
       }
      }
     }
     $93 = $2;
     $94 = ($93|0)>=(0);
     if ($94) {
      $95 = $count;
      $96 = $2;
      $97 = ($95|0)>=($96|0);
      if ($97) {
       label = 30;
       break;
      }
     }
     $98 = $1;
     $99 = ((($98)) + 808|0);
     $100 = ((($99)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101|0)!=(0|0);
     $103 = $count;
     $104 = ($103|0)>(0);
     $or$cond = $102 & $104;
     if ($or$cond) {
      $105 = $count;
      $106 = (($105|0) % 1024)&-1;
      $107 = ($106|0)!=(0);
      if (!($107)) {
       $108 = $1;
       $109 = ((($108)) + 808|0);
       $110 = ((($109)) + 4|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = $1;
       $113 = ((($112)) + 808|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (FUNCTION_TABLE_ii[$111 & 3]($114)|0);
       $116 = ($115|0)!=(0);
       if ($116) {
        label = 34;
        break;
       }
      }
     }
     $117 = $1;
     $118 = ((($117)) + 616|0);
     $119 = $118;
     $120 = $119;
     $121 = HEAP32[$120>>2]|0;
     $122 = (($119) + 4)|0;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $125 = $1;
     $126 = ((($125)) + 624|0);
     $127 = $126;
     $128 = $127;
     $129 = HEAP32[$128>>2]|0;
     $130 = (($127) + 4)|0;
     $131 = $130;
     $132 = HEAP32[$131>>2]|0;
     $133 = ($124>>>0)>($132>>>0);
     $134 = ($121>>>0)>=($129>>>0);
     $135 = ($124|0)==($132|0);
     $136 = $135 & $134;
     $137 = $133 | $136;
     if ($137) {
      label = 36;
      break;
     }
     $138 = $1;
     $139 = ((($138)) + 556|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $1;
     $142 = ((($141)) + 632|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140>>>0)<($143>>>0);
     if ($144) {
      $145 = $1;
      $146 = ((($145)) + 608|0);
      $147 = $146;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $1;
      $154 = ((($153)) + 616|0);
      $155 = $154;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      $161 = ($152>>>0)<($160>>>0);
      $162 = ($149>>>0)<=($157>>>0);
      $163 = ($152|0)==($160|0);
      $164 = $163 & $162;
      $165 = $161 | $164;
      if ($165) {
       $166 = $1;
       _simplify($166,0);
       $167 = $1;
       $168 = (_bcp_queue_is_empty($167)|0);
       $169 = ($168|0)!=(0);
       if (!($169)) {
        continue;
       }
       $170 = $1;
       $171 = ((($170)) + 328|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = ($172|0)!=(0|0);
       if ($173) {
        label = 41;
        break;
       }
       $174 = $1;
       $175 = (_satisfied($174)|0);
       $176 = ($175|0)!=(0);
       if ($176) {
        label = 43;
        break;
       }
       $177 = $1;
       $178 = ((($177)) + 28|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)!=(0);
       if ($180) {
        label = 45;
        break;
       }
      }
     }
     $181 = $1;
     $182 = (_need_to_reduce($181)|0);
     $183 = ($182|0)!=(0);
     if ($183) {
      $184 = $1;
      _reduce($184,50);
     }
     $185 = $1;
     $186 = ((($185)) + 676|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $1;
     $189 = ((($188)) + 588|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($187>>>0)>=($190>>>0);
     do {
      if ($191) {
       $192 = $1;
       $193 = ((($192)) + 28|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = ($194>>>0)>(2);
       if (!($195)) {
        break;
       }
       $196 = $1;
       _restart($196);
      }
     } while(0);
     $197 = $1;
     _decide($197);
     $198 = $1;
     $199 = ((($198)) + 248|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ($200|0)!=(0|0);
     if ($201) {
      label = 53;
      break;
     }
     $202 = $count;
     $203 = (($202) + 1)|0;
     $count = $203;
    }
    if ((label|0) == 20) {
     $0 = 20;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
    else if ((label|0) == 30) {
     $0 = 0;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
    else if ((label|0) == 34) {
     $0 = 0;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
    else if ((label|0) == 36) {
     $0 = 0;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
    else if ((label|0) == 41) {
     $0 = 20;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
    else if ((label|0) == 43) {
     $0 = 10;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
    else if ((label|0) == 45) {
     ___assert_fail((2784|0),(904|0),5352,(2795|0));
     // unreachable;
    }
    else if ((label|0) == 53) {
     $0 = 20;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
   }
  }
 } while(0);
 $77 = $1;
 _original_clauses_satisfied($77);
 $78 = $1;
 _assumptions_satisfied($78);
 $0 = 10;
 $204 = $0;
 STACKTOP = sp;return ($204|0);
}
function _report($ps,$replevel,$type) {
 $ps = $ps|0;
 $replevel = $replevel|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $rounds = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $ps;
 $1 = $replevel;
 $2 = $type;
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ($5|0)<($6|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 _sflush($8);
 $9 = $0;
 $10 = ((($9)) + 532|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = $0;
  $14 = ((($13)) + 532|0);
  HEAP32[$14>>2] = -1;
 }
 $15 = $0;
 $16 = ((($15)) + 532|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)<(0);
 $19 = $18 ? 2 : 1;
 $rounds = $19;
 while(1) {
  $20 = $rounds;
  $21 = ($20|0)!=(0);
  $22 = $0;
  $23 = ((($22)) + 532|0);
  $24 = HEAP32[$23>>2]|0;
  if (!($21)) {
   break;
  }
  $25 = ($24|0)>=(0);
  if ($25) {
   $26 = $0;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $0;
   $30 = ((($29)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $2;
   $33 = $32 << 24 >> 24;
   HEAP32[$vararg_buffer>>2] = $31;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $33;
   (_fprintf($28,2601,$vararg_buffer)|0);
  }
  $34 = $0;
  $35 = $0;
  $36 = ((($35)) + 472|0);
  $37 = +HEAPF64[$36>>3];
  _relem($34,2607,1,$37);
  $38 = $0;
  $39 = $0;
  $40 = (+_avglevel($39));
  _relem($38,2615,1,$40);
  $41 = $0;
  $42 = ((($41)) + 632|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $0;
  $45 = ((($44)) + 32|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43>>>0)<=($46>>>0);
  if (!($47)) {
   label = 9;
   break;
  }
  $48 = $0;
  $49 = $0;
  $50 = ((($49)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $0;
  $53 = ((($52)) + 632|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($51) - ($54))|0;
  $56 = (+($55>>>0));
  _relem($48,2653,0,$56);
  $57 = $0;
  $58 = $0;
  $59 = ((($58)) + 32|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $0;
   $63 = ((($62)) + 724|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (+($64>>>0));
   $66 = $0;
   $67 = ((($66)) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (+($68>>>0));
   $70 = $65 / $69;
   $72 = $70;
  } else {
   $72 = 0.0;
  }
  $71 = 100.0 * $72;
  _relem($57,2663,1,$71);
  $73 = $0;
  $74 = $0;
  $75 = ((($74)) + 688|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (+($76>>>0));
  _relem($73,2668,0,$77);
  $78 = $0;
  $79 = $0;
  $80 = ((($79)) + 676|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (+($81>>>0));
  _relem($78,2677,0,$82);
  $83 = $0;
  $84 = $0;
  $85 = ((($84)) + 692|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (+($86>>>0));
  _relem($83,2687,0,$87);
  $88 = $0;
  $89 = $0;
  $90 = ((($89)) + 568|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (+($91>>>0));
  _relem($88,2695,0,$92);
  $93 = $0;
  $94 = $0;
  $95 = (_dynamic_flips_per_assignment_per_mille($94)|0);
  $96 = (+($95>>>0));
  $97 = $96 / 10.0;
  _relem($93,2701,1,$97);
  $98 = $0;
  $99 = $0;
  $100 = (+_mb($99));
  _relem($98,2709,1,$100);
  $101 = $0;
  _relem($101,0,0,0.0);
  $102 = $0;
  $103 = ((($102)) + 532|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + 1)|0;
  HEAP32[$103>>2] = $105;
  $106 = $rounds;
  $107 = (($106) + -1)|0;
  $rounds = $107;
 }
 if ((label|0) == 9) {
  ___assert_fail((2621|0),(904|0),3007,(2646|0));
  // unreachable;
 }
 $108 = (($24|0) % 22)&-1;
 $109 = ($108|0)==(21);
 if ($109) {
  $110 = $0;
  _rheader($110);
 }
 $111 = $0;
 $112 = ((($111)) + 12|0);
 $113 = HEAP32[$112>>2]|0;
 (_fflush($113)|0);
 STACKTOP = sp;return;
}
function _rheader($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 536|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 532|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)<=($6|0);
 if (!($7)) {
  ___assert_fail((2551|0),(904|0),2855,(2582|0));
  // unreachable;
 }
 $8 = $0;
 $9 = ((($8)) + 536|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = ((($11)) + 532|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $0;
 $16 = ((($15)) + 532|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = ((($18)) + 536|0);
 HEAP32[$19>>2] = $17;
 $20 = $0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$vararg_buffer>>2] = $25;
 (_fprintf($22,2590,$vararg_buffer)|0);
 $26 = $0;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = ((($32)) + 504|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $31;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $34;
 (_fprintf($28,2594,$vararg_buffer1)|0);
 $35 = $0;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $0;
 $42 = ((($41)) + 504|0);
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $40;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $44;
 (_fprintf($37,2594,$vararg_buffer5)|0);
 $45 = $0;
 $46 = ((($45)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $0;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$vararg_buffer9>>2] = $50;
 (_fprintf($47,2590,$vararg_buffer9)|0);
 STACKTOP = sp;return;
}
function _check_sat_state($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(2);
 if ($3) {
  $4 = HEAP32[56>>2]|0;
  (_fputs(2498,$4)|0);
  _abort();
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _delete($ps,$void_ptr,$size) {
 $ps = $ps|0;
 $void_ptr = $void_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $void_ptr;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0);
 if (!($4)) {
  if ($6) {
   ___assert_fail((2227|0),(904|0),961,(2233|0));
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 if (!($6)) {
  ___assert_fail((2240|0),(904|0),965,(2233|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 $9 = $1;
 $10 = ((($9)) + -8|0);
 $11 = $8 ? $10 : 0;
 $b = $11;
 $12 = $2;
 $13 = $0;
 $14 = ((($13)) + 456|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)<=($15>>>0);
 if (!($16)) {
  ___assert_fail((2245|0),(904|0),968,(2233|0));
  // unreachable;
 }
 $17 = $2;
 $18 = $0;
 $19 = ((($18)) + 456|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - ($17))|0;
 HEAP32[$19>>2] = $21;
 $22 = $b;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ($23|0)==($24|0);
 if (!($25)) {
  ___assert_fail((2271|0),(904|0),971,(2233|0));
  // unreachable;
 }
 $26 = $2;
 $27 = (($26) + 8)|0;
 $bytes = $27;
 $28 = $0;
 $29 = ((($28)) + 804|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $0;
  $33 = ((($32)) + 804|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  $36 = ((($35)) + 792|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $b;
  $39 = $bytes;
  FUNCTION_TABLE_viii[$34 & 0]($37,$38,$39);
  STACKTOP = sp;return;
 } else {
  $40 = $b;
  _free($40);
  STACKTOP = sp;return;
 }
}
function _new($ps,$size) {
 $ps = $ps|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $size;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $5 = $2;
 $6 = (($5) + 8)|0;
 $bytes = $6;
 $7 = $1;
 $8 = ((($7)) + 796|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 796|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = ((($14)) + 792|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $bytes;
  $18 = (FUNCTION_TABLE_iii[$13 & 0]($16,$17)|0);
  $b = $18;
 } else {
  $19 = $bytes;
  $20 = (_malloc($19)|0);
  $b = $20;
 }
 $21 = $b;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $23 = HEAP32[56>>2]|0;
  (_fputs(2190,$23)|0);
  _abort();
  // unreachable;
 }
 $24 = $2;
 $25 = $b;
 HEAP32[$25>>2] = $24;
 $26 = $2;
 $27 = $1;
 $28 = ((($27)) + 456|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($26))|0;
 HEAP32[$28>>2] = $30;
 $31 = $1;
 $32 = ((($31)) + 456|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $1;
 $35 = ((($34)) + 460|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($33>>>0)>($36>>>0);
 if ($37) {
  $38 = $1;
  $39 = ((($38)) + 456|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $1;
  $42 = ((($41)) + 460|0);
  HEAP32[$42>>2] = $40;
 }
 $43 = $b;
 $44 = ((($43)) + 8|0);
 $0 = $44;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _check_sat_or_unsat_or_unknown_state($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(2);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(3);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(4);
 if ($9) {
  $10 = HEAP32[56>>2]|0;
  (_fputs(2107,$10)|0);
  _abort();
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _sflush($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $delta = 0.0;
 var $now = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = (+_picosat_time_stamp());
 $now = $1;
 $2 = $now;
 $3 = $0;
 $4 = ((($3)) + 488|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $2 - $5;
 $delta = $6;
 $7 = $delta;
 $8 = $7 < 0.0;
 $9 = $delta;
 $10 = $8 ? 0.0 : $9;
 $delta = $10;
 $11 = $delta;
 $12 = $0;
 $13 = ((($12)) + 472|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 + $11;
 HEAPF64[$13>>3] = $15;
 $16 = $now;
 $17 = $0;
 $18 = ((($17)) + 488|0);
 HEAPF64[$18>>3] = $16;
 STACKTOP = sp;return;
}
function _end_of_lits($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4<<2)|0);
 STACKTOP = sp;return ($5|0);
}
function _hpush($ps,$r) {
 $ps = $ps|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $r;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1073741823;
 $6 = ($5|0)!=(0);
 if ($6) {
  ___assert_fail((1980|0),(904|0),2533,(1988|0));
  // unreachable;
 }
 $7 = $0;
 $8 = ((($7)) + 260|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 264|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)==($12|0);
 do {
  if ($13) {
   $14 = $0;
   $15 = ((($14)) + 264|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $0;
   $18 = ((($17)) + 256|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $16;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $23 = (($22|0) / 4)&-1;
   $old_num = $23;
   $24 = $old_num;
   $25 = ($24|0)!=(0);
   $26 = $old_num;
   $27 = $26<<1;
   $28 = $25 ? $27 : 1;
   $new_num = $28;
   $29 = $0;
   $30 = ((($29)) + 260|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $0;
   $33 = ((($32)) + 256|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $31;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = (($37|0) / 4)&-1;
   $count = $38;
   $39 = $0;
   $40 = ((($39)) + 256|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $0;
   $43 = ((($42)) + 264|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41>>>0)<=($44>>>0);
   if ($45) {
    $46 = $old_num;
    $47 = $46<<2;
    $old_size = $47;
    $48 = $new_num;
    $49 = $48<<2;
    $new_size = $49;
    $50 = $0;
    $51 = $0;
    $52 = ((($51)) + 256|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $old_size;
    $55 = $new_size;
    $56 = (_resize($50,$53,$54,$55)|0);
    $57 = $0;
    $58 = ((($57)) + 256|0);
    HEAP32[$58>>2] = $56;
    $59 = $0;
    $60 = ((($59)) + 256|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $count;
    $63 = (($61) + ($62<<2)|0);
    $64 = $0;
    $65 = ((($64)) + 260|0);
    HEAP32[$65>>2] = $63;
    $66 = $0;
    $67 = ((($66)) + 256|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $new_num;
    $70 = (($68) + ($69<<2)|0);
    $71 = $0;
    $72 = ((($71)) + 264|0);
    HEAP32[$72>>2] = $70;
    break;
   } else {
    ___assert_fail((1994|0),(904|0),2536,(1988|0));
    // unreachable;
   }
  }
 } while(0);
 $73 = $0;
 $74 = ((($73)) + 260|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + 4|0);
 HEAP32[$74>>2] = $76;
 $77 = $0;
 $78 = ((($77)) + 256|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $75;
 $81 = $79;
 $82 = (($80) - ($81))|0;
 $83 = (($82|0) / 4)&-1;
 $84 = $1;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $83 & 1073741823;
 $88 = $86 & -1073741824;
 $89 = $88 | $87;
 HEAP32[$85>>2] = $89;
 $90 = $1;
 $91 = $1;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 & 1073741823;
 $95 = $0;
 $96 = ((($95)) + 256|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) + ($94<<2)|0);
 HEAP32[$98>>2] = $90;
 $99 = $0;
 $100 = $1;
 _hup($99,$100);
 STACKTOP = sp;return;
}
function _reduce($ps,$percentage) {
 $ps = $ps|0;
 $percentage = $percentage|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aa = 0, $c = 0, $collect = 0, $count = 0, $count13 = 0;
 var $count8 = 0, $i = 0, $i19 = 0, $i22 = 0, $j = 0, $j20 = 0, $l = 0, $l17 = 0, $lcollect = 0, $ll = 0, $m = 0, $new_num = 0, $new_num12 = 0, $new_num7 = 0, $new_size = 0, $new_size10 = 0, $new_size15 = 0, $nn = 0, $old_num = 0, $old_num11 = 0;
 var $old_num6 = 0, $old_size = 0, $old_size14 = 0, $old_size9 = 0, $p = 0, $pivot = 0, $pivot16 = 0, $r = 0, $r18 = 0, $redcount = 0, $rr = 0, $target = 0, $tmp = 0, $tmp1 = 0, $tmp2 = 0, $tmp21 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $percentage;
 $2 = $0;
 $3 = ((($2)) + 376|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 372|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  ___assert_fail((1362|0),(904|0),4943,(1388|0));
  // unreachable;
 }
 $9 = $0;
 $10 = ((($9)) + 676|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 580|0);
 HEAP32[$13>>2] = $11;
 $14 = $1;
 $15 = ($14>>>0)<=(100);
 if (!($15)) {
  ___assert_fail((1395|0),(904|0),4947,(1388|0));
  // unreachable;
 }
 while(1) {
  $16 = $0;
  $17 = ((($16)) + 692|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = ((($19)) + 584|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18) - ($21))|0;
  $23 = $0;
  $24 = ((($23)) + 380|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = ((($26)) + 372|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $25;
  $30 = $28;
  $31 = (($29) - ($30))|0;
  $32 = (($31|0) / 4)&-1;
  $33 = ($22>>>0)>($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $0;
  $35 = ((($34)) + 380|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $0;
  $38 = ((($37)) + 372|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $36;
  $41 = $39;
  $42 = (($40) - ($41))|0;
  $43 = (($42|0) / 4)&-1;
  $old_num = $43;
  $44 = $old_num;
  $45 = ($44|0)!=(0);
  $46 = $old_num;
  $47 = $46<<1;
  $48 = $45 ? $47 : 1;
  $new_num = $48;
  $49 = $0;
  $50 = ((($49)) + 376|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $0;
  $53 = ((($52)) + 372|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $51;
  $56 = $54;
  $57 = (($55) - ($56))|0;
  $58 = (($57|0) / 4)&-1;
  $count = $58;
  $59 = $0;
  $60 = ((($59)) + 372|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $0;
  $63 = ((($62)) + 380|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61>>>0)<=($64>>>0);
  if (!($65)) {
   label = 8;
   break;
  }
  $66 = $old_num;
  $67 = $66<<2;
  $old_size = $67;
  $68 = $new_num;
  $69 = $68<<2;
  $new_size = $69;
  $70 = $0;
  $71 = $0;
  $72 = ((($71)) + 372|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $old_size;
  $75 = $new_size;
  $76 = (_resize($70,$73,$74,$75)|0);
  $77 = $0;
  $78 = ((($77)) + 372|0);
  HEAP32[$78>>2] = $76;
  $79 = $0;
  $80 = ((($79)) + 372|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $count;
  $83 = (($81) + ($82<<2)|0);
  $84 = $0;
  $85 = ((($84)) + 376|0);
  HEAP32[$85>>2] = $83;
  $86 = $0;
  $87 = ((($86)) + 372|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $new_num;
  $90 = (($88) + ($89<<2)|0);
  $91 = $0;
  $92 = ((($91)) + 380|0);
  HEAP32[$92>>2] = $90;
 }
 if ((label|0) == 8) {
  ___assert_fail((1413|0),(904|0),4951,(1388|0));
  // unreachable;
 }
 $collect = 0;
 $lcollect = 0;
 $93 = $0;
 $94 = ((($93)) + 556|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $0;
 $97 = ((($96)) + 632|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($95>>>0)<($98>>>0);
 $100 = $0;
 do {
  if ($99) {
   $101 = ((($100)) + 268|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $0;
   $104 = ((($103)) + 272|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)==($105|0);
   $107 = $0;
   if ($106) {
    $108 = ((($107)) + 280|0);
    $109 = HEAP32[$108>>2]|0;
    $114 = $109;
    break;
   } else {
    $110 = ((($107)) + 268|0);
    $111 = HEAP32[$110>>2]|0;
    $114 = $111;
    break;
   }
  } else {
   $112 = ((($100)) + 280|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113;
  }
 } while(0);
 $p = $114;
 L21: while(1) {
  $115 = $p;
  $116 = $0;
  $117 = ((($116)) + 284|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115|0)!=($118|0);
  if (!($119)) {
   label = 35;
   break;
  }
  $120 = $p;
  $121 = HEAP32[$120>>2]|0;
  $c = $121;
  $122 = $c;
  $123 = ($122|0)!=(0|0);
  do {
   if ($123) {
    $124 = $c;
    $125 = ((($124)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $126 >>> 2;
    $128 = $127 & 1;
    $129 = ($128|0)!=(0);
    if (!($129)) {
     $130 = $c;
     $131 = ((($130)) + 4|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $132 & 1;
     $134 = ($133|0)!=(0);
     if ($134) {
      label = 20;
      break L21;
     }
     $135 = $0;
     $136 = ((($135)) + 556|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $0;
     $139 = ((($138)) + 632|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($137>>>0)<($140>>>0);
     if ($141) {
      $142 = $0;
      $143 = $c;
      $144 = (_clause_is_toplevel_satisfied($142,$143)|0);
      $145 = ($144|0)!=(0);
      if ($145) {
       $146 = $c;
       _mark_clause_to_be_collected($146);
       $147 = $collect;
       $148 = (($147) + 1)|0;
       $collect = $148;
       $149 = $c;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = $151 >>> 1;
       $153 = $152 & 1;
       $154 = ($153|0)!=(0);
       if (!($154)) {
        break;
       }
       $155 = $c;
       $156 = HEAP32[$155>>2]|0;
       $157 = ($156>>>0)>(2);
       if (!($157)) {
        break;
       }
       $158 = $lcollect;
       $159 = (($158) + 1)|0;
       $lcollect = $159;
       break;
      }
     }
     $160 = $c;
     $161 = ((($160)) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $162 >>> 1;
     $164 = $163 & 1;
     $165 = ($164|0)!=(0);
     if ($165) {
      $166 = $c;
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167>>>0)<=(2);
      if (!($168)) {
       $169 = $0;
       $170 = ((($169)) + 376|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = $0;
       $173 = ((($172)) + 380|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($171>>>0)<($174>>>0);
       if (!($175)) {
        label = 29;
        break L21;
       }
       $176 = $c;
       $177 = $0;
       $178 = ((($177)) + 376|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ((($179)) + 4|0);
       HEAP32[$178>>2] = $180;
       HEAP32[$179>>2] = $176;
      }
     }
    }
   }
  } while(0);
  $181 = $p;
  $182 = ((($181)) + 4|0);
  $183 = $0;
  $184 = ((($183)) + 272|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ($182|0)==($185|0);
  if ($186) {
   $187 = $0;
   $188 = ((($187)) + 280|0);
   $189 = HEAP32[$188>>2]|0;
   $192 = $189;
  } else {
   $190 = $p;
   $191 = ((($190)) + 4|0);
   $192 = $191;
  }
  $p = $192;
 }
 if ((label|0) == 20) {
  ___assert_fail((1441|0),(904|0),4969,(1388|0));
  // unreachable;
 }
 else if ((label|0) == 29) {
  ___assert_fail((1453|0),(904|0),4986,(1388|0));
  // unreachable;
 }
 else if ((label|0) == 35) {
  $193 = $0;
  $194 = ((($193)) + 376|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $0;
  $197 = ((($196)) + 380|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ($195>>>0)<=($198>>>0);
  if (!($199)) {
   ___assert_fail((1473|0),(904|0),4989,(1388|0));
   // unreachable;
  }
  $200 = $0;
  $201 = ((($200)) + 632|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $0;
  $204 = ((($203)) + 556|0);
  HEAP32[$204>>2] = $202;
  $205 = $0;
  $206 = ((($205)) + 376|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $0;
  $209 = ((($208)) + 372|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $207;
  $212 = $210;
  $213 = (($211) - ($212))|0;
  $214 = (($213|0) / 4)&-1;
  $redcount = $214;
  $215 = $0;
  $216 = ((($215)) + 372|0);
  $217 = HEAP32[$216>>2]|0;
  $aa = $217;
  $218 = $redcount;
  $nn = $218;
  $l = 0;
  $219 = $nn;
  $220 = (($219) - 1)|0;
  $r = $220;
  $221 = $0;
  $222 = ((($221)) + 764|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $0;
  $225 = ((($224)) + 760|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ($223|0)==($226|0);
  if (!($227)) {
   ___assert_fail((1494|0),(904|0),4994,(1388|0));
   // unreachable;
  }
  $228 = $r;
  $229 = $l;
  $230 = (($228) - ($229))|0;
  $231 = ($230|0)<=(10);
  L50: do {
   if (!($231)) {
    while(1) {
     $232 = $l;
     $233 = $r;
     $234 = (($232) + ($233))|0;
     $235 = (($234|0) / 2)&-1;
     $m = $235;
     $236 = $aa;
     $237 = $r;
     $238 = (($236) + ($237<<2)|0);
     $239 = ((($238)) + -4|0);
     $240 = HEAP32[$239>>2]|0;
     $tmp = $240;
     $241 = $aa;
     $242 = $m;
     $243 = (($241) + ($242<<2)|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = $aa;
     $246 = $r;
     $247 = (($245) + ($246<<2)|0);
     $248 = ((($247)) + -4|0);
     HEAP32[$248>>2] = $244;
     $249 = $tmp;
     $250 = $aa;
     $251 = $m;
     $252 = (($250) + ($251<<2)|0);
     HEAP32[$252>>2] = $249;
     $253 = $0;
     $254 = $aa;
     $255 = $l;
     $256 = (($254) + ($255<<2)|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $aa;
     $259 = $r;
     $260 = (($258) + ($259<<2)|0);
     $261 = ((($260)) + -4|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = (_cmp_glue_activity_size($253,$257,$262)|0);
     $264 = ($263|0)>(0);
     if ($264) {
      $265 = $aa;
      $266 = $r;
      $267 = (($265) + ($266<<2)|0);
      $268 = ((($267)) + -4|0);
      $269 = HEAP32[$268>>2]|0;
      $tmp1 = $269;
      $270 = $aa;
      $271 = $l;
      $272 = (($270) + ($271<<2)|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = $aa;
      $275 = $r;
      $276 = (($274) + ($275<<2)|0);
      $277 = ((($276)) + -4|0);
      HEAP32[$277>>2] = $273;
      $278 = $tmp1;
      $279 = $aa;
      $280 = $l;
      $281 = (($279) + ($280<<2)|0);
      HEAP32[$281>>2] = $278;
     }
     $282 = $0;
     $283 = $aa;
     $284 = $l;
     $285 = (($283) + ($284<<2)|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = $aa;
     $288 = $r;
     $289 = (($287) + ($288<<2)|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = (_cmp_glue_activity_size($282,$286,$290)|0);
     $292 = ($291|0)>(0);
     if ($292) {
      $293 = $aa;
      $294 = $r;
      $295 = (($293) + ($294<<2)|0);
      $296 = HEAP32[$295>>2]|0;
      $tmp2 = $296;
      $297 = $aa;
      $298 = $l;
      $299 = (($297) + ($298<<2)|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = $aa;
      $302 = $r;
      $303 = (($301) + ($302<<2)|0);
      HEAP32[$303>>2] = $300;
      $304 = $tmp2;
      $305 = $aa;
      $306 = $l;
      $307 = (($305) + ($306<<2)|0);
      HEAP32[$307>>2] = $304;
     }
     $308 = $0;
     $309 = $aa;
     $310 = $r;
     $311 = (($309) + ($310<<2)|0);
     $312 = ((($311)) + -4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $aa;
     $315 = $r;
     $316 = (($314) + ($315<<2)|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = (_cmp_glue_activity_size($308,$313,$317)|0);
     $319 = ($318|0)>(0);
     if ($319) {
      $320 = $aa;
      $321 = $r;
      $322 = (($320) + ($321<<2)|0);
      $323 = HEAP32[$322>>2]|0;
      $tmp3 = $323;
      $324 = $aa;
      $325 = $r;
      $326 = (($324) + ($325<<2)|0);
      $327 = ((($326)) + -4|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = $aa;
      $330 = $r;
      $331 = (($329) + ($330<<2)|0);
      HEAP32[$331>>2] = $328;
      $332 = $tmp3;
      $333 = $aa;
      $334 = $r;
      $335 = (($333) + ($334<<2)|0);
      $336 = ((($335)) + -4|0);
      HEAP32[$336>>2] = $332;
     }
     $337 = $l;
     $338 = (($337) + 1)|0;
     $339 = (($338) - 1)|0;
     $i = $339;
     $340 = $r;
     $341 = (($340) - 1)|0;
     $j = $341;
     $342 = $j;
     $343 = $aa;
     $344 = (($343) + ($342<<2)|0);
     $345 = HEAP32[$344>>2]|0;
     $pivot = $345;
     while(1) {
      $346 = $0;
      $347 = $i;
      $348 = (($347) + 1)|0;
      $i = $348;
      $349 = $aa;
      $350 = (($349) + ($348<<2)|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = $pivot;
      $353 = (_cmp_glue_activity_size($346,$351,$352)|0);
      $354 = ($353|0)<(0);
      if ($354) {
       continue;
      }
      while(1) {
       $355 = $0;
       $356 = $pivot;
       $357 = $j;
       $358 = (($357) + -1)|0;
       $j = $358;
       $359 = $aa;
       $360 = (($359) + ($358<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = (_cmp_glue_activity_size($355,$356,$361)|0);
       $363 = ($362|0)<(0);
       if (!($363)) {
        break;
       }
       $364 = $j;
       $365 = $l;
       $366 = (($365) + 1)|0;
       $367 = ($364|0)==($366|0);
       if ($367) {
        break;
       }
      }
      $368 = $i;
      $369 = $j;
      $370 = ($368|0)>=($369|0);
      $371 = $aa;
      if ($370) {
       break;
      }
      $372 = $j;
      $373 = (($371) + ($372<<2)|0);
      $374 = HEAP32[$373>>2]|0;
      $tmp4 = $374;
      $375 = $aa;
      $376 = $i;
      $377 = (($375) + ($376<<2)|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = $aa;
      $380 = $j;
      $381 = (($379) + ($380<<2)|0);
      HEAP32[$381>>2] = $378;
      $382 = $tmp4;
      $383 = $aa;
      $384 = $i;
      $385 = (($383) + ($384<<2)|0);
      HEAP32[$385>>2] = $382;
     }
     $386 = $r;
     $387 = (($386) - 1)|0;
     $388 = (($371) + ($387<<2)|0);
     $389 = HEAP32[$388>>2]|0;
     $tmp5 = $389;
     $390 = $aa;
     $391 = $i;
     $392 = (($390) + ($391<<2)|0);
     $393 = HEAP32[$392>>2]|0;
     $394 = $aa;
     $395 = $r;
     $396 = (($395) - 1)|0;
     $397 = (($394) + ($396<<2)|0);
     HEAP32[$397>>2] = $393;
     $398 = $tmp5;
     $399 = $aa;
     $400 = $i;
     $401 = (($399) + ($400<<2)|0);
     HEAP32[$401>>2] = $398;
     $402 = $i;
     $403 = $l;
     $404 = (($402) - ($403))|0;
     $405 = $r;
     $406 = $i;
     $407 = (($405) - ($406))|0;
     $408 = ($404|0)<($407|0);
     if ($408) {
      $409 = $i;
      $410 = (($409) + 1)|0;
      $ll = $410;
      $411 = $r;
      $rr = $411;
      $412 = $i;
      $413 = (($412) - 1)|0;
      $r = $413;
     } else {
      $414 = $l;
      $ll = $414;
      $415 = $i;
      $416 = (($415) - 1)|0;
      $rr = $416;
      $417 = $i;
      $418 = (($417) + 1)|0;
      $l = $418;
     }
     $419 = $r;
     $420 = $l;
     $421 = (($419) - ($420))|0;
     $422 = ($421|0)>(10);
     $423 = $rr;
     $424 = $ll;
     $425 = (($423) - ($424))|0;
     $426 = ($425|0)>(10);
     if (!($422)) {
      if ($426) {
       $569 = $ll;
       $l = $569;
       $570 = $rr;
       $r = $570;
       continue;
      }
      $571 = $0;
      $572 = ((($571)) + 764|0);
      $573 = HEAP32[$572>>2]|0;
      $574 = $0;
      $575 = ((($574)) + 760|0);
      $576 = HEAP32[$575>>2]|0;
      $577 = ($573>>>0)>($576>>>0);
      if (!($577)) {
       break L50;
      }
      $578 = $0;
      $579 = ((($578)) + 764|0);
      $580 = HEAP32[$579>>2]|0;
      $581 = ((($580)) + -4|0);
      HEAP32[$579>>2] = $581;
      $582 = HEAP32[$581>>2]|0;
      $r = $582;
      $583 = $0;
      $584 = ((($583)) + 764|0);
      $585 = HEAP32[$584>>2]|0;
      $586 = ((($585)) + -4|0);
      HEAP32[$584>>2] = $586;
      $587 = HEAP32[$586>>2]|0;
      $l = $587;
      continue;
     }
     if (!($426)) {
      label = 57;
      break;
     }
     $427 = $0;
     $428 = ((($427)) + 764|0);
     $429 = HEAP32[$428>>2]|0;
     $430 = $0;
     $431 = ((($430)) + 768|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = ($429|0)==($432|0);
     if ($433) {
      $434 = $0;
      $435 = ((($434)) + 768|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = $0;
      $438 = ((($437)) + 760|0);
      $439 = HEAP32[$438>>2]|0;
      $440 = $436;
      $441 = $439;
      $442 = (($440) - ($441))|0;
      $443 = (($442|0) / 4)&-1;
      $old_num6 = $443;
      $444 = $old_num6;
      $445 = ($444|0)!=(0);
      $446 = $old_num6;
      $447 = $446<<1;
      $448 = $445 ? $447 : 1;
      $new_num7 = $448;
      $449 = $0;
      $450 = ((($449)) + 764|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = $0;
      $453 = ((($452)) + 760|0);
      $454 = HEAP32[$453>>2]|0;
      $455 = $451;
      $456 = $454;
      $457 = (($455) - ($456))|0;
      $458 = (($457|0) / 4)&-1;
      $count8 = $458;
      $459 = $0;
      $460 = ((($459)) + 760|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $0;
      $463 = ((($462)) + 768|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = ($461>>>0)<=($464>>>0);
      if (!($465)) {
       label = 60;
       break;
      }
      $466 = $old_num6;
      $467 = $466<<2;
      $old_size9 = $467;
      $468 = $new_num7;
      $469 = $468<<2;
      $new_size10 = $469;
      $470 = $0;
      $471 = $0;
      $472 = ((($471)) + 760|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = $old_size9;
      $475 = $new_size10;
      $476 = (_resize($470,$473,$474,$475)|0);
      $477 = $0;
      $478 = ((($477)) + 760|0);
      HEAP32[$478>>2] = $476;
      $479 = $0;
      $480 = ((($479)) + 760|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = $count8;
      $483 = (($481) + ($482<<2)|0);
      $484 = $0;
      $485 = ((($484)) + 764|0);
      HEAP32[$485>>2] = $483;
      $486 = $0;
      $487 = ((($486)) + 760|0);
      $488 = HEAP32[$487>>2]|0;
      $489 = $new_num7;
      $490 = (($488) + ($489<<2)|0);
      $491 = $0;
      $492 = ((($491)) + 768|0);
      HEAP32[$492>>2] = $490;
     }
     $493 = $ll;
     $494 = $0;
     $495 = ((($494)) + 764|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = ((($496)) + 4|0);
     HEAP32[$495>>2] = $497;
     HEAP32[$496>>2] = $493;
     $498 = $0;
     $499 = ((($498)) + 764|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = $0;
     $502 = ((($501)) + 768|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = ($500|0)==($503|0);
     if ($504) {
      $505 = $0;
      $506 = ((($505)) + 768|0);
      $507 = HEAP32[$506>>2]|0;
      $508 = $0;
      $509 = ((($508)) + 760|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = $507;
      $512 = $510;
      $513 = (($511) - ($512))|0;
      $514 = (($513|0) / 4)&-1;
      $old_num11 = $514;
      $515 = $old_num11;
      $516 = ($515|0)!=(0);
      $517 = $old_num11;
      $518 = $517<<1;
      $519 = $516 ? $518 : 1;
      $new_num12 = $519;
      $520 = $0;
      $521 = ((($520)) + 764|0);
      $522 = HEAP32[$521>>2]|0;
      $523 = $0;
      $524 = ((($523)) + 760|0);
      $525 = HEAP32[$524>>2]|0;
      $526 = $522;
      $527 = $525;
      $528 = (($526) - ($527))|0;
      $529 = (($528|0) / 4)&-1;
      $count13 = $529;
      $530 = $0;
      $531 = ((($530)) + 760|0);
      $532 = HEAP32[$531>>2]|0;
      $533 = $0;
      $534 = ((($533)) + 768|0);
      $535 = HEAP32[$534>>2]|0;
      $536 = ($532>>>0)<=($535>>>0);
      if (!($536)) {
       label = 64;
       break;
      }
      $537 = $old_num11;
      $538 = $537<<2;
      $old_size14 = $538;
      $539 = $new_num12;
      $540 = $539<<2;
      $new_size15 = $540;
      $541 = $0;
      $542 = $0;
      $543 = ((($542)) + 760|0);
      $544 = HEAP32[$543>>2]|0;
      $545 = $old_size14;
      $546 = $new_size15;
      $547 = (_resize($541,$544,$545,$546)|0);
      $548 = $0;
      $549 = ((($548)) + 760|0);
      HEAP32[$549>>2] = $547;
      $550 = $0;
      $551 = ((($550)) + 760|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = $count13;
      $554 = (($552) + ($553<<2)|0);
      $555 = $0;
      $556 = ((($555)) + 764|0);
      HEAP32[$556>>2] = $554;
      $557 = $0;
      $558 = ((($557)) + 760|0);
      $559 = HEAP32[$558>>2]|0;
      $560 = $new_num12;
      $561 = (($559) + ($560<<2)|0);
      $562 = $0;
      $563 = ((($562)) + 768|0);
      HEAP32[$563>>2] = $561;
     }
     $564 = $rr;
     $565 = $0;
     $566 = ((($565)) + 764|0);
     $567 = HEAP32[$566>>2]|0;
     $568 = ((($567)) + 4|0);
     HEAP32[$566>>2] = $568;
     HEAP32[$567>>2] = $564;
    }
    if ((label|0) == 57) {
     ___assert_fail((1519|0),(904|0),4994,(1388|0));
     // unreachable;
    }
    else if ((label|0) == 60) {
     ___assert_fail((1550|0),(904|0),4994,(1388|0));
     // unreachable;
    }
    else if ((label|0) == 64) {
     ___assert_fail((1550|0),(904|0),4994,(1388|0));
     // unreachable;
    }
   }
  } while(0);
  $l17 = 0;
  $588 = $nn;
  $589 = (($588) - 1)|0;
  $r18 = $589;
  $590 = $r18;
  $i19 = $590;
  while(1) {
   $591 = $i19;
   $592 = $l17;
   $593 = ($591|0)>($592|0);
   if (!($593)) {
    break;
   }
   $594 = $0;
   $595 = $aa;
   $596 = $i19;
   $597 = (($595) + ($596<<2)|0);
   $598 = ((($597)) + -4|0);
   $599 = HEAP32[$598>>2]|0;
   $600 = $aa;
   $601 = $i19;
   $602 = (($600) + ($601<<2)|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = (_cmp_glue_activity_size($594,$599,$603)|0);
   $605 = ($604|0)>(0);
   if ($605) {
    $606 = $aa;
    $607 = $i19;
    $608 = (($606) + ($607<<2)|0);
    $609 = HEAP32[$608>>2]|0;
    $tmp21 = $609;
    $610 = $aa;
    $611 = $i19;
    $612 = (($610) + ($611<<2)|0);
    $613 = ((($612)) + -4|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = $aa;
    $616 = $i19;
    $617 = (($615) + ($616<<2)|0);
    HEAP32[$617>>2] = $614;
    $618 = $tmp21;
    $619 = $aa;
    $620 = $i19;
    $621 = (($619) + ($620<<2)|0);
    $622 = ((($621)) + -4|0);
    HEAP32[$622>>2] = $618;
   }
   $623 = $i19;
   $624 = (($623) + -1)|0;
   $i19 = $624;
  }
  $625 = $l17;
  $626 = (($625) + 2)|0;
  $i19 = $626;
  while(1) {
   $627 = $i19;
   $628 = $r18;
   $629 = ($627|0)<=($628|0);
   if (!($629)) {
    break;
   }
   $630 = $i19;
   $j20 = $630;
   $631 = $i19;
   $632 = $aa;
   $633 = (($632) + ($631<<2)|0);
   $634 = HEAP32[$633>>2]|0;
   $pivot16 = $634;
   while(1) {
    $635 = $0;
    $636 = $pivot16;
    $637 = $j20;
    $638 = (($637) - 1)|0;
    $639 = $aa;
    $640 = (($639) + ($638<<2)|0);
    $641 = HEAP32[$640>>2]|0;
    $642 = (_cmp_glue_activity_size($635,$636,$641)|0);
    $643 = ($642|0)<(0);
    if (!($643)) {
     break;
    }
    $644 = $j20;
    $645 = (($644) - 1)|0;
    $646 = $aa;
    $647 = (($646) + ($645<<2)|0);
    $648 = HEAP32[$647>>2]|0;
    $649 = $j20;
    $650 = $aa;
    $651 = (($650) + ($649<<2)|0);
    HEAP32[$651>>2] = $648;
    $652 = $j20;
    $653 = (($652) + -1)|0;
    $j20 = $653;
   }
   $654 = $pivot16;
   $655 = $j20;
   $656 = $aa;
   $657 = (($656) + ($655<<2)|0);
   HEAP32[$657>>2] = $654;
   $658 = $i19;
   $659 = (($658) + 1)|0;
   $i19 = $659;
  }
  $660 = $0;
  $661 = ((($660)) + 764|0);
  $662 = HEAP32[$661>>2]|0;
  $663 = $0;
  $664 = ((($663)) + 760|0);
  $665 = HEAP32[$664>>2]|0;
  $666 = ($662|0)==($665|0);
  if (!($666)) {
   ___assert_fail((1494|0),(904|0),4994,(1388|0));
   // unreachable;
  }
  $i22 = 0;
  while(1) {
   $667 = $i22;
   $668 = $nn;
   $669 = (($668) - 1)|0;
   $670 = ($667|0)<($669|0);
   $671 = $0;
   if (!($670)) {
    break;
   }
   $672 = $i22;
   $673 = $aa;
   $674 = (($673) + ($672<<2)|0);
   $675 = HEAP32[$674>>2]|0;
   $676 = $i22;
   $677 = (($676) + 1)|0;
   $678 = $aa;
   $679 = (($678) + ($677<<2)|0);
   $680 = HEAP32[$679>>2]|0;
   $681 = (_cmp_glue_activity_size($671,$675,$680)|0);
   $682 = ($681|0)<=(0);
   if (!($682)) {
    label = 87;
    break;
   }
   $683 = $i22;
   $684 = (($683) + 1)|0;
   $i22 = $684;
  }
  if ((label|0) == 87) {
   ___assert_fail((1577|0),(904|0),4994,(1388|0));
   // unreachable;
  }
  $685 = ((($671)) + 692|0);
  $686 = HEAP32[$685>>2]|0;
  $687 = $lcollect;
  $688 = ($686>>>0)>=($687>>>0);
  if (!($688)) {
   ___assert_fail((1633|0),(904|0),4996,(1388|0));
   // unreachable;
  }
  $689 = $0;
  $690 = ((($689)) + 692|0);
  $691 = HEAP32[$690>>2]|0;
  $692 = $lcollect;
  $693 = (($691) - ($692))|0;
  $694 = (($693) + 1)|0;
  $target = $694;
  $695 = $1;
  $696 = $target;
  $697 = Math_imul($695, $696)|0;
  $698 = (($697) + 99)|0;
  $699 = (($698>>>0) / 100)&-1;
  $target = $699;
  $700 = $target;
  $701 = $redcount;
  $702 = ($700>>>0)>=($701>>>0);
  if ($702) {
   $703 = $redcount;
   $target = $703;
  }
  $704 = $0;
  $705 = ((($704)) + 372|0);
  $706 = HEAP32[$705>>2]|0;
  $707 = $target;
  $708 = (($706) + ($707<<2)|0);
  $709 = $0;
  $710 = ((($709)) + 376|0);
  HEAP32[$710>>2] = $708;
  while(1) {
   $711 = $0;
   $712 = ((($711)) + 376|0);
   $713 = HEAP32[$712>>2]|0;
   $714 = $0;
   $715 = ((($714)) + 372|0);
   $716 = HEAP32[$715>>2]|0;
   $717 = ($713>>>0)>($716>>>0);
   if (!($717)) {
    break;
   }
   $718 = $0;
   $719 = ((($718)) + 376|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = ((($720)) + -4|0);
   HEAP32[$719>>2] = $721;
   $722 = HEAP32[$721>>2]|0;
   $c = $722;
   $723 = $c;
   _mark_clause_to_be_collected($723);
   $724 = $collect;
   $725 = (($724) + 1)|0;
   $collect = $725;
   $726 = $c;
   $727 = ((($726)) + 4|0);
   $728 = HEAP32[$727>>2]|0;
   $729 = $728 >>> 1;
   $730 = $729 & 1;
   $731 = ($730|0)!=(0);
   if (!($731)) {
    continue;
   }
   $732 = $c;
   $733 = HEAP32[$732>>2]|0;
   $734 = ($733>>>0)>(2);
   if (!($734)) {
    continue;
   }
   $735 = $lcollect;
   $736 = (($735) + 1)|0;
   $lcollect = $736;
  }
  $737 = $collect;
  $738 = ($737|0)!=(0);
  if ($738) {
   $739 = $0;
   $740 = ((($739)) + 564|0);
   $741 = HEAP32[$740>>2]|0;
   $742 = (($741) + 1)|0;
   HEAP32[$740>>2] = $742;
   $743 = $0;
   (_collect_clauses($743)|0);
   $744 = $0;
   _report($744,2,45);
  }
  $745 = $lcollect;
  $746 = ($745|0)!=(0);
  if (!($746)) {
   $747 = $0;
   _inc_lreduce($747);
  }
  $748 = $0;
  $749 = ((($748)) + 376|0);
  $750 = HEAP32[$749>>2]|0;
  $751 = $0;
  $752 = ((($751)) + 372|0);
  $753 = HEAP32[$752>>2]|0;
  $754 = ($750|0)==($753|0);
  if ($754) {
   STACKTOP = sp;return;
  } else {
   ___assert_fail((1362|0),(904|0),5029,(1388|0));
   // unreachable;
  }
 }
}
function _hup($ps,$v) {
 $ps = $ps|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $u = 0, $upos = 0, $vpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 664|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  ___assert_fail((1284|0),(904|0),1635,(1301|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1073741823;
 $vpos = $9;
 $10 = $vpos;
 $11 = (0)<($10|0);
 if (!($11)) {
  ___assert_fail((1305|0),(904|0),1640,(1301|0));
  // unreachable;
 }
 $12 = $vpos;
 $13 = $0;
 $14 = ((($13)) + 260|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = ((($16)) + 256|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $15;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = (($21|0) / 4)&-1;
 $23 = ($12|0)<($22|0);
 if (!($23)) {
  ___assert_fail((1314|0),(904|0),1641,(1301|0));
  // unreachable;
 }
 $24 = $vpos;
 $25 = $0;
 $26 = ((($25)) + 256|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = ($29|0)==($30|0);
 if (!($31)) {
  ___assert_fail((1342|0),(904|0),1642,(1301|0));
  // unreachable;
 }
 while(1) {
  $32 = $vpos;
  $33 = ($32|0)>(1);
  if (!($33)) {
   label = 13;
   break;
  }
  $34 = $vpos;
  $35 = (($34|0) / 2)&-1;
  $upos = $35;
  $36 = $upos;
  $37 = $0;
  $38 = ((($37)) + 256|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $u = $41;
  $42 = $u;
  $43 = $1;
  $44 = (_cmp_rnk($42,$43)|0);
  $45 = ($44|0)>(0);
  if ($45) {
   label = 13;
   break;
  }
  $46 = $u;
  $47 = $vpos;
  $48 = $0;
  $49 = ((($48)) + 256|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<2)|0);
  HEAP32[$51>>2] = $46;
  $52 = $vpos;
  $53 = $u;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $52 & 1073741823;
  $57 = $55 & -1073741824;
  $58 = $57 | $56;
  HEAP32[$54>>2] = $58;
  $59 = $upos;
  $vpos = $59;
 }
 if ((label|0) == 13) {
  $60 = $1;
  $61 = $vpos;
  $62 = $0;
  $63 = ((($62)) + 256|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($61<<2)|0);
  HEAP32[$65>>2] = $60;
  $66 = $vpos;
  $67 = $1;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $66 & 1073741823;
  $71 = $69 & -1073741824;
  $72 = $71 | $70;
  HEAP32[$68>>2] = $72;
  STACKTOP = sp;return;
 }
}
function _hdown($ps,$r) {
 $ps = $ps|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $child = 0, $cpos = 0, $end = 0, $opos = 0, $other = 0, $rpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $r;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1073741823;
 $6 = ($5|0)>(0);
 if (!($6)) {
  ___assert_fail((1245|0),(904|0),2464,(1256|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1073741823;
 $11 = $0;
 $12 = ((($11)) + 256|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ($15|0)==($16|0);
 if (!($17)) {
  ___assert_fail((1262|0),(904|0),2465,(1256|0));
  // unreachable;
 }
 $18 = $0;
 $19 = ((($18)) + 260|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = ((($21)) + 256|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $20;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 $27 = (($26|0) / 4)&-1;
 $end = $27;
 $28 = $1;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 1073741823;
 $rpos = $31;
 while(1) {
  $32 = $rpos;
  $33 = $32<<1;
  $cpos = $33;
  $34 = $cpos;
  $35 = $end;
  $36 = ($34>>>0)>=($35>>>0);
  if ($36) {
   break;
  }
  $37 = $cpos;
  $38 = (($37) + 1)|0;
  $opos = $38;
  $39 = $cpos;
  $40 = $0;
  $41 = ((($40)) + 256|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $child = $44;
  $45 = $1;
  $46 = $child;
  $47 = (_cmp_rnk($45,$46)|0);
  $48 = ($47|0)<(0);
  $49 = $opos;
  $50 = $end;
  $51 = ($49>>>0)<($50>>>0);
  if ($48) {
   if ($51) {
    $52 = $opos;
    $53 = $0;
    $54 = ((($53)) + 256|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + ($52<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $other = $57;
    $58 = $child;
    $59 = $other;
    $60 = (_cmp_rnk($58,$59)|0);
    $61 = ($60|0)<(0);
    if ($61) {
     $62 = $other;
     $child = $62;
     $63 = $opos;
     $cpos = $63;
    }
   }
  } else {
   if (!($51)) {
    break;
   }
   $64 = $opos;
   $65 = $0;
   $66 = ((($65)) + 256|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($64<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $child = $69;
   $70 = $1;
   $71 = $child;
   $72 = (_cmp_rnk($70,$71)|0);
   $73 = ($72|0)>=(0);
   if ($73) {
    break;
   }
   $74 = $opos;
   $cpos = $74;
  }
  $75 = $child;
  $76 = $rpos;
  $77 = $0;
  $78 = ((($77)) + 256|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + ($76<<2)|0);
  HEAP32[$80>>2] = $75;
  $81 = $rpos;
  $82 = $child;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $81 & 1073741823;
  $86 = $84 & -1073741824;
  $87 = $86 | $85;
  HEAP32[$83>>2] = $87;
  $88 = $cpos;
  $rpos = $88;
 }
 $89 = $rpos;
 $90 = $1;
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $89 & 1073741823;
 $94 = $92 & -1073741824;
 $95 = $94 | $93;
 HEAP32[$91>>2] = $95;
 $96 = $1;
 $97 = $rpos;
 $98 = $0;
 $99 = ((($98)) + 256|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($97<<2)|0);
 HEAP32[$101>>2] = $96;
 STACKTOP = sp;return;
}
function _cmp_rnk($r,$s) {
 $r = $r|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $r;
 $2 = $s;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 30;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  label = 4;
 } else {
  $9 = $2;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 30;
  $13 = $12 & 1;
  $14 = ($13|0)!=(0);
  if ($14) {
   $0 = -1;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $15 = $1;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 >>> 30;
   $19 = $18 & 1;
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = $2;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 >>> 30;
    $25 = $24 & 1;
    $26 = ($25|0)!=(0);
    if (!($26)) {
     $0 = 1;
     break;
    }
   }
   $27 = $1;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 >>> 31;
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $32 = $2;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 >>> 31;
    $36 = ($35|0)!=(0);
    if ($36) {
     $0 = 1;
     break;
    }
   }
   $37 = $1;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 >>> 31;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $2;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 >>> 31;
    $46 = ($45|0)!=(0);
    if (!($46)) {
     $0 = -1;
     break;
    }
   }
   $47 = $1;
   $48 = HEAP32[$47>>2]|0;
   $49 = $2;
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48>>>0)<($50>>>0);
   if ($51) {
    $0 = -1;
    break;
   }
   $52 = $1;
   $53 = HEAP32[$52>>2]|0;
   $54 = $2;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($53>>>0)>($55>>>0);
   if ($56) {
    $0 = 1;
    break;
   } else {
    $57 = $1;
    $58 = $2;
    $59 = (_cmp_ptr(0,$57,$58)|0);
    $60 = (0 - ($59))|0;
    $0 = $60;
    break;
   }
  }
 } while(0);
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function _cmp_ptr($ps,$l,$k) {
 $ps = $ps|0;
 $l = $l|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $l;
 $2 = $k;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 STACKTOP = sp;return ($7|0);
}
function _clause_is_toplevel_satisfied($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eol = 0, $lit = 0, $p = 0, $v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $c;
 $3 = $2;
 $4 = (_end_of_lits($3)|0);
 $eol = $4;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $p = $6;
 while(1) {
  $7 = $p;
  $8 = $eol;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 7;
   break;
  }
  $10 = $p;
  $11 = HEAP32[$10>>2]|0;
  $lit = $11;
  $12 = $lit;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(1);
  if ($15) {
   $16 = $1;
   $17 = ((($16)) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $lit;
   $20 = $1;
   $21 = ((($20)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $19;
   $24 = $22;
   $25 = (($23) - ($24))|0;
   $26 = (($25|0) / 2)&-1;
   $27 = (($18) + (($26*12)|0)|0);
   $v = $27;
   $28 = $v;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0);
   if (!($31)) {
    label = 5;
    break;
   }
  }
  $32 = $p;
  $33 = ((($32)) + 4|0);
  $p = $33;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _mark_clause_to_be_collected($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if ($5) {
  ___assert_fail((1441|0),(904|0),2755,(1952|0));
  // unreachable;
 } else {
  $6 = $0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & -2;
  $10 = $9 | 1;
  HEAP32[$7>>2] = $10;
  STACKTOP = sp;return;
 }
}
function _cmp_glue_activity_size($ps,$c,$d) {
 $ps = $ps|0;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $a = 0, $b = 0, $p = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $c;
 $3 = $d;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >>> 1;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  ___assert_fail((1853|0),(904|0),4907,(1864|0));
  // unreachable;
 }
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 1;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  ___assert_fail((1887|0),(904|0),4908,(1864|0));
  // unreachable;
 }
 $16 = $2;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 5;
 $20 = $19 & 33554431;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 5;
 $25 = $24 & 33554431;
 $26 = ($20|0)<($25|0);
 if ($26) {
  $0 = 1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $27 = $2;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 5;
 $31 = $30 & 33554431;
 $32 = $3;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 >>> 5;
 $36 = $35 & 33554431;
 $37 = ($31|0)>($36|0);
 if ($37) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $38 = $2;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 >>> 1;
 $42 = $41 & 1;
 $43 = ($42|0)!=(0);
 if (!($43)) {
  ___assert_fail((1898|0),(904|0),4916,(1864|0));
  // unreachable;
 }
 $44 = $2;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45>>>0)>(2);
 if (!($46)) {
  ___assert_fail((1911|0),(904|0),4916,(1864|0));
  // unreachable;
 }
 $47 = $2;
 $48 = ((($47)) + 16|0);
 $49 = $2;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + ($50<<2)|0);
 $p = $51;
 $52 = $3;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 >>> 1;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  ___assert_fail((1925|0),(904|0),4917,(1864|0));
  // unreachable;
 }
 $58 = $3;
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59>>>0)>(2);
 if (!($60)) {
  ___assert_fail((1938|0),(904|0),4917,(1864|0));
  // unreachable;
 }
 $61 = $3;
 $62 = ((($61)) + 16|0);
 $63 = $3;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + ($64<<2)|0);
 $q = $65;
 $66 = $p;
 $67 = HEAP32[$66>>2]|0;
 $a = $67;
 $68 = $q;
 $69 = HEAP32[$68>>2]|0;
 $b = $69;
 $70 = $a;
 $71 = $b;
 $72 = ($70>>>0)<($71>>>0);
 if ($72) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $73 = $b;
 $74 = $a;
 $75 = ($73>>>0)<($74>>>0);
 if ($75) {
  $0 = 1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $76 = $2;
 $77 = HEAP32[$76>>2]|0;
 $78 = $3;
 $79 = HEAP32[$78>>2]|0;
 $80 = ($77>>>0)<($79>>>0);
 if ($80) {
  $0 = 1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $81 = $2;
 $82 = HEAP32[$81>>2]|0;
 $83 = $3;
 $84 = HEAP32[$83>>2]|0;
 $85 = ($82>>>0)>($84>>>0);
 if ($85) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 } else {
  $0 = 0;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function _collect_clauses($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $eol = 0, $i = 0, $lit = 0, $lstk = 0, $next = 0, $other = 0, $other1 = 0, $p = 0, $q = 0;
 var $r = 0, $res = 0, $s = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 456|0);
 $3 = HEAP32[$2>>2]|0;
 $res = $3;
 $4 = $0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<1;
 $11 = (($6) + ($10)|0);
 $12 = ((($11)) + 1|0);
 $eol = $12;
 $13 = $0;
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 2|0);
 $lit = $16;
 while(1) {
  $17 = $lit;
  $18 = $eol;
  $19 = ($17>>>0)<=($18>>>0);
  if (!($19)) {
   break;
  }
  $i = 0;
  while(1) {
   $20 = $i;
   $21 = ($20|0)<=(1);
   if (!($21)) {
    break;
   }
   $22 = $i;
   $23 = ($22|0)!=(0);
   $24 = $0;
   L7: do {
    if ($23) {
     $25 = ((($24)) + 64|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $lit;
     $28 = $0;
     $29 = ((($28)) + 40|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $27;
     $32 = $30;
     $33 = (($31) - ($32))|0;
     $34 = (($26) + ($33<<3)|0);
     $lstk = $34;
     $35 = $lstk;
     $36 = HEAP32[$35>>2]|0;
     $r = $36;
     $37 = $lit;
     $38 = HEAP8[$37>>0]|0;
     $39 = $38 << 24 >> 24;
     $40 = ($39|0)!=(1);
     if ($40) {
      label = 8;
     } else {
      $41 = $0;
      $42 = ((($41)) + 44|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $lit;
      $45 = $0;
      $46 = ((($45)) + 40|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $44;
      $49 = $47;
      $50 = (($48) - ($49))|0;
      $51 = (($50|0) / 2)&-1;
      $52 = (($43) + (($51*12)|0)|0);
      $53 = ((($52)) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)!=(0);
      if ($55) {
       label = 8;
      }
     }
     L11: do {
      if ((label|0) == 8) {
       label = 0;
       $56 = $r;
       $s = $56;
       while(1) {
        $57 = $s;
        $58 = $lstk;
        $59 = HEAP32[$58>>2]|0;
        $60 = $lstk;
        $61 = ((($60)) + 4|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = $62 & 134217727;
        $64 = (($59) + ($63<<2)|0);
        $65 = ($57>>>0)<($64>>>0);
        if (!($65)) {
         break L11;
        }
        $66 = $s;
        $67 = HEAP32[$66>>2]|0;
        $other = $67;
        $68 = $0;
        $69 = ((($68)) + 44|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = $other;
        $72 = $0;
        $73 = ((($72)) + 40|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = $71;
        $76 = $74;
        $77 = (($75) - ($76))|0;
        $78 = (($77|0) / 2)&-1;
        $79 = (($70) + (($78*12)|0)|0);
        $v = $79;
        $80 = $v;
        $81 = ((($80)) + 4|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($82|0)!=(0);
        if ($83) {
         label = 12;
        } else {
         $84 = $other;
         $85 = HEAP8[$84>>0]|0;
         $86 = $85 << 24 >> 24;
         $87 = ($86|0)!=(1);
         if ($87) {
          label = 12;
         }
        }
        if ((label|0) == 12) {
         label = 0;
         $88 = $other;
         $89 = $r;
         $90 = ((($89)) + 4|0);
         $r = $90;
         HEAP32[$89>>2] = $88;
        }
        $91 = $s;
        $92 = ((($91)) + 4|0);
        $s = $92;
       }
      }
     } while(0);
     $93 = $r;
     $94 = $lstk;
     $95 = HEAP32[$94>>2]|0;
     $96 = $93;
     $97 = $95;
     $98 = (($96) - ($97))|0;
     $99 = (($98|0) / 4)&-1;
     $100 = $lstk;
     $101 = ((($100)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $99 & 134217727;
     $104 = $102 & -134217728;
     $105 = $104 | $103;
     HEAP32[$101>>2] = $105;
    } else {
     $106 = ((($24)) + 56|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $lit;
     $109 = $0;
     $110 = ((($109)) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = $108;
     $113 = $111;
     $114 = (($112) - ($113))|0;
     $115 = (($107) + ($114<<2)|0);
     $p = $115;
     $116 = $p;
     $117 = HEAP32[$116>>2]|0;
     $c = $117;
     while(1) {
      $118 = $c;
      $119 = ($118|0)!=(0|0);
      if (!($119)) {
       break L7;
      }
      $120 = $c;
      $121 = ((($120)) + 8|0);
      $q = $121;
      $122 = $c;
      $123 = ((($122)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = $lit;
      $126 = ($124|0)!=($125|0);
      if ($126) {
       $127 = $q;
       $128 = ((($127)) + 4|0);
       $q = $128;
      }
      $129 = $q;
      $130 = HEAP32[$129>>2]|0;
      $next = $130;
      $131 = $c;
      $132 = ((($131)) + 4|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = $133 & 1;
      $135 = ($134|0)!=(0);
      if ($135) {
       $136 = $next;
       $137 = $p;
       HEAP32[$137>>2] = $136;
      } else {
       $138 = $q;
       $p = $138;
      }
      $139 = $next;
      $c = $139;
     }
    }
   } while(0);
   $140 = $i;
   $141 = (($140) + 1)|0;
   $i = $141;
  }
  $142 = $lit;
  $143 = ((($142)) + 1|0);
  $lit = $143;
 }
 $144 = $0;
 $145 = ((($144)) + 40|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ((($146)) + 2|0);
 $lit = $147;
 L36: while(1) {
  $148 = $lit;
  $149 = $eol;
  $150 = ($148>>>0)<=($149>>>0);
  $151 = $0;
  if (!($150)) {
   break;
  }
  $152 = ((($151)) + 60|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $lit;
  $155 = $0;
  $156 = ((($155)) + 40|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $154;
  $159 = $157;
  $160 = (($158) - ($159))|0;
  $161 = (($153) + ($160<<2)|0);
  $p = $161;
  while(1) {
   $162 = $p;
   $163 = HEAP32[$162>>2]|0;
   $c = $163;
   $164 = ($163|0)!=(0|0);
   if (!($164)) {
    break;
   }
   $165 = $c;
   $166 = ((($165)) + 16|0);
   $167 = HEAP32[$166>>2]|0;
   $other1 = $167;
   $168 = $other1;
   $169 = $lit;
   $170 = ($168|0)==($169|0);
   $171 = $c;
   if ($170) {
    $172 = ((($171)) + 8|0);
    $173 = ((($172)) + 4|0);
    $q = $173;
   } else {
    $174 = ((($171)) + 16|0);
    $175 = ((($174)) + 4|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $lit;
    $178 = ($176|0)==($177|0);
    if (!($178)) {
     label = 32;
     break L36;
    }
    $179 = $c;
    $180 = ((($179)) + 8|0);
    $q = $180;
   }
   $181 = $c;
   $182 = ((($181)) + 4|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $183 & 1;
   $185 = ($184|0)!=(0);
   $186 = $q;
   if ($185) {
    $187 = HEAP32[$186>>2]|0;
    $188 = $p;
    HEAP32[$188>>2] = $187;
    continue;
   } else {
    $p = $186;
    continue;
   }
  }
  $189 = $lit;
  $190 = ((($189)) + 1|0);
  $lit = $190;
 }
 if ((label|0) == 32) {
  ___assert_fail((1659|0),(904|0),4250,(1677|0));
  // unreachable;
 }
 $191 = ((($151)) + 268|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = $0;
 $194 = ((($193)) + 272|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ($192|0)==($195|0);
 $197 = $0;
 if ($196) {
  $198 = ((($197)) + 280|0);
  $199 = HEAP32[$198>>2]|0;
  $202 = $199;
 } else {
  $200 = ((($197)) + 268|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $201;
 }
 $p = $202;
 while(1) {
  $203 = $p;
  $204 = $0;
  $205 = ((($204)) + 284|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ($203|0)!=($206|0);
  if (!($207)) {
   break;
  }
  $208 = $p;
  $209 = HEAP32[$208>>2]|0;
  $c = $209;
  $210 = $c;
  $211 = ($210|0)!=(0|0);
  if ($211) {
   $212 = $c;
   $213 = ((($212)) + 4|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $214 & 1;
   $216 = ($215|0)!=(0);
   if ($216) {
    $217 = $0;
    $218 = $c;
    $219 = (_collect_clause($217,$218)|0);
    $220 = ($219|0)!=(0);
    if ($220) {
     $221 = $p;
     HEAP32[$221>>2] = 0;
    }
   }
  }
  $222 = $p;
  $223 = ((($222)) + 4|0);
  $224 = $0;
  $225 = ((($224)) + 272|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ($223|0)==($226|0);
  if ($227) {
   $228 = $0;
   $229 = ((($228)) + 280|0);
   $230 = HEAP32[$229>>2]|0;
   $233 = $230;
  } else {
   $231 = $p;
   $232 = ((($231)) + 4|0);
   $233 = $232;
  }
  $p = $233;
 }
 $234 = $0;
 $235 = ((($234)) + 268|0);
 $236 = HEAP32[$235>>2]|0;
 $q = $236;
 $237 = $q;
 $p = $237;
 while(1) {
  $238 = $p;
  $239 = $0;
  $240 = ((($239)) + 272|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ($238>>>0)<($241>>>0);
  if (!($242)) {
   break;
  }
  $243 = $p;
  $244 = HEAP32[$243>>2]|0;
  $c = $244;
  $245 = ($244|0)!=(0|0);
  if ($245) {
   $246 = $c;
   $247 = $q;
   $248 = ((($247)) + 4|0);
   $q = $248;
   HEAP32[$247>>2] = $246;
  }
  $249 = $p;
  $250 = ((($249)) + 4|0);
  $p = $250;
 }
 $251 = $q;
 $252 = $0;
 $253 = ((($252)) + 272|0);
 HEAP32[$253>>2] = $251;
 $254 = $0;
 $255 = ((($254)) + 280|0);
 $256 = HEAP32[$255>>2]|0;
 $q = $256;
 $257 = $q;
 $p = $257;
 while(1) {
  $258 = $p;
  $259 = $0;
  $260 = ((($259)) + 284|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = ($258>>>0)<($261>>>0);
  if (!($262)) {
   break;
  }
  $263 = $p;
  $264 = HEAP32[$263>>2]|0;
  $c = $264;
  $265 = ($264|0)!=(0|0);
  if ($265) {
   $266 = $c;
   $267 = $q;
   $268 = ((($267)) + 4|0);
   $q = $268;
   HEAP32[$267>>2] = $266;
  }
  $269 = $p;
  $270 = ((($269)) + 4|0);
  $p = $270;
 }
 $271 = $q;
 $272 = $0;
 $273 = ((($272)) + 284|0);
 HEAP32[$273>>2] = $271;
 $274 = $0;
 $275 = ((($274)) + 456|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = $res;
 $278 = ($276>>>0)<=($277>>>0);
 if ($278) {
  $279 = $0;
  $280 = ((($279)) + 456|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = $res;
  $283 = (($282) - ($281))|0;
  $res = $283;
  $284 = $res;
  $285 = $0;
  $286 = ((($285)) + 464|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = (($287) + ($284))|0;
  HEAP32[$286>>2] = $288;
  $289 = $res;
  STACKTOP = sp;return ($289|0);
 } else {
  ___assert_fail((1693|0),(904|0),4292,(1677|0));
  // unreachable;
 }
 return (0)|0;
}
function _inc_lreduce($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 568|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*110)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = ((($5)) + 568|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7>>>0) / 100)&-1;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 _report($9,1,43);
 STACKTOP = sp;return;
}
function _collect_clause($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $c;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & -2;
  HEAP32[$8>>2] = $10;
  $11 = $0;
  $12 = $1;
  _disconnect_clause($11,$12);
  $13 = $0;
  $14 = $1;
  _delete_clause($13,$14);
  STACKTOP = sp;return 1;
 } else {
  ___assert_fail((1718|0),(904|0),4179,(1729|0));
  // unreachable;
 }
 return (0)|0;
}
function _disconnect_clause($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $c;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 4;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  ___assert_fail((1744|0),(904|0),4139,(1757|0));
  // unreachable;
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(2);
 if (!($10)) {
  $56 = $1;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 & -17;
  HEAP32[$57>>2] = $59;
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 1;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 $17 = $0;
 if ($16) {
  $18 = ((($17)) + 692|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)>(0);
  if (!($20)) {
   ___assert_fail((1775|0),(904|0),4143,(1757|0));
   // unreachable;
  }
  $21 = $0;
  $22 = ((($21)) + 692|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + -1)|0;
  HEAP32[$22>>2] = $24;
  $25 = $0;
  $26 = ((($25)) + 700|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($27>>>0)>=($29>>>0);
  if (!($30)) {
   ___assert_fail((1793|0),(904|0),4146,(1757|0));
   // unreachable;
  }
  $31 = $1;
  $32 = HEAP32[$31>>2]|0;
  $33 = $0;
  $34 = ((($33)) + 700|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) - ($32))|0;
  HEAP32[$34>>2] = $36;
  $56 = $1;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 & -17;
  HEAP32[$57>>2] = $59;
  STACKTOP = sp;return;
 } else {
  $37 = ((($17)) + 688|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38>>>0)>(0);
  if (!($39)) {
   ___assert_fail((1814|0),(904|0),4149,(1757|0));
   // unreachable;
  }
  $40 = $0;
  $41 = ((($40)) + 688|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + -1)|0;
  HEAP32[$41>>2] = $43;
  $44 = $0;
  $45 = ((($44)) + 696|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $1;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($46>>>0)>=($48>>>0);
  if (!($49)) {
   ___assert_fail((1832|0),(904|0),4152,(1757|0));
   // unreachable;
  }
  $50 = $1;
  $51 = HEAP32[$50>>2]|0;
  $52 = $0;
  $53 = ((($52)) + 696|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) - ($51))|0;
  HEAP32[$53>>2] = $55;
  $56 = $1;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 & -17;
  HEAP32[$57>>2] = $59;
  STACKTOP = sp;return;
 }
}
function _delete_clause($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 1;
 $9 = $8 & 1;
 $10 = (_bytes_clause($2,$4,$9)|0);
 $bytes = $10;
 $11 = $0;
 $12 = $1;
 $13 = $bytes;
 _delete($11,$12,$13);
 STACKTOP = sp;return;
}
function _bytes_clause($ps,$size,$learned) {
 $ps = $ps|0;
 $size = $size|0;
 $learned = $learned|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $size;
 $2 = $learned;
 $res = 24;
 $3 = $1;
 $4 = $3<<2;
 $5 = $res;
 $6 = (($5) + ($4))|0;
 $res = $6;
 $7 = $res;
 $8 = (($7) - 8)|0;
 $res = $8;
 $9 = $2;
 $10 = ($9|0)!=(0);
 $11 = $1;
 $12 = ($11>>>0)>(2);
 $or$cond = $10 & $12;
 if (!($or$cond)) {
  $15 = $res;
  STACKTOP = sp;return ($15|0);
 }
 $13 = $res;
 $14 = (($13) + 4)|0;
 $res = $14;
 $15 = $res;
 STACKTOP = sp;return ($15|0);
}
function _incjwh($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $eol = 0, $f = 0, $inc = 0, $lit = 0, $p = 0;
 var $size = 0, $sum = 0, $v = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $c;
 $size = 0;
 $2 = $1;
 $3 = (_end_of_lits($2)|0);
 $eol = $3;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $p = $5;
 while(1) {
  $6 = $p;
  $7 = $eol;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $p;
  $10 = HEAP32[$9>>2]|0;
  $lit = $10;
  $11 = $lit;
  $12 = HEAP8[$11>>0]|0;
  $val = $12;
  $13 = $val;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $0;
   $17 = ((($16)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18>>>0)>(0);
   if ($19) {
    $20 = $0;
    $21 = ((($20)) + 44|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $lit;
    $24 = $0;
    $25 = ((($24)) + 40|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $23;
    $28 = $26;
    $29 = (($27) - ($28))|0;
    $30 = (($29|0) / 2)&-1;
    $31 = (($22) + (($30*12)|0)|0);
    $v = $31;
    $32 = $v;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34>>>0)>(0);
    if ($35) {
     $val = 0;
    }
   }
  }
  $36 = $val;
  $37 = $36 << 24 >> 24;
  $38 = ($37|0)==(1);
  if ($38) {
   label = 14;
   break;
  }
  $39 = $val;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)!=(-1);
  if ($41) {
   $42 = $size;
   $43 = (($42) + 1)|0;
   $size = $43;
  }
  $44 = $p;
  $45 = ((($44)) + 4|0);
  $p = $45;
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
 $46 = $size;
 $47 = (0 - ($46))|0;
 $48 = (_base2flt(1,$47)|0);
 $inc = $48;
 $49 = $1;
 $50 = ((($49)) + 16|0);
 $p = $50;
 while(1) {
  $51 = $p;
  $52 = $eol;
  $53 = ($51>>>0)<($52>>>0);
  if (!($53)) {
   break;
  }
  $54 = $p;
  $55 = HEAP32[$54>>2]|0;
  $lit = $55;
  $56 = $0;
  $57 = ((($56)) + 52|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $lit;
  $60 = $0;
  $61 = ((($60)) + 40|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $59;
  $64 = $62;
  $65 = (($63) - ($64))|0;
  $66 = (($58) + ($65<<2)|0);
  $f = $66;
  $67 = $f;
  $68 = HEAP32[$67>>2]|0;
  $69 = $inc;
  $70 = (_addflt($68,$69)|0);
  $sum = $70;
  $71 = $sum;
  $72 = $f;
  HEAP32[$72>>2] = $71;
  $73 = $p;
  $74 = ((($73)) + 4|0);
  $p = $74;
 }
 STACKTOP = sp;return;
}
function _base2flt($m,$e) {
 $m = $m|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $e;
 $3 = $1;
 $4 = ($3|0)!=(0);
 L1: do {
  if ($4) {
   $5 = $1;
   $6 = ($5>>>0)<(16777216);
   L3: do {
    if ($6) {
     while(1) {
      $7 = $2;
      $8 = ($7|0)<=(-128);
      if ($8) {
       break;
      }
      $9 = $2;
      $10 = (($9) + -1)|0;
      $2 = $10;
      $11 = $1;
      $12 = $11 << 1;
      $1 = $12;
      $13 = $1;
      $14 = ($13>>>0)<(16777216);
      if (!($14)) {
       break L3;
      }
     }
     $0 = 1;
     break L1;
    } else {
     while(1) {
      $15 = $1;
      $16 = ($15>>>0)>=(33554432);
      if (!($16)) {
       break L3;
      }
      $17 = $2;
      $18 = ($17|0)>=(127);
      if ($18) {
       break;
      }
      $19 = $2;
      $20 = (($19) + 1)|0;
      $2 = $20;
      $21 = $1;
      $22 = $21 >>> 1;
      $1 = $22;
     }
     $0 = -1;
     break L1;
    }
   } while(0);
   $23 = $1;
   $24 = $23 & -16777217;
   $1 = $24;
   $25 = $1;
   $26 = $2;
   $27 = (_packflt($25,$26)|0);
   $0 = $27;
  } else {
   $0 = 0;
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _addflt($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delta = 0;
 var $ea = 0, $eb = 0, $ma = 0, $mb = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = $2;
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $6 = $1;
  $tmp = $6;
  $7 = $2;
  $1 = $7;
  $8 = $tmp;
  $2 = $8;
 }
 $9 = $2;
 $10 = ($9|0)!=(0);
 $11 = $1;
 if (!($10)) {
  $0 = $11;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $12 = $11 & 16777215;
 $ma = $12;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = (($14) - 128)|0;
 $ea = $15;
 $16 = $ma;
 $17 = $16 | 16777216;
 $ma = $17;
 $18 = $2;
 $19 = $18 & 16777215;
 $mb = $19;
 $20 = $2;
 $21 = $20 >>> 24;
 $22 = (($21) - 128)|0;
 $eb = $22;
 $23 = $mb;
 $24 = $23 | 16777216;
 $mb = $24;
 $25 = $ea;
 $26 = $eb;
 $27 = ($25|0)>=($26|0);
 if (!($27)) {
  ___assert_fail((2018|0),(904|0),779,(2027|0));
  // unreachable;
 }
 $28 = $ea;
 $29 = $eb;
 $30 = (($28) - ($29))|0;
 $delta = $30;
 $31 = $delta;
 $32 = ($31>>>0)<(32);
 if ($32) {
  $33 = $delta;
  $34 = $mb;
  $35 = $34 >>> $33;
  $mb = $35;
 } else {
  $mb = 0;
 }
 $36 = $mb;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $38 = $1;
  $0 = $38;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $39 = $mb;
 $40 = $ma;
 $41 = (($40) + ($39))|0;
 $ma = $41;
 $42 = $ma;
 $43 = $42 & 33554432;
 $44 = ($43|0)!=(0);
 do {
  if ($44) {
   $45 = $ea;
   $46 = ($45|0)==(127);
   if (!($46)) {
    $47 = $ea;
    $48 = (($47) + 1)|0;
    $ea = $48;
    $49 = $ma;
    $50 = $49 >>> 1;
    $ma = $50;
    break;
   }
   $0 = -1;
   $58 = $0;
   STACKTOP = sp;return ($58|0);
  }
 } while(0);
 $51 = $ma;
 $52 = ($51>>>0)<(33554432);
 if (!($52)) {
  ___assert_fail((2034|0),(904|0),797,(2027|0));
  // unreachable;
 }
 $53 = $ma;
 $54 = $53 & 16777215;
 $ma = $54;
 $55 = $ma;
 $56 = $ea;
 $57 = (_packflt($55,$56)|0);
 $0 = $57;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _packflt($m,$e) {
 $m = $m|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $e;
 $2 = $0;
 $3 = ($2>>>0)<(16777216);
 if (!($3)) {
  ___assert_fail((2048|0),(904|0),734,(2059|0));
  // unreachable;
 }
 $4 = $1;
 $5 = (-128)<=($4|0);
 if (!($5)) {
  ___assert_fail((2067|0),(904|0),735,(2059|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ($6|0)<=(127);
 if ($7) {
  $8 = $0;
  $9 = $1;
  $10 = (($9) + 128)|0;
  $11 = $10 << 24;
  $12 = $8 | $11;
  $res = $12;
  $13 = $res;
  STACKTOP = sp;return ($13|0);
 } else {
  ___assert_fail((2087|0),(904|0),736,(2059|0));
  // unreachable;
 }
 return (0)|0;
}
function _mark_var($ps,$v) {
 $ps = $ps|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 1;
 $5 = $4&65535;
 $6 = ($5|0)!=(0);
 if ($6) {
  ___assert_fail((2461|0),(904|0),1708,(2470|0));
  // unreachable;
 } else {
  $7 = $1;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 & -2;
  $10 = $9 | 1;
  HEAP16[$7>>1] = $10;
  $11 = $0;
  $12 = $1;
  _push_var_as_marked($11,$12);
  STACKTOP = sp;return;
 }
}
function _var2reason($ps,$var) {
 $ps = $ps|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $other = 0, $res = 0, $this = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $var;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $res = $4;
 $5 = $res;
 $6 = $5;
 $7 = 1 & $6;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $68 = $res;
  STACKTOP = sp;return ($68|0);
 }
 $9 = $0;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = $0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $12;
 $17 = $15;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / 12)&-1;
 $20 = $19<<1;
 $21 = (($11) + ($20)|0);
 $this = $21;
 $22 = $this;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 << 24 >> 24;
 $25 = ($24|0)==(-1);
 if ($25) {
  $26 = $0;
  $27 = ((($26)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $this;
  $30 = $0;
  $31 = ((($30)) + 40|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $29;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $36 = 1 ^ $35;
  $37 = (($28) + ($36)|0);
  $this = $37;
 }
 $38 = $0;
 $39 = ((($38)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $res;
 $42 = $41;
 $43 = (($42>>>0) / 2)&-1;
 $44 = (($40) + ($43)|0);
 $other = $44;
 $45 = $other;
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 << 24 >> 24;
 $48 = ($47|0)==(1);
 if (!($48)) {
  ___assert_fail((2352|0),(904|0),2744,(2371|0));
  // unreachable;
 }
 $49 = $this;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50 << 24 >> 24;
 $52 = ($51|0)==(1);
 if (!($52)) {
  ___assert_fail((2382|0),(904|0),2745,(2371|0));
  // unreachable;
 }
 $53 = $0;
 $54 = $0;
 $55 = ((($54)) + 40|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $other;
 $58 = $0;
 $59 = ((($58)) + 40|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $57;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $64 = 1 ^ $63;
 $65 = (($56) + ($64)|0);
 $66 = $this;
 $67 = (_setimpl($53,$65,$66)|0);
 $res = $67;
 $68 = $res;
 STACKTOP = sp;return ($68|0);
}
function _resetimpl($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 116|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _setimpl($ps,$a,$b) {
 $ps = $ps|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = ((($3)) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  ___assert_fail((2400|0),(904|0),1569,(2415|0));
  // unreachable;
 }
 $7 = $0;
 $8 = ((($7)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(2);
 if ($10) {
  $11 = $1;
  $12 = $0;
  $13 = ((($12)) + 68|0);
  $14 = ((($13)) + 16|0);
  HEAP32[$14>>2] = $11;
  $15 = $2;
  $16 = $0;
  $17 = ((($16)) + 68|0);
  $18 = ((($17)) + 16|0);
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $15;
  $20 = $0;
  $21 = ((($20)) + 68|0);
  $22 = ((($21)) + 16|0);
  _sorttwolits($22);
  $23 = $0;
  $24 = ((($23)) + 116|0);
  HEAP32[$24>>2] = 1;
  $25 = $0;
  $26 = ((($25)) + 68|0);
  STACKTOP = sp;return ($26|0);
 } else {
  ___assert_fail((2423|0),(904|0),1570,(2415|0));
  // unreachable;
 }
 return (0)|0;
}
function _sorttwolits($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $a = $2;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $b = $5;
 $6 = $a;
 $7 = $b;
 $8 = ($6|0)!=($7|0);
 if (!($8)) {
  ___assert_fail((2442|0),(904|0),1551,(2449|0));
  // unreachable;
 }
 $9 = $a;
 $10 = $b;
 $11 = ($9>>>0)<($10>>>0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $b;
 $13 = $0;
 HEAP32[$13>>2] = $12;
 $14 = $a;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return;
}
function _push_var_as_marked($ps,$v) {
 $ps = $ps|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 352|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 356|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $68 = $1;
  $69 = $0;
  $70 = ((($69)) + 352|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 4|0);
  HEAP32[$70>>2] = $72;
  HEAP32[$71>>2] = $68;
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 356|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 348|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = (($17|0) / 4)&-1;
 $old_num = $18;
 $19 = $old_num;
 $20 = ($19|0)!=(0);
 $21 = $old_num;
 $22 = $21<<1;
 $23 = $20 ? $22 : 1;
 $new_num = $23;
 $24 = $0;
 $25 = ((($24)) + 352|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 348|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $26;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = (($32|0) / 4)&-1;
 $count = $33;
 $34 = $0;
 $35 = ((($34)) + 348|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = ((($37)) + 356|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36>>>0)<=($39>>>0);
 if (!($40)) {
  ___assert_fail((2318|0),(904|0),1702,(2479|0));
  // unreachable;
 }
 $41 = $old_num;
 $42 = $41<<2;
 $old_size = $42;
 $43 = $new_num;
 $44 = $43<<2;
 $new_size = $44;
 $45 = $0;
 $46 = $0;
 $47 = ((($46)) + 348|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $old_size;
 $50 = $new_size;
 $51 = (_resize($45,$48,$49,$50)|0);
 $52 = $0;
 $53 = ((($52)) + 348|0);
 HEAP32[$53>>2] = $51;
 $54 = $0;
 $55 = ((($54)) + 348|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $count;
 $58 = (($56) + ($57<<2)|0);
 $59 = $0;
 $60 = ((($59)) + 352|0);
 HEAP32[$60>>2] = $58;
 $61 = $0;
 $62 = ((($61)) + 348|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $new_num;
 $65 = (($63) + ($64<<2)|0);
 $66 = $0;
 $67 = ((($66)) + 356|0);
 HEAP32[$67>>2] = $65;
 $68 = $1;
 $69 = $0;
 $70 = ((($69)) + 352|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 4|0);
 HEAP32[$70>>2] = $72;
 HEAP32[$71>>2] = $68;
 STACKTOP = sp;return;
}
function _relem($ps,$name,$fp,$val) {
 $ps = $ps|0;
 $name = $name|0;
 $fp = $fp|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $name;
 $2 = $fp;
 $3 = $val;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $6 = $0;
 if ($5) {
  $7 = $1;
  $8 = $2;
  $9 = $3;
  _relemhead($6,$7,$8,$9);
  STACKTOP = sp;return;
 } else {
  _relemdata($6);
  STACKTOP = sp;return;
 }
}
function _avglevel($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 544|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $13 = 0.0;
  STACKTOP = sp;return (+$13);
 }
 $5 = $0;
 $6 = ((($5)) + 520|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $0;
 $9 = ((($8)) + 544|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($10>>>0));
 $12 = $7 / $11;
 $13 = $12;
 STACKTOP = sp;return (+$13);
}
function _dynamic_flips_per_assignment_per_mille($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 772|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3>>>0) / 10000)&-1;
 STACKTOP = sp;return ($4|0);
}
function _mb($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 456|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3>>>0));
 $5 = $4 / 1048576.0;
 STACKTOP = sp;return (+$5);
}
function _relemhead($ps,$name,$fp,$val) {
 $ps = $ps|0;
 $name = $name|0;
 $fp = $fp|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0;
 var $98 = 0, $99 = 0, $e = 0, $fmt = 0, $len = 0, $or$cond = 0, $size = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr22 = 0, $vararg_ptr5 = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $0 = $ps;
 $1 = $name;
 $2 = $fp;
 $3 = $val;
 $4 = $0;
 $5 = ((($4)) + 532|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 516|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 1;
  $x = $11;
  $12 = $0;
  $13 = ((($12)) + 516|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14|0) / 2)&-1;
  $16 = ($15*12)|0;
  $17 = $x;
  $18 = ($17*6)|0;
  $19 = (($16) + ($18))|0;
  $y = $19;
  $20 = $0;
  $21 = ((($20)) + 516|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(1);
  if ($23) {
   $24 = $0;
   $25 = ((($24)) + 504|0);
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer>>2] = 2716;
   (_sprintf($27,2712,$vararg_buffer)|0);
  }
  $28 = $1;
  $29 = (_strlen($28)|0);
  $len = $29;
  while(1) {
   $30 = $0;
   $31 = ((($30)) + 512|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $len;
   $34 = $y;
   $35 = (($33) + ($34))|0;
   $36 = (($35) + 1)|0;
   $37 = ($32|0)<=($36|0);
   if (!($37)) {
    break;
   }
   $38 = $0;
   $39 = ((($38)) + 512|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $0;
    $43 = ((($42)) + 512|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44<<1;
    $46 = $45;
   } else {
    $46 = 128;
   }
   $size = $46;
   $47 = $0;
   $48 = $0;
   $49 = ((($48)) + 504|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $0;
   $52 = ((($51)) + 512|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $size;
   $55 = (_resize($47,$50,$53,$54)|0);
   $56 = $0;
   $57 = ((($56)) + 504|0);
   HEAP32[$57>>2] = $55;
   $58 = $0;
   $59 = $0;
   $60 = ((($59)) + 504|0);
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $0;
   $64 = ((($63)) + 512|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $size;
   $67 = (_resize($58,$62,$65,$66)|0);
   $68 = $0;
   $69 = ((($68)) + 504|0);
   $70 = ((($69)) + 4|0);
   HEAP32[$70>>2] = $67;
   $71 = $size;
   $72 = $0;
   $73 = ((($72)) + 512|0);
   HEAP32[$73>>2] = $71;
  }
  $74 = $len;
  $75 = ($74|0)<=(6);
  $76 = $75 ? 2717 : 2725;
  $fmt = $76;
  $77 = $x;
  $78 = $0;
  $79 = ((($78)) + 504|0);
  $80 = (($79) + ($77<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $y;
  $83 = (($81) + ($82)|0);
  $84 = $fmt;
  $85 = $1;
  HEAP32[$vararg_buffer2>>2] = $85;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 2716;
  (_sprintf($83,$84,$vararg_buffer2)|0);
  $158 = $0;
  $159 = ((($158)) + 516|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + 1)|0;
  HEAP32[$159>>2] = $161;
  STACKTOP = sp;return;
 }
 $86 = $3;
 $87 = $86 < 0.0;
 $88 = $2;
 $89 = ($88|0)!=(0);
 if ($87) {
  if (!($89)) {
   ___assert_fail((2734|0),(904|0),2938,(2737|0));
   // unreachable;
  }
  $90 = $3;
  $91 = $90 > -100.0;
  if ($91) {
   $92 = $3;
   $93 = $92 * 10.0;
   $94 = $93 - 0.5;
   $95 = (~~(($94))>>>0);
   $tmp = $95;
   $96 = (+($95>>>0));
   $97 = $96 > -1000.0;
   if ($97) {
    $98 = $0;
    $99 = ((($98)) + 12|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $tmp;
    $102 = (0 - ($101))|0;
    $103 = (+($102>>>0));
    $104 = $103 / 10.0;
    HEAPF64[$vararg_buffer6>>3] = $104;
    (_fprintf($100,2747,$vararg_buffer6)|0);
    $158 = $0;
    $159 = ((($158)) + 516|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (($160) + 1)|0;
    HEAP32[$159>>2] = $161;
    STACKTOP = sp;return;
   }
  }
  $105 = $3;
  $106 = -$105;
  $107 = $106 / 10.0;
  $108 = $107 + 0.5;
  $109 = (~~(($108))>>>0);
  $tmp = $109;
  $e = 1;
  while(1) {
   $110 = $tmp;
   $111 = ($110>>>0)>=(100);
   if (!($111)) {
    break;
   }
   $112 = $tmp;
   $113 = (($112>>>0) / 10)&-1;
   $tmp = $113;
   $114 = $e;
   $115 = (($114) + 1)|0;
   $e = $115;
  }
  $116 = $0;
  $117 = ((($116)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $tmp;
  $120 = $e;
  HEAP32[$vararg_buffer9>>2] = $119;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $120;
  (_fprintf($118,2755,$vararg_buffer9)|0);
  $158 = $0;
  $159 = ((($158)) + 516|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + 1)|0;
  HEAP32[$159>>2] = $161;
  STACKTOP = sp;return;
 }
 $121 = $3;
 $122 = $121 < 1000.0;
 $or$cond = $89 & $122;
 if ($or$cond) {
  $123 = $3;
  $124 = $123 * 10.0;
  $125 = $124 + 0.5;
  $126 = (~~(($125))>>>0);
  $tmp = $126;
  $127 = ($126>>>0)<(10000);
  if ($127) {
   $128 = $0;
   $129 = ((($128)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $tmp;
   $132 = (+($131>>>0));
   $133 = $132 / 10.0;
   HEAPF64[$vararg_buffer13>>3] = $133;
   (_fprintf($130,2764,$vararg_buffer13)|0);
   $158 = $0;
   $159 = ((($158)) + 516|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + 1)|0;
   HEAP32[$159>>2] = $161;
   STACKTOP = sp;return;
  }
 }
 $134 = $2;
 $135 = ($134|0)!=(0);
 if (!($135)) {
  $136 = $3;
  $137 = (~~(($136))>>>0);
  $tmp = $137;
  $138 = ($137>>>0)<(100000);
  if ($138) {
   $139 = $0;
   $140 = ((($139)) + 12|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $tmp;
   HEAP32[$vararg_buffer16>>2] = $142;
   (_fprintf($141,2771,$vararg_buffer16)|0);
   $158 = $0;
   $159 = ((($158)) + 516|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + 1)|0;
   HEAP32[$159>>2] = $161;
   STACKTOP = sp;return;
  }
 }
 $143 = $3;
 $144 = $143 / 10.0;
 $145 = $144 + 0.5;
 $146 = (~~(($145))>>>0);
 $tmp = $146;
 $e = 1;
 while(1) {
  $147 = $tmp;
  $148 = ($147>>>0)>=(1000);
  if (!($148)) {
   break;
  }
  $149 = $tmp;
  $150 = (($149>>>0) / 10)&-1;
  $tmp = $150;
  $151 = $e;
  $152 = (($151) + 1)|0;
  $e = $152;
 }
 $153 = $0;
 $154 = ((($153)) + 12|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $tmp;
 $157 = $e;
 HEAP32[$vararg_buffer19>>2] = $156;
 $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
 HEAP32[$vararg_ptr22>>2] = $157;
 (_fprintf($155,2776,$vararg_buffer19)|0);
 $158 = $0;
 $159 = ((($158)) + 516|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + 1)|0;
 HEAP32[$159>>2] = $161;
 STACKTOP = sp;return;
}
function _relemdata($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $p = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 532|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $35 = $0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  (_fputc(10,$37)|0);
  $38 = $0;
  $39 = ((($38)) + 516|0);
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 }
 $x = 0;
 while(1) {
  $5 = $x;
  $6 = ($5|0)<=(1);
  if (!($6)) {
   break;
  }
  $7 = $x;
  $8 = $0;
  $9 = ((($8)) + 504|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $x;
  $13 = $0;
  $14 = ((($13)) + 504|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strlen($16)|0);
  $18 = (($11) + ($17)|0);
  $p = $18;
  while(1) {
   $19 = $p;
   $20 = ((($19)) + -1|0);
   $p = $20;
   $21 = $x;
   $22 = $0;
   $23 = ((($22)) + 504|0);
   $24 = (($23) + ($21<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($19>>>0)>($25>>>0);
   if (!($26)) {
    break;
   }
   $27 = $p;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(32);
   if ($30) {
    break;
   }
   $31 = $p;
   HEAP8[$31>>0] = 0;
  }
  $32 = $x;
  $33 = (($32) + 1)|0;
  $x = $33;
 }
 $34 = $0;
 _rheader($34);
 $38 = $0;
 $39 = ((($38)) + 516|0);
 HEAP32[$39>>2] = 0;
 STACKTOP = sp;return;
}
function _bcp($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $props = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $props = 0;
 $1 = $0;
 $2 = ((($1)) + 332|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  ___assert_fail((2821|0),(904|0),3871,(5126|0));
  // unreachable;
 }
 $5 = $0;
 $6 = ((($5)) + 328|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 while(1) {
  $9 = $0;
  $10 = ((($9)) + 140|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = ((($12)) + 128|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<($14>>>0);
  if ($15) {
   $16 = $props;
   $17 = (($16) + 1)|0;
   $props = $17;
   $18 = $0;
   $19 = $0;
   $20 = ((($19)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $0;
   $23 = ((($22)) + 140|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 4|0);
   HEAP32[$23>>2] = $25;
   $26 = HEAP32[$24>>2]|0;
   $27 = $0;
   $28 = ((($27)) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $26;
   $31 = $29;
   $32 = (($30) - ($31))|0;
   $33 = 1 ^ $32;
   $34 = (($21) + ($33)|0);
   _prop2($18,$34);
   continue;
  }
  $35 = $0;
  $36 = ((($35)) + 136|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $0;
  $39 = ((($38)) + 128|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $0;
  $43 = ((($42)) + 332|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   break;
  }
  $46 = $0;
  $47 = $0;
  $48 = ((($47)) + 40|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $0;
  $51 = ((($50)) + 136|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  HEAP32[$51>>2] = $53;
  $54 = HEAP32[$52>>2]|0;
  $55 = $0;
  $56 = ((($55)) + 40|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $54;
  $59 = $57;
  $60 = (($58) - ($59))|0;
  $61 = 1 ^ $60;
  $62 = (($49) + ($61)|0);
  _propl($46,$62);
  $63 = $0;
  $64 = ((($63)) + 332|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0|0);
  if ($66) {
   break;
  }
 }
 $67 = $props;
 $68 = ($67|0)<(0);
 $69 = $68 << 31 >> 31;
 $70 = $0;
 $71 = ((($70)) + 616|0);
 $72 = $71;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = (_i64Add(($74|0),($77|0),($67|0),($69|0))|0);
 $79 = tempRet0;
 $80 = $71;
 $81 = $80;
 HEAP32[$81>>2] = $78;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = $79;
 STACKTOP = sp;return;
}
function _backtrack($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $new_level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 676|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 _analyze($5);
 $6 = $0;
 $7 = (_drive($6)|0);
 $new_level = $7;
 $8 = $0;
 $9 = (_add_simplified_clause($8,1)|0);
 $c = $9;
 $10 = $0;
 $11 = $new_level;
 _undo($10,$11);
 $12 = $0;
 $13 = $c;
 _force($12,$13);
 $14 = $0;
 $15 = ((($14)) + 664|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = $0;
  $19 = ((($18)) + 572|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + -1)|0;
  HEAP32[$19>>2] = $21;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   $23 = $0;
   $24 = ((($23)) + 576|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25*121)|0;
   HEAP32[$24>>2] = $26;
   $27 = $0;
   $28 = ((($27)) + 576|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29>>>0) / 100)&-1;
   HEAP32[$28>>2] = $30;
   $31 = $0;
   $32 = ((($31)) + 576|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $0;
   $35 = ((($34)) + 572|0);
   HEAP32[$35>>2] = $33;
   $36 = $0;
   _inc_lreduce($36);
  }
 }
 $37 = $0;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>=(4);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = $0;
 $42 = ((($41)) + 676|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43>>>0) % 1000)&-1;
 $45 = ($44|0)!=(0);
 if ($45) {
  STACKTOP = sp;return;
 }
 $46 = $0;
 _report($46,4,67);
 STACKTOP = sp;return;
}
function _satisfied($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $1;
 $3 = ((($2)) + 328|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  ___assert_fail((2179|0),(904|0),3058,(4718|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 248|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  ___assert_fail((3208|0),(904|0),3059,(4718|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 156|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 152|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)<($15>>>0);
 if ($16) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $17 = $1;
 $18 = ((($17)) + 332|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  ___assert_fail((2821|0),(904|0),3062,(4718|0));
  // unreachable;
 }
 $21 = $1;
 $22 = (_bcp_queue_is_empty($21)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  ___assert_fail((4504|0),(904|0),3063,(4718|0));
  // unreachable;
 }
 $24 = $1;
 $25 = ((($24)) + 128|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = ((($27)) + 124|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($29) + ($32<<2)|0);
 $34 = ($26|0)==($33|0);
 $35 = $34&1;
 $0 = $35;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _init_restart($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 592|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 596|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 600|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 _inc_lrestart($7,0);
 STACKTOP = sp;return;
}
function _init_reduce($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 568|0);
 HEAP32[$2>>2] = 1000;
 $3 = $0;
 $4 = ((($3)) + 568|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(100);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 568|0);
  HEAP32[$8>>2] = 100;
 }
 $9 = $0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 568|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer>>2] = $18;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $24;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $27;
 (_fprintf($15,4674,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _incincs($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 _inc_vinc($1);
 $2 = $0;
 _inc_cinc($2);
 STACKTOP = sp;return;
}
function _original_clauses_satisfied($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 268|0);
 $3 = HEAP32[$2>>2]|0;
 $p = $3;
 while(1) {
  $4 = $p;
  $5 = $0;
  $6 = ((($5)) + 272|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $p;
  $10 = HEAP32[$9>>2]|0;
  $c = $10;
  $11 = $c;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $c;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 >>> 1;
   $17 = $16 & 1;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $19 = $c;
    $20 = (_clause_satisfied($19)|0);
    $21 = ($20|0)!=(0);
    if (!($21)) {
     label = 6;
     break;
    }
   }
  }
  $22 = $p;
  $23 = ((($22)) + 4|0);
  $p = $23;
 }
 if ((label|0) == 6) {
  ___assert_fail((4575|0),(904|0),2825,(4595|0));
  // unreachable;
 }
 else if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _assumptions_satisfied($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lit = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 148|0);
 $3 = HEAP32[$2>>2]|0;
 $p = $3;
 while(1) {
  $4 = $p;
  $5 = $0;
  $6 = ((($5)) + 152|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $p;
  $10 = HEAP32[$9>>2]|0;
  $lit = $10;
  $11 = $lit;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(1);
  if (!($14)) {
   label = 4;
   break;
  }
  $15 = $p;
  $16 = ((($15)) + 4|0);
  $p = $16;
 }
 if ((label|0) == 4) {
  ___assert_fail((4450|0),(904|0),2834,(4553|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
}
function _iteration($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  ___assert_fail((2784|0),(904|0),4887,(4494|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (_bcp_queue_is_empty($5)|0);
 $7 = ($6|0)!=(0);
 if (!($7)) {
  ___assert_fail((4504|0),(904|0),4888,(4494|0));
  // unreachable;
 }
 $8 = $0;
 $9 = ((($8)) + 560|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = ((($11)) + 632|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10>>>0)<($13>>>0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 528|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
  $19 = $0;
  _report($19,2,105);
  $20 = $0;
  _init_restart($20);
  $21 = $0;
  $22 = ((($21)) + 632|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  $25 = ((($24)) + 560|0);
  HEAP32[$25>>2] = $23;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((4527|0),(904|0),4889,(4494|0));
  // unreachable;
 }
}
function _bcp_queue_is_empty($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $1;
 $3 = ((($2)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 128|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 do {
  if ($8) {
   $0 = 0;
  } else {
   $9 = $1;
   $10 = ((($9)) + 140|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $1;
   $13 = ((($12)) + 128|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($11|0)!=($14|0);
   if ($15) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _need_to_reduce($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 692|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (_reduce_limit_on_lclauses($4)|0);
 $6 = ($3>>>0)>=($5>>>0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _restart($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = (_medium_agility($1)|0);
 $skip = $2;
 $3 = $0;
 $4 = ((($3)) + 676|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 588|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)>=($8>>>0);
 if (!($9)) {
  ___assert_fail((4367|0),(904|0),4396,(4397|0));
  // unreachable;
 }
 $10 = $skip;
 $11 = ($10|0)!=(0);
 if ($11) {
  $21 = $0;
  $22 = $skip;
  _inc_lrestart($21,$22);
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 548|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $16 = $0;
 $17 = ((($16)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)>(1);
 if (!($19)) {
  ___assert_fail((4405|0),(904|0),4400,(4397|0));
  // unreachable;
 }
 $20 = $0;
 _undo($20,0);
 $21 = $0;
 $22 = $skip;
 _inc_lrestart($21,$22);
 STACKTOP = sp;return;
}
function _decide($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = (_satisfied($1)|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  ___assert_fail((2799|0),(904|0),5243,(2814|0));
  // unreachable;
 }
 $4 = $0;
 $5 = ((($4)) + 332|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  ___assert_fail((2821|0),(904|0),5244,(2814|0));
  // unreachable;
 }
 $8 = $0;
 $9 = ((($8)) + 156|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = ((($11)) + 152|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10>>>0)<($13>>>0);
 if ($14) {
  $15 = $0;
  $16 = (_adecide($15)|0);
  $lit = $16;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $18 = $0;
  $19 = ((($18)) + 248|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   STACKTOP = sp;return;
  }
  $22 = $0;
  $23 = (_satisfied($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   STACKTOP = sp;return;
  }
  $25 = $0;
  $26 = (_rdecide($25)|0);
  $lit = $26;
  $27 = ($26|0)!=(0|0);
  if (!($27)) {
   $28 = $0;
   $29 = (_sdecide($28)|0);
   $lit = $29;
  }
 }
 $30 = $lit;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((2835|0),(904|0),5255,(2814|0));
  // unreachable;
 }
 $32 = $0;
 $33 = $lit;
 _assign_decision($32,$33);
 $34 = $0;
 $35 = ((($34)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+($36>>>0));
 $38 = $0;
 $39 = ((($38)) + 520|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $40 + $37;
 HEAPF64[$39>>3] = $41;
 $42 = $0;
 $43 = ((($42)) + 544|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 STACKTOP = sp;return;
}
function _adecide($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $lit = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $1;
 $3 = ((($2)) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 152|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if (!($8)) {
  ___assert_fail((3178|0),(904|0),5203,(3200|0));
  // unreachable;
 }
 $9 = $1;
 $10 = ((($9)) + 248|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  ___assert_fail((3208|0),(904|0),5204,(3200|0));
  // unreachable;
 }
 while(1) {
  $13 = $1;
  $14 = ((($13)) + 156|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = ((($16)) + 152|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15>>>0)<($18>>>0);
  if (!($19)) {
   label = 13;
   break;
  }
  $20 = $1;
  $21 = ((($20)) + 156|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 4|0);
  HEAP32[$21>>2] = $23;
  $24 = HEAP32[$22>>2]|0;
  $lit = $24;
  $25 = $lit;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($27|0)==(-1);
  $29 = $lit;
  if ($28) {
   label = 8;
   break;
  }
  $47 = HEAP8[$29>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)==(1);
  $50 = $1;
  if (!($49)) {
   label = 12;
   break;
  }
  $51 = ((($50)) + 44|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $lit;
  $54 = $1;
  $55 = ((($54)) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $53;
  $58 = $56;
  $59 = (($57) - ($58))|0;
  $60 = (($59|0) / 2)&-1;
  $61 = (($52) + (($60*12)|0)|0);
  $v = $61;
  $62 = $v;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $1;
  $66 = ((($65)) + 144|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64>>>0)>($67>>>0);
  if (!($68)) {
   continue;
  }
  $69 = $v;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $1;
  $73 = ((($72)) + 144|0);
  HEAP32[$73>>2] = $71;
 }
 if ((label|0) == 8) {
  $30 = $1;
  $31 = ((($30)) + 248|0);
  HEAP32[$31>>2] = $29;
  $32 = $1;
  $33 = ((($32)) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $lit;
  $36 = $1;
  $37 = ((($36)) + 40|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $35;
  $40 = $38;
  $41 = (($39) - ($40))|0;
  $42 = (($41|0) / 2)&-1;
  $43 = (($34) + (($42*12)|0)|0);
  $v = $43;
  $44 = $1;
  $45 = $v;
  _use_var($44,$45);
  $46 = $1;
  _fanalyze($46);
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 12) {
  $74 = ((($50)) + 28|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + 1)|0;
  $77 = $1;
  $78 = ((($77)) + 144|0);
  HEAP32[$78>>2] = $76;
  $79 = $lit;
  $0 = $79;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _rdecide($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $delta = 0, $idx = 0, $res = 0, $spread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $spread = 1000;
 $2 = $1;
 $3 = $spread;
 $4 = (_rrng($2,1,$3)|0);
 $5 = ($4|0)!=(2);
 if ($5) {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $6 = $1;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (1)<=($8>>>0);
 if (!($9)) {
  ___assert_fail((3106|0),(904|0),5146,(3123|0));
  // unreachable;
 }
 $10 = $1;
 $11 = $1;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_rrng($10,1,$13)|0);
 $idx = $14;
 $15 = $1;
 $16 = $idx;
 $17 = (_int2lit($15,$16)|0);
 $res = $17;
 $18 = $res;
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $1;
  $23 = $1;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_rrng($22,1,$25)|0);
  $delta = $26;
  while(1) {
   $27 = $delta;
   $28 = $1;
   $29 = ((($28)) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_gcd($27,$30)|0);
   $32 = ($31|0)!=(1);
   $33 = $delta;
   if (!($32)) {
    break;
   }
   $34 = (($33) + -1)|0;
   $delta = $34;
  }
  $35 = (1)<=($33>>>0);
  if (!($35)) {
   ___assert_fail((3131|0),(904|0),5155,(3123|0));
   // unreachable;
  }
  $36 = $delta;
  $37 = $1;
  $38 = ((($37)) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36>>>0)<=($39>>>0);
  if (!($40)) {
   ___assert_fail((3142|0),(904|0),5156,(3123|0));
   // unreachable;
  }
  while(1) {
   $41 = $delta;
   $42 = $idx;
   $43 = (($42) + ($41))|0;
   $idx = $43;
   $44 = $idx;
   $45 = $1;
   $46 = ((($45)) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($44>>>0)>($47>>>0);
   if ($48) {
    $49 = $1;
    $50 = ((($49)) + 32|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $idx;
    $53 = (($52) - ($51))|0;
    $idx = $53;
   }
   $54 = $1;
   $55 = $idx;
   $56 = (_int2lit($54,$55)|0);
   $res = $56;
   $57 = $res;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   $60 = ($59|0)!=(0);
   if (!($60)) {
    break;
   }
  }
 }
 $61 = $1;
 $62 = $res;
 $63 = (_decide_phase($61,$62)|0);
 $res = $63;
 $64 = $res;
 $0 = $64;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _sdecide($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 while(1) {
  $1 = $0;
  $2 = (_htop($1)|0);
  $r = $2;
  $3 = $0;
  $4 = ((($3)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $r;
  $7 = $0;
  $8 = ((($7)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $6;
  $11 = $9;
  $12 = (($10) - ($11))|0;
  $13 = (($12|0) / 8)&-1;
  $14 = $13<<1;
  $15 = (($5) + ($14)|0);
  $res = $15;
  $16 = $res;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(0);
  $20 = $0;
  if ($19) {
   break;
  }
  (_hpop($20)|0);
 }
 $21 = $res;
 $22 = (_decide_phase($20,$21)|0);
 $res = $22;
 $23 = $res;
 STACKTOP = sp;return ($23|0);
}
function _assign_decision($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $0;
 $3 = ((($2)) + 332|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  ___assert_fail((2821|0),(904|0),4427,(2839|0));
  // unreachable;
 } else {
  $6 = $0;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
  $10 = $0;
  $11 = $1;
  _assign($10,$11,0);
  STACKTOP = sp;return;
 }
}
function _assign($ps,$lit,$reason) {
 $ps = $ps|0;
 $lit = $lit|0;
 $reason = $reason|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $reason;
 $3 = $0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($12|0) / 2)&-1;
 $14 = (($5) + (($13*12)|0)|0);
 $v = $14;
 $15 = $1;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $0;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $v;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $21;
  $24 = $0;
  $25 = $1;
  _assign_phase($24,$25);
  $26 = $0;
  $27 = $v;
  $28 = $2;
  _assign_reason($26,$27,$28);
  $29 = $0;
  $30 = $1;
  _tpush($29,$30);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2855|0),(904|0),1510,(2873|0));
  // unreachable;
 }
}
function _assign_phase($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $idx = 0, $new_phase = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 2)&-1;
 $13 = (($4) + (($12*12)|0)|0);
 $v = $13;
 $14 = $0;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $0;
  $19 = ((($18)) + 664|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  if ($21) {
   $101 = $1;
   HEAP8[$101>>0] = 1;
   $102 = $0;
   $103 = ((($102)) + 40|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $1;
   $106 = $0;
   $107 = ((($106)) + 40|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $105;
   $110 = $108;
   $111 = (($109) - ($110))|0;
   $112 = 1 ^ $111;
   $113 = (($104) + ($112)|0);
   HEAP8[$113>>0] = -1;
   STACKTOP = sp;return;
  }
 }
 $22 = $1;
 $23 = $0;
 $24 = ((($23)) + 40|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $22;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = $28 & 1;
 $30 = ($29|0)!=(0);
 $31 = $30 ? -1 : 1;
 $32 = ($31|0)>(0);
 $33 = $32&1;
 $new_phase = $33;
 $34 = $v;
 $35 = HEAP16[$34>>1]|0;
 $36 = ($35&65535) >>> 3;
 $37 = $36 & 1;
 $38 = $37&65535;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $0;
  $41 = ((($40)) + 772|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42>>>0) / 10000)&-1;
  $44 = $0;
  $45 = ((($44)) + 772|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - ($43))|0;
  HEAP32[$45>>2] = $47;
  $48 = $new_phase;
  $49 = $v;
  $50 = HEAP16[$49>>1]|0;
  $51 = ($50&65535) >>> 2;
  $52 = $51 & 1;
  $53 = $52&65535;
  $54 = ($48|0)!=($53|0);
  if ($54) {
   $55 = $0;
   $56 = ((($55)) + 772|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 1000)|0;
   HEAP32[$56>>2] = $58;
   $59 = $0;
   $60 = ((($59)) + 752|0);
   $61 = $60;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (_i64Add(($63|0),($66|0),1,0)|0);
   $68 = tempRet0;
   $69 = $60;
   $70 = $69;
   HEAP32[$70>>2] = $67;
   $71 = (($69) + 4)|0;
   $72 = $71;
   HEAP32[$72>>2] = $68;
   $73 = $1;
   $74 = $0;
   $75 = ((($74)) + 40|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $73;
   $78 = $76;
   $79 = (($77) - ($78))|0;
   $80 = (($79|0) / 2)&-1;
   $idx = $80;
   $81 = $idx;
   $82 = $0;
   $83 = ((($82)) + 788|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($81>>>0)<($84>>>0);
   if ($85) {
    $86 = $idx;
    $87 = $0;
    $88 = ((($87)) + 788|0);
    HEAP32[$88>>2] = $86;
   }
  }
 }
 $89 = $new_phase;
 $90 = $v;
 $91 = $89&65535;
 $92 = HEAP16[$90>>1]|0;
 $93 = $91 & 1;
 $94 = ($93 << 2)&65535;
 $95 = $92 & -5;
 $96 = $95 | $94;
 HEAP16[$90>>1] = $96;
 $97 = $v;
 $98 = HEAP16[$97>>1]|0;
 $99 = $98 & -9;
 $100 = $99 | 8;
 HEAP16[$97>>1] = $100;
 $101 = $1;
 HEAP8[$101>>0] = 1;
 $102 = $0;
 $103 = ((($102)) + 40|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $1;
 $106 = $0;
 $107 = ((($106)) + 40|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $105;
 $110 = $108;
 $111 = (($109) - ($110))|0;
 $112 = 1 ^ $111;
 $113 = (($104) + ($112)|0);
 HEAP8[$113>>0] = -1;
 STACKTOP = sp;return;
}
function _assign_reason($ps,$v,$reason) {
 $ps = $ps|0;
 $v = $v|0;
 $reason = $reason|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $reason;
 $3 = $2;
 $4 = $0;
 $5 = ((($4)) + 68|0);
 $6 = ($3|0)!=($5|0);
 if ($6) {
  $7 = $2;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = $7;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2967|0),(904|0),1463,(2987|0));
  // unreachable;
 }
}
function _tpush($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, $ttail2count = 0, $ttailcount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4>>>0)<($5>>>0);
 if (!($6)) {
  ___assert_fail((2880|0),(904|0),1443,(2936|0));
  // unreachable;
 }
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<1;
 $15 = (($10) + ($14)|0);
 $16 = ((($15)) + 1|0);
 $17 = ($7>>>0)<=($16>>>0);
 if (!($17)) {
  ___assert_fail((2880|0),(904|0),1443,(2936|0));
  // unreachable;
 }
 $18 = $0;
 $19 = ((($18)) + 128|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = ((($21)) + 132|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==($23|0);
 if (!($24)) {
  $118 = $1;
  $119 = $0;
  $120 = ((($119)) + 128|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ((($121)) + 4|0);
  HEAP32[$120>>2] = $122;
  HEAP32[$121>>2] = $118;
  STACKTOP = sp;return;
 }
 $25 = $0;
 $26 = ((($25)) + 140|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $0;
 $29 = ((($28)) + 124|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $27;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $ttail2count = $34;
 $35 = $0;
 $36 = ((($35)) + 136|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = ((($38)) + 124|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $37;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $ttailcount = $44;
 $45 = $0;
 $46 = ((($45)) + 132|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $0;
 $49 = ((($48)) + 124|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $47;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $old_num = $54;
 $55 = $old_num;
 $56 = ($55|0)!=(0);
 $57 = $old_num;
 $58 = $57<<1;
 $59 = $56 ? $58 : 1;
 $new_num = $59;
 $60 = $0;
 $61 = ((($60)) + 128|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $0;
 $64 = ((($63)) + 124|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $62;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $69 = (($68|0) / 4)&-1;
 $count = $69;
 $70 = $0;
 $71 = ((($70)) + 124|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $0;
 $74 = ((($73)) + 132|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($72>>>0)<=($75>>>0);
 if (!($76)) {
  ___assert_fail((2942|0),(904|0),1450,(2936|0));
  // unreachable;
 }
 $77 = $old_num;
 $78 = $77<<2;
 $old_size = $78;
 $79 = $new_num;
 $80 = $79<<2;
 $new_size = $80;
 $81 = $0;
 $82 = $0;
 $83 = ((($82)) + 124|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $old_size;
 $86 = $new_size;
 $87 = (_resize($81,$84,$85,$86)|0);
 $88 = $0;
 $89 = ((($88)) + 124|0);
 HEAP32[$89>>2] = $87;
 $90 = $0;
 $91 = ((($90)) + 124|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $count;
 $94 = (($92) + ($93<<2)|0);
 $95 = $0;
 $96 = ((($95)) + 128|0);
 HEAP32[$96>>2] = $94;
 $97 = $0;
 $98 = ((($97)) + 124|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $new_num;
 $101 = (($99) + ($100<<2)|0);
 $102 = $0;
 $103 = ((($102)) + 132|0);
 HEAP32[$103>>2] = $101;
 $104 = $0;
 $105 = ((($104)) + 124|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $ttailcount;
 $108 = (($106) + ($107<<2)|0);
 $109 = $0;
 $110 = ((($109)) + 136|0);
 HEAP32[$110>>2] = $108;
 $111 = $0;
 $112 = ((($111)) + 124|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = $ttail2count;
 $115 = (($113) + ($114<<2)|0);
 $116 = $0;
 $117 = ((($116)) + 140|0);
 HEAP32[$117>>2] = $115;
 $118 = $1;
 $119 = $0;
 $120 = ((($119)) + 128|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($121)) + 4|0);
 HEAP32[$120>>2] = $122;
 HEAP32[$121>>2] = $118;
 STACKTOP = sp;return;
}
function _htop($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 260|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 256|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ($3>>>0)>($7>>>0);
 if ($8) {
  $9 = $0;
  $10 = ((($9)) + 256|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  STACKTOP = sp;return ($13|0);
 } else {
  ___assert_fail((3071|0),(904|0),2507,(3101|0));
  // unreachable;
 }
 return (0)|0;
}
function _hpop($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $last = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $1;
 $3 = ((($2)) + 260|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 256|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ($4>>>0)>($8>>>0);
 if (!($9)) {
  ___assert_fail((3071|0),(904|0),2515,(3096|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 256|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $res = $14;
 $15 = $res;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -1073741824;
 HEAP32[$16>>2] = $18;
 $19 = $1;
 $20 = ((($19)) + 260|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + -4|0);
 HEAP32[$20>>2] = $22;
 $23 = $1;
 $24 = ((($23)) + 256|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $22;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 4)&-1;
 $end = $29;
 $30 = $end;
 $31 = ($30|0)==(1);
 if ($31) {
  $32 = $res;
  $0 = $32;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 } else {
  $33 = $end;
  $34 = $1;
  $35 = ((($34)) + 256|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($33<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $last = $38;
  $39 = $last;
  $40 = $last;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & -1073741824;
  $44 = $43 | 1;
  HEAP32[$41>>2] = $44;
  $45 = $1;
  $46 = ((($45)) + 256|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 4|0);
  HEAP32[$48>>2] = $39;
  $49 = $1;
  $50 = $last;
  _hdown($49,$50);
  $51 = $res;
  $0 = $51;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _decide_phase($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not_lit = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = 1 ^ $11;
 $13 = (($4) + ($12)|0);
 $not_lit = $13;
 $14 = $0;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = $0;
 $19 = ((($18)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $17;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = (($23|0) / 2)&-1;
 $25 = (($16) + (($24*12)|0)|0);
 $v = $25;
 $26 = $1;
 $27 = $0;
 $28 = ((($27)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $26;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 $35 = $34 ? -1 : 1;
 $36 = ($35|0)>(0);
 if (!($36)) {
  ___assert_fail((3001|0),(904|0),5072,(3018|0));
  // unreachable;
 }
 $37 = $v;
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38&65535) >>> 7;
 $40 = $39 & 1;
 $41 = $40&65535;
 $42 = ($41|0)!=(0);
 $43 = $v;
 $44 = HEAP16[$43>>1]|0;
 if ($42) {
  $45 = ($44&65535) >>> 8;
  $46 = $45 & 1;
  $47 = $46&65535;
  $48 = ($47|0)!=(0);
  if ($48) {
   $103 = $1;
   STACKTOP = sp;return ($103|0);
  }
  $49 = $not_lit;
  $1 = $49;
  $103 = $1;
  STACKTOP = sp;return ($103|0);
 }
 $50 = ($44&65535) >>> 3;
 $51 = $50 & 1;
 $52 = $51&65535;
 $53 = ($52|0)!=(0);
 if ($53) {
  $96 = $v;
  $97 = HEAP16[$96>>1]|0;
  $98 = ($97&65535) >>> 2;
  $99 = $98 & 1;
  $100 = $99&65535;
  $101 = ($100|0)!=(0);
  if ($101) {
   $103 = $1;
   STACKTOP = sp;return ($103|0);
  }
  $102 = $not_lit;
  $1 = $102;
  $103 = $1;
  STACKTOP = sp;return ($103|0);
 }
 $54 = $0;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  $103 = $1;
  STACKTOP = sp;return ($103|0);
 }
 $58 = $0;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(1);
 if ($61) {
  $62 = $not_lit;
  $1 = $62;
  $103 = $1;
  STACKTOP = sp;return ($103|0);
 }
 $63 = $0;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)==(3);
 $67 = $0;
 if ($66) {
  $68 = (_rrng($67,1,2)|0);
  $69 = ($68|0)!=(2);
  if (!($69)) {
   $103 = $1;
   STACKTOP = sp;return ($103|0);
  }
  $70 = $not_lit;
  $1 = $70;
  $103 = $1;
  STACKTOP = sp;return ($103|0);
 } else {
  $71 = ((($67)) + 52|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $1;
  $74 = $0;
  $75 = ((($74)) + 40|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $73;
  $78 = $76;
  $79 = (($77) - ($78))|0;
  $80 = (($72) + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $0;
  $83 = ((($82)) + 52|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $not_lit;
  $86 = $0;
  $87 = ((($86)) + 40|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $85;
  $90 = $88;
  $91 = (($89) - ($90))|0;
  $92 = (($84) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($81>>>0)<=($93>>>0);
  if (!($94)) {
   $103 = $1;
   STACKTOP = sp;return ($103|0);
  }
  $95 = $not_lit;
  $1 = $95;
  $103 = $1;
  STACKTOP = sp;return ($103|0);
 }
 return (0)|0;
}
function _rrng($ps,$low,$high) {
 $ps = $ps|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $elements = 0, $res = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $ps;
 $1 = $low;
 $2 = $high;
 $3 = $1;
 $4 = $2;
 $5 = ($3>>>0)<=($4>>>0);
 if (!($5)) {
  ___assert_fail((3031|0),(904|0),5055,(3043|0));
  // unreachable;
 }
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = (($8) + 1)|0;
 $elements = $9;
 $10 = $0;
 $11 = (_rng($10)|0);
 $12 = $tmp;
 $13 = $12;
 HEAP32[$13>>2] = $11;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = $elements;
 $17 = $tmp;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (___muldi3(($19|0),($22|0),($16|0),0)|0);
 $24 = tempRet0;
 $25 = $tmp;
 $26 = $25;
 HEAP32[$26>>2] = $23;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = $tmp;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $tmp;
 $36 = $35;
 HEAP32[$36>>2] = $34;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $39 = $1;
 $40 = $tmp;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (_i64Add(($42|0),($45|0),($39|0),0)|0);
 $47 = tempRet0;
 $48 = $tmp;
 $49 = $48;
 HEAP32[$49>>2] = $46;
 $50 = (($48) + 4)|0;
 $51 = $50;
 HEAP32[$51>>2] = $47;
 $52 = $tmp;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $res = $54;
 $58 = $1;
 $59 = $res;
 $60 = ($58>>>0)<=($59>>>0);
 if (!($60)) {
  ___assert_fail((3048|0),(904|0),5063,(3043|0));
  // unreachable;
 }
 $61 = $res;
 $62 = $2;
 $63 = ($61>>>0)<=($62>>>0);
 if ($63) {
  $64 = $res;
  STACKTOP = sp;return ($64|0);
 } else {
  ___assert_fail((3059|0),(904|0),5064,(3043|0));
  // unreachable;
 }
 return (0)|0;
}
function _rng($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 452|0);
 $3 = HEAP32[$2>>2]|0;
 $res = $3;
 $4 = $0;
 $5 = ((($4)) + 452|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, 1664525)|0;
 HEAP32[$5>>2] = $7;
 $8 = $0;
 $9 = ((($8)) + 452|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1013904223)|0;
 HEAP32[$9>>2] = $11;
 $12 = $res;
 STACKTOP = sp;return ($12|0);
}
function _gcd($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  ___assert_fail((3163|0),(904|0),5119,(3165|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___assert_fail((3169|0),(904|0),5120,(3165|0));
  // unreachable;
 }
 $6 = $0;
 $7 = $1;
 $8 = ($6>>>0)<($7>>>0);
 if ($8) {
  $9 = $0;
  $tmp = $9;
  $10 = $1;
  $0 = $10;
  $11 = $tmp;
  $1 = $11;
 }
 while(1) {
  $12 = $1;
  $13 = ($12|0)!=(0);
  $14 = $0;
  if (!($13)) {
   label = 11;
   break;
  }
  $15 = $1;
  $16 = ($14>>>0)>=($15>>>0);
  if (!($16)) {
   label = 9;
   break;
  }
  $17 = $1;
  $tmp = $17;
  $18 = $0;
  $19 = $1;
  $20 = (($18>>>0) % ($19>>>0))&-1;
  $1 = $20;
  $21 = $tmp;
  $0 = $21;
 }
 if ((label|0) == 9) {
  ___assert_fail((3171|0),(904|0),5129,(3165|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _use_var($ps,$v) {
 $ps = $ps|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3&65535) >>> 4;
 $5 = $4 & 1;
 $6 = $5&65535;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -17;
 $11 = $10 | 16;
 HEAP16[$8>>1] = $11;
 $12 = $0;
 $13 = ((($12)) + 724|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function _fanalyze($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $eol = 0, $lit = 0, $next = 0, $p = 0, $reason = 0, $start = 0.0, $u = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $0 = $ps;
 $1 = (+_picosat_time_stamp());
 $start = $1;
 $2 = $0;
 $3 = ((($2)) + 248|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((1216|0),(904|0),3373,(3231|0));
  // unreachable;
 }
 $6 = $0;
 $7 = ((($6)) + 248|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)==(-1);
 if (!($11)) {
  ___assert_fail((3240|0),(904|0),3374,(3231|0));
  // unreachable;
 }
 $12 = $0;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 248|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = ((($18)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $17;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = (($23|0) / 2)&-1;
 $25 = (($14) + (($24*12)|0)|0);
 $v = $25;
 $26 = $0;
 $27 = $v;
 $28 = (_var2reason($26,$27)|0);
 $reason = $28;
 $29 = $reason;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $reason;
 $32 = $0;
 $33 = ((($32)) + 68|0);
 $34 = ($31|0)==($33|0);
 if ($34) {
  $35 = $0;
  _resetimpl($35);
 }
 $36 = $reason;
 $37 = (_end_of_lits($36)|0);
 $eol = $37;
 $38 = $reason;
 $39 = ((($38)) + 16|0);
 $p = $39;
 while(1) {
  $40 = $p;
  $41 = $eol;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $43 = $p;
  $44 = HEAP32[$43>>2]|0;
  $lit = $44;
  $45 = $0;
  $46 = ((($45)) + 44|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $lit;
  $49 = $0;
  $50 = ((($49)) + 40|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $48;
  $53 = $51;
  $54 = (($52) - ($53))|0;
  $55 = (($54|0) / 2)&-1;
  $56 = (($47) + (($55*12)|0)|0);
  $u = $56;
  $57 = $u;
  $58 = $v;
  $59 = ($57|0)==($58|0);
  if (!($59)) {
   $60 = $u;
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)!=(0|0);
   if ($63) {
    break;
   }
  }
  $64 = $p;
  $65 = ((($64)) + 4|0);
  $p = $65;
 }
 $66 = $p;
 $67 = $eol;
 $68 = ($66|0)==($67|0);
 if ($68) {
  STACKTOP = sp;return;
 }
 $69 = $0;
 $70 = ((($69)) + 340|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $0;
 $73 = ((($72)) + 336|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($71|0)==($74|0);
 if (!($75)) {
  ___assert_fail((3276|0),(904|0),3397,(3231|0));
  // unreachable;
 }
 $76 = $0;
 $77 = ((($76)) + 352|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $0;
 $80 = ((($79)) + 348|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($78|0)==($81|0);
 if (!($82)) {
  ___assert_fail((2294|0),(904|0),3398,(3231|0));
  // unreachable;
 }
 $83 = $0;
 $84 = ((($83)) + 376|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $0;
 $87 = ((($86)) + 372|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($85|0)==($88|0);
 if (!($89)) {
  ___assert_fail((1362|0),(904|0),3399,(3231|0));
  // unreachable;
 }
 $next = 0;
 $90 = $0;
 $91 = $v;
 _mark_var($90,$91);
 $92 = $0;
 $93 = $0;
 $94 = ((($93)) + 40|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $0;
 $97 = ((($96)) + 248|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $0;
 $100 = ((($99)) + 40|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $98;
 $103 = $101;
 $104 = (($102) - ($103))|0;
 $105 = 1 ^ $104;
 $106 = (($95) + ($105)|0);
 _add_lit($92,$106);
 while(1) {
  $107 = $next;
  $108 = (($107) + 1)|0;
  $next = $108;
  $109 = $0;
  $110 = ((($109)) + 348|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($107<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $v = $113;
  $114 = $0;
  $115 = $v;
  _use_var($114,$115);
  $116 = $v;
  $117 = ((($116)) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($118|0)!=(0|0);
  $120 = $0;
  L34: do {
   if ($119) {
    $121 = $v;
    $122 = (_var2reason($120,$121)|0);
    $reason = $122;
    $123 = $reason;
    $124 = $0;
    $125 = ((($124)) + 68|0);
    $126 = ($123|0)==($125|0);
    if ($126) {
     $127 = $0;
     _resetimpl($127);
    }
    $128 = $0;
    $129 = $reason;
    _add_antecedent($128,$129);
    $130 = $reason;
    $131 = (_end_of_lits($130)|0);
    $eol = $131;
    $132 = $reason;
    $133 = ((($132)) + 16|0);
    $p = $133;
    while(1) {
     $134 = $p;
     $135 = $eol;
     $136 = ($134|0)!=($135|0);
     if (!($136)) {
      break L34;
     }
     $137 = $p;
     $138 = HEAP32[$137>>2]|0;
     $lit = $138;
     $139 = $0;
     $140 = ((($139)) + 44|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $lit;
     $143 = $0;
     $144 = ((($143)) + 40|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $142;
     $147 = $145;
     $148 = (($146) - ($147))|0;
     $149 = (($148|0) / 2)&-1;
     $150 = (($141) + (($149*12)|0)|0);
     $u = $150;
     $151 = $u;
     $152 = $v;
     $153 = ($151|0)==($152|0);
     if (!($153)) {
      $154 = $u;
      $155 = HEAP16[$154>>1]|0;
      $156 = $155 & 1;
      $157 = $156&65535;
      $158 = ($157|0)!=(0);
      if (!($158)) {
       $159 = $0;
       $160 = $u;
       _mark_var($159,$160);
      }
     }
     $161 = $p;
     $162 = ((($161)) + 4|0);
     $p = $162;
    }
   } else {
    $163 = ((($120)) + 40|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $v;
    $166 = $0;
    $167 = ((($166)) + 44|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $165;
    $170 = $168;
    $171 = (($169) - ($170))|0;
    $172 = (($171|0) / 12)&-1;
    $173 = $172<<1;
    $174 = (($164) + ($173)|0);
    $lit = $174;
    $175 = $lit;
    $176 = HEAP8[$175>>0]|0;
    $177 = $176 << 24 >> 24;
    $178 = ($177|0)==(1);
    if ($178) {
     $179 = $0;
     $180 = ((($179)) + 40|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $lit;
     $183 = $0;
     $184 = ((($183)) + 40|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = $182;
     $187 = $185;
     $188 = (($186) - ($187))|0;
     $189 = 1 ^ $188;
     $190 = (($181) + ($189)|0);
     $lit = $190;
    }
    $191 = $0;
    $192 = $lit;
    _add_lit($191,$192);
   }
  } while(0);
  $193 = $0;
  $194 = ((($193)) + 348|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $next;
  $197 = (($195) + ($196<<2)|0);
  $198 = $0;
  $199 = ((($198)) + 352|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ($197>>>0)<($200>>>0);
  if (!($201)) {
   break;
  }
 }
 $202 = $0;
 $203 = (_add_simplified_clause($202,1)|0);
 $c = $203;
 $204 = $0;
 $205 = ((($204)) + 44|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $0;
 $208 = ((($207)) + 248|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = $0;
 $211 = ((($210)) + 40|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = $209;
 $214 = $212;
 $215 = (($213) - ($214))|0;
 $216 = (($215|0) / 2)&-1;
 $217 = (($206) + (($216*12)|0)|0);
 $v = $217;
 $218 = $v;
 $219 = ((($218)) + 8|0);
 $220 = HEAP32[$219>>2]|0;
 $reason = $220;
 $221 = $reason;
 $222 = $221;
 $223 = 1 & $222;
 $224 = ($223|0)!=(0);
 do {
  if (!($224)) {
   $225 = $reason;
   $226 = ((($225)) + 4|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $227 >>> 2;
   $229 = $228 & 1;
   $230 = ($229|0)!=(0);
   if (!($230)) {
    ___assert_fail((3299|0),(904|0),3440,(3231|0));
    // unreachable;
   }
   $231 = $reason;
   $232 = ((($231)) + 4|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = $233 & -5;
   HEAP32[$232>>2] = $234;
   $235 = $reason;
   $236 = ((($235)) + 4|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = $237 >>> 1;
   $239 = $238 & 1;
   $240 = ($239|0)!=(0);
   if ($240) {
    $241 = $reason;
    $242 = HEAP32[$241>>2]|0;
    $243 = ($242>>>0)>(2);
    if ($243) {
     $244 = $0;
     $245 = ((($244)) + 584|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = ($246>>>0)>(0);
     if ($247) {
      $248 = $0;
      $249 = ((($248)) + 584|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = (($250) + -1)|0;
      HEAP32[$249>>2] = $251;
      break;
     } else {
      ___assert_fail((3314|0),(904|0),3443,(3231|0));
      // unreachable;
     }
    }
   }
  }
 } while(0);
 $252 = $c;
 $253 = $0;
 $254 = ((($253)) + 68|0);
 $255 = ($252|0)==($254|0);
 do {
  if ($255) {
   $256 = $0;
   $257 = $0;
   $258 = ((($257)) + 40|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = $0;
   $261 = ((($260)) + 248|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $0;
   $264 = ((($263)) + 40|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $262;
   $267 = $265;
   $268 = (($266) - ($267))|0;
   $269 = 1 ^ $268;
   $270 = (($259) + ($269)|0);
   $271 = (_impl2reason($256,$270)|0);
   $c = $271;
  } else {
   $272 = $c;
   $273 = ((($272)) + 4|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = $274 >>> 1;
   $276 = $275 & 1;
   $277 = ($276|0)!=(0);
   if (!($277)) {
    ___assert_fail((1853|0),(904|0),3454,(3231|0));
    // unreachable;
   }
   $278 = $c;
   $279 = ((($278)) + 4|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $280 >>> 2;
   $282 = $281 & 1;
   $283 = ($282|0)!=(0);
   if ($283) {
    ___assert_fail((3330|0),(904|0),3455,(3231|0));
    // unreachable;
   }
   $284 = $c;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -5;
   $288 = $287 | 4;
   HEAP32[$285>>2] = $288;
   $289 = $c;
   $290 = HEAP32[$289>>2]|0;
   $291 = ($290>>>0)>(2);
   if ($291) {
    $292 = $0;
    $293 = ((($292)) + 584|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = (($294) + 1)|0;
    HEAP32[$293>>2] = $295;
    $296 = $0;
    $297 = ((($296)) + 584|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = ($298>>>0)>(0);
    if ($299) {
     break;
    } else {
     ___assert_fail((3314|0),(904|0),3459,(3231|0));
     // unreachable;
    }
   }
  }
 } while(0);
 $300 = $c;
 $301 = $v;
 $302 = ((($301)) + 8|0);
 HEAP32[$302>>2] = $300;
 while(1) {
  $303 = $0;
  $304 = ((($303)) + 352|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = $0;
  $307 = ((($306)) + 348|0);
  $308 = HEAP32[$307>>2]|0;
  $309 = ($305>>>0)>($308>>>0);
  $310 = $0;
  if (!($309)) {
   break;
  }
  $311 = ((($310)) + 352|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ((($312)) + -4|0);
  HEAP32[$311>>2] = $313;
  $314 = HEAP32[$313>>2]|0;
  $315 = HEAP16[$314>>1]|0;
  $316 = $315 & -2;
  HEAP16[$314>>1] = $316;
 }
 $317 = ((($310)) + 20|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = ($318|0)!=(0);
 if (!($319)) {
  STACKTOP = sp;return;
 }
 $320 = $0;
 $321 = ((($320)) + 12|0);
 $322 = HEAP32[$321>>2]|0;
 $323 = $0;
 $324 = ((($323)) + 16|0);
 $325 = HEAP32[$324>>2]|0;
 $326 = (+_picosat_time_stamp());
 $327 = $start;
 $328 = $326 - $327;
 HEAP32[$vararg_buffer>>2] = $325;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $328;
 (_fprintf($322,3341,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _add_antecedent($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((4350|0),(904|0),1665,(4352|0));
  // unreachable;
 }
 $4 = $1;
 $5 = $4;
 $6 = 1 & $5;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 68|0);
 $11 = ($8|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 376|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 380|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)==($17|0);
 do {
  if ($18) {
   $19 = $0;
   $20 = ((($19)) + 380|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $0;
   $23 = ((($22)) + 372|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21;
   $26 = $24;
   $27 = (($25) - ($26))|0;
   $28 = (($27|0) / 4)&-1;
   $old_num = $28;
   $29 = $old_num;
   $30 = ($29|0)!=(0);
   $31 = $old_num;
   $32 = $31<<1;
   $33 = $30 ? $32 : 1;
   $new_num = $33;
   $34 = $0;
   $35 = ((($34)) + 376|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $0;
   $38 = ((($37)) + 372|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $36;
   $41 = $39;
   $42 = (($40) - ($41))|0;
   $43 = (($42|0) / 4)&-1;
   $count = $43;
   $44 = $0;
   $45 = ((($44)) + 372|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $0;
   $48 = ((($47)) + 380|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($46>>>0)<=($49>>>0);
   if ($50) {
    $51 = $old_num;
    $52 = $51<<2;
    $old_size = $52;
    $53 = $new_num;
    $54 = $53<<2;
    $new_size = $54;
    $55 = $0;
    $56 = $0;
    $57 = ((($56)) + 372|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $old_size;
    $60 = $new_size;
    $61 = (_resize($55,$58,$59,$60)|0);
    $62 = $0;
    $63 = ((($62)) + 372|0);
    HEAP32[$63>>2] = $61;
    $64 = $0;
    $65 = ((($64)) + 372|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $count;
    $68 = (($66) + ($67<<2)|0);
    $69 = $0;
    $70 = ((($69)) + 376|0);
    HEAP32[$70>>2] = $68;
    $71 = $0;
    $72 = ((($71)) + 372|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $new_num;
    $75 = (($73) + ($74<<2)|0);
    $76 = $0;
    $77 = ((($76)) + 380|0);
    HEAP32[$77>>2] = $75;
    break;
   } else {
    ___assert_fail((1413|0),(904|0),1677,(4352|0));
    // unreachable;
   }
  }
 } while(0);
 $78 = $0;
 $79 = ((($78)) + 376|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $0;
 $82 = ((($81)) + 380|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($80>>>0)<($83>>>0);
 if (!($84)) {
  ___assert_fail((1453|0),(904|0),1679,(4352|0));
  // unreachable;
 }
 $85 = $1;
 $86 = $0;
 $87 = ((($86)) + 376|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($88)) + 4|0);
 HEAP32[$87>>2] = $89;
 HEAP32[$88>>2] = $85;
 STACKTOP = sp;return;
}
function _add_simplified_clause($ps,$learned) {
 $ps = $ps|0;
 $learned = $learned|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $99 = 0, $count = 0, $count13 = 0, $count18 = 0, $count23 = 0, $count3 = 0, $count8 = 0, $count_resolved = 0, $end = 0, $glue = 0, $lit = 0, $litlevel = 0, $new_num = 0, $new_num12 = 0, $new_num17 = 0, $new_num2 = 0, $new_num22 = 0;
 var $new_num7 = 0, $new_size = 0, $new_size10 = 0, $new_size15 = 0, $new_size20 = 0, $new_size25 = 0, $new_size5 = 0, $num_false = 0, $num_true = 0, $num_undef = 0, $old_num = 0, $old_num1 = 0, $old_num11 = 0, $old_num16 = 0, $old_num21 = 0, $old_num6 = 0, $old_size = 0, $old_size14 = 0, $old_size19 = 0, $old_size24 = 0;
 var $old_size4 = 0, $old_size9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond7$not = 0, $or$cond9 = 0, $other = 0, $p = 0, $q = 0, $reason = 0, $reentered = 0, $res = 0, $size = 0, $v = 0, $val = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $ps;
 $1 = $learned;
 $reentered = 0;
 L1: while(1) {
  $2 = $0;
  $3 = ((($2)) + 340|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $0;
  $6 = ((($5)) + 336|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $4;
  $9 = $7;
  $10 = (($8) - ($9))|0;
  $11 = (($10|0) / 4)&-1;
  $size = $11;
  $12 = $0;
  $13 = $1;
  _add_resolved($12,$13);
  $14 = $1;
  $15 = ($14|0)!=(0);
  $16 = $0;
  if ($15) {
   $17 = ((($16)) + 708|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 1)|0;
   HEAP32[$17>>2] = $19;
   $20 = $size;
   $21 = $0;
   $22 = ((($21)) + 728|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20))|0;
   HEAP32[$22>>2] = $24;
   $25 = $size;
   $26 = ($25>>>0)>(2);
   if ($26) {
    $27 = $0;
    $28 = ((($27)) + 716|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 1)|0;
    HEAP32[$28>>2] = $30;
    $31 = $0;
    $32 = ((($31)) + 692|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
    $35 = $size;
    $36 = $0;
    $37 = ((($36)) + 700|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + ($35))|0;
    HEAP32[$37>>2] = $39;
   }
  } else {
   $40 = ((($16)) + 704|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$40>>2] = $42;
   $43 = $size;
   $44 = ($43>>>0)>(2);
   if ($44) {
    $45 = $0;
    $46 = ((($45)) + 712|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$46>>2] = $48;
    $49 = $0;
    $50 = ((($49)) + 688|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$50>>2] = $52;
    $53 = $size;
    $54 = $0;
    $55 = ((($54)) + 696|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + ($53))|0;
    HEAP32[$55>>2] = $57;
   }
  }
  $58 = $0;
  $59 = ((($58)) + 720|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 1)|0;
  HEAP32[$59>>2] = $61;
  $62 = $0;
  $63 = ((($62)) + 720|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $0;
  $66 = ((($65)) + 708|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $0;
  $69 = ((($68)) + 704|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67) + ($70))|0;
  $72 = ($64|0)==($71|0);
  if (!($72)) {
   label = 8;
   break;
  }
  $73 = $size;
  $74 = ($73|0)==(2);
  $75 = $0;
  $76 = $0;
  $77 = ((($76)) + 336|0);
  $78 = HEAP32[$77>>2]|0;
  if ($74) {
   $79 = HEAP32[$78>>2]|0;
   $80 = $0;
   $81 = ((($80)) + 336|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (_setimpl($75,$79,$84)|0);
   $res = $85;
  } else {
   $86 = $size;
   _sortlits($75,$78,$86);
   $87 = $1;
   $88 = ($87|0)!=(0);
   $89 = $0;
   if ($88) {
    $90 = ((($89)) + 284|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $0;
    $93 = ((($92)) + 288|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($91|0)==($94|0);
    if ($95) {
     $96 = $0;
     $97 = ((($96)) + 288|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $0;
     $100 = ((($99)) + 280|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $98;
     $103 = $101;
     $104 = (($102) - ($103))|0;
     $105 = (($104|0) / 4)&-1;
     $old_num = $105;
     $106 = $old_num;
     $107 = ($106|0)!=(0);
     $108 = $old_num;
     $109 = $108<<1;
     $110 = $107 ? $109 : 1;
     $new_num = $110;
     $111 = $0;
     $112 = ((($111)) + 284|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $0;
     $115 = ((($114)) + 280|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $113;
     $118 = $116;
     $119 = (($117) - ($118))|0;
     $120 = (($119|0) / 4)&-1;
     $count = $120;
     $121 = $0;
     $122 = ((($121)) + 280|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $0;
     $125 = ((($124)) + 288|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($123>>>0)<=($126>>>0);
     if (!($127)) {
      label = 14;
      break;
     }
     $128 = $old_num;
     $129 = $128<<2;
     $old_size = $129;
     $130 = $new_num;
     $131 = $130<<2;
     $new_size = $131;
     $132 = $0;
     $133 = $0;
     $134 = ((($133)) + 280|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $old_size;
     $137 = $new_size;
     $138 = (_resize($132,$135,$136,$137)|0);
     $139 = $0;
     $140 = ((($139)) + 280|0);
     HEAP32[$140>>2] = $138;
     $141 = $0;
     $142 = ((($141)) + 280|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $count;
     $145 = (($143) + ($144<<2)|0);
     $146 = $0;
     $147 = ((($146)) + 284|0);
     HEAP32[$147>>2] = $145;
     $148 = $0;
     $149 = ((($148)) + 280|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $new_num;
     $152 = (($150) + ($151<<2)|0);
     $153 = $0;
     $154 = ((($153)) + 288|0);
     HEAP32[$154>>2] = $152;
     $155 = $0;
     $156 = ((($155)) + 288|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $0;
     $159 = ((($158)) + 268|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($157|0)==($160|0);
     if ($161) {
      $162 = $0;
      $163 = ((($162)) + 288|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $0;
      $166 = ((($165)) + 280|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $164;
      $169 = $167;
      $170 = (($168) - ($169))|0;
      $171 = (($170|0) / 4)&-1;
      $old_num1 = $171;
      $172 = $old_num1;
      $173 = ($172|0)!=(0);
      $174 = $old_num1;
      $175 = $174<<1;
      $176 = $173 ? $175 : 1;
      $new_num2 = $176;
      $177 = $0;
      $178 = ((($177)) + 284|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $0;
      $181 = ((($180)) + 280|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $179;
      $184 = $182;
      $185 = (($183) - ($184))|0;
      $186 = (($185|0) / 4)&-1;
      $count3 = $186;
      $187 = $0;
      $188 = ((($187)) + 280|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $0;
      $191 = ((($190)) + 288|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = ($189>>>0)<=($192>>>0);
      if (!($193)) {
       label = 17;
       break;
      }
      $194 = $old_num1;
      $195 = $194<<2;
      $old_size4 = $195;
      $196 = $new_num2;
      $197 = $196<<2;
      $new_size5 = $197;
      $198 = $0;
      $199 = $0;
      $200 = ((($199)) + 280|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = $old_size4;
      $203 = $new_size5;
      $204 = (_resize($198,$201,$202,$203)|0);
      $205 = $0;
      $206 = ((($205)) + 280|0);
      HEAP32[$206>>2] = $204;
      $207 = $0;
      $208 = ((($207)) + 280|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $count3;
      $211 = (($209) + ($210<<2)|0);
      $212 = $0;
      $213 = ((($212)) + 284|0);
      HEAP32[$213>>2] = $211;
      $214 = $0;
      $215 = ((($214)) + 280|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = $new_num2;
      $218 = (($216) + ($217<<2)|0);
      $219 = $0;
      $220 = ((($219)) + 288|0);
      HEAP32[$220>>2] = $218;
     }
    }
   } else {
    $221 = ((($89)) + 272|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $0;
    $224 = ((($223)) + 276|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = ($222|0)==($225|0);
    if ($226) {
     $227 = $0;
     $228 = ((($227)) + 276|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = $0;
     $231 = ((($230)) + 268|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = $229;
     $234 = $232;
     $235 = (($233) - ($234))|0;
     $236 = (($235|0) / 4)&-1;
     $old_num6 = $236;
     $237 = $old_num6;
     $238 = ($237|0)!=(0);
     $239 = $old_num6;
     $240 = $239<<1;
     $241 = $238 ? $240 : 1;
     $new_num7 = $241;
     $242 = $0;
     $243 = ((($242)) + 272|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = $0;
     $246 = ((($245)) + 268|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = $244;
     $249 = $247;
     $250 = (($248) - ($249))|0;
     $251 = (($250|0) / 4)&-1;
     $count8 = $251;
     $252 = $0;
     $253 = ((($252)) + 268|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = $0;
     $256 = ((($255)) + 276|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ($254>>>0)<=($257>>>0);
     if (!($258)) {
      label = 21;
      break;
     }
     $259 = $old_num6;
     $260 = $259<<2;
     $old_size9 = $260;
     $261 = $new_num7;
     $262 = $261<<2;
     $new_size10 = $262;
     $263 = $0;
     $264 = $0;
     $265 = ((($264)) + 268|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = $old_size9;
     $268 = $new_size10;
     $269 = (_resize($263,$266,$267,$268)|0);
     $270 = $0;
     $271 = ((($270)) + 268|0);
     HEAP32[$271>>2] = $269;
     $272 = $0;
     $273 = ((($272)) + 268|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = $count8;
     $276 = (($274) + ($275<<2)|0);
     $277 = $0;
     $278 = ((($277)) + 272|0);
     HEAP32[$278>>2] = $276;
     $279 = $0;
     $280 = ((($279)) + 268|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $new_num7;
     $283 = (($281) + ($282<<2)|0);
     $284 = $0;
     $285 = ((($284)) + 276|0);
     HEAP32[$285>>2] = $283;
     $286 = $0;
     $287 = ((($286)) + 288|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $0;
     $290 = ((($289)) + 268|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ($288|0)==($291|0);
     if ($292) {
      $293 = $0;
      $294 = ((($293)) + 276|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = $0;
      $297 = ((($296)) + 268|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = $295;
      $300 = $298;
      $301 = (($299) - ($300))|0;
      $302 = (($301|0) / 4)&-1;
      $old_num11 = $302;
      $303 = $old_num11;
      $304 = ($303|0)!=(0);
      $305 = $old_num11;
      $306 = $305<<1;
      $307 = $304 ? $306 : 1;
      $new_num12 = $307;
      $308 = $0;
      $309 = ((($308)) + 272|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = $0;
      $312 = ((($311)) + 268|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = $310;
      $315 = $313;
      $316 = (($314) - ($315))|0;
      $317 = (($316|0) / 4)&-1;
      $count13 = $317;
      $318 = $0;
      $319 = ((($318)) + 268|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = $0;
      $322 = ((($321)) + 276|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = ($320>>>0)<=($323>>>0);
      if (!($324)) {
       label = 24;
       break;
      }
      $325 = $old_num11;
      $326 = $325<<2;
      $old_size14 = $326;
      $327 = $new_num12;
      $328 = $327<<2;
      $new_size15 = $328;
      $329 = $0;
      $330 = $0;
      $331 = ((($330)) + 268|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = $old_size14;
      $334 = $new_size15;
      $335 = (_resize($329,$332,$333,$334)|0);
      $336 = $0;
      $337 = ((($336)) + 268|0);
      HEAP32[$337>>2] = $335;
      $338 = $0;
      $339 = ((($338)) + 268|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = $count13;
      $342 = (($340) + ($341<<2)|0);
      $343 = $0;
      $344 = ((($343)) + 272|0);
      HEAP32[$344>>2] = $342;
      $345 = $0;
      $346 = ((($345)) + 268|0);
      $347 = HEAP32[$346>>2]|0;
      $348 = $new_num12;
      $349 = (($347) + ($348<<2)|0);
      $350 = $0;
      $351 = ((($350)) + 276|0);
      HEAP32[$351>>2] = $349;
     }
    }
   }
   $352 = $0;
   $353 = ((($352)) + 288|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = $0;
   $356 = ((($355)) + 268|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = ($354|0)!=($357|0);
   if (!($358)) {
    label = 27;
    break;
   }
   $359 = $0;
   $360 = $size;
   $361 = $1;
   $362 = (_new_clause($359,$360,$361)|0);
   $res = $362;
   $glue = 0;
   $363 = $1;
   $364 = ($363|0)!=(0);
   L26: do {
    if ($364) {
     $365 = $0;
     $366 = ((($365)) + 400|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = $0;
     $369 = ((($368)) + 396|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($367|0)==($370|0);
     if (!($371)) {
      label = 30;
      break L1;
     }
     $372 = $0;
     $373 = ((($372)) + 336|0);
     $374 = HEAP32[$373>>2]|0;
     $p = $374;
     while(1) {
      $375 = $p;
      $376 = $0;
      $377 = ((($376)) + 340|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = ($375>>>0)<($378>>>0);
      if (!($379)) {
       break;
      }
      $380 = $p;
      $381 = HEAP32[$380>>2]|0;
      $lit = $381;
      $382 = $lit;
      $383 = HEAP8[$382>>0]|0;
      $384 = ($383<<24>>24)!=(0);
      if ($384) {
       $385 = $0;
       $386 = ((($385)) + 44|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = $lit;
       $389 = $0;
       $390 = ((($389)) + 40|0);
       $391 = HEAP32[$390>>2]|0;
       $392 = $388;
       $393 = $391;
       $394 = (($392) - ($393))|0;
       $395 = (($394|0) / 2)&-1;
       $396 = (($387) + (($395*12)|0)|0);
       $397 = ((($396)) + 4|0);
       $398 = HEAP32[$397>>2]|0;
       $litlevel = $398;
       $399 = $litlevel;
       $400 = $0;
       $401 = ((($400)) + 28|0);
       $402 = HEAP32[$401>>2]|0;
       $403 = ($399>>>0)<=($402>>>0);
       if (!($403)) {
        label = 35;
        break L1;
       }
       while(1) {
        $404 = $0;
        $405 = ((($404)) + 384|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = $litlevel;
        $408 = (($406) + ($407)|0);
        $409 = $0;
        $410 = ((($409)) + 388|0);
        $411 = HEAP32[$410>>2]|0;
        $412 = ($408>>>0)>=($411>>>0);
        if (!($412)) {
         break;
        }
        $413 = $0;
        $414 = ((($413)) + 388|0);
        $415 = HEAP32[$414>>2]|0;
        $416 = $0;
        $417 = ((($416)) + 392|0);
        $418 = HEAP32[$417>>2]|0;
        $419 = ($415>>>0)>=($418>>>0);
        if ($419) {
         $420 = $0;
         $421 = ((($420)) + 392|0);
         $422 = HEAP32[$421>>2]|0;
         $423 = $0;
         $424 = ((($423)) + 384|0);
         $425 = HEAP32[$424>>2]|0;
         $426 = $422;
         $427 = $425;
         $428 = (($426) - ($427))|0;
         $old_num16 = $428;
         $429 = $old_num16;
         $430 = ($429|0)!=(0);
         $431 = $old_num16;
         $432 = $431<<1;
         $433 = $430 ? $432 : 1;
         $new_num17 = $433;
         $434 = $0;
         $435 = ((($434)) + 388|0);
         $436 = HEAP32[$435>>2]|0;
         $437 = $0;
         $438 = ((($437)) + 384|0);
         $439 = HEAP32[$438>>2]|0;
         $440 = $436;
         $441 = $439;
         $442 = (($440) - ($441))|0;
         $count18 = $442;
         $443 = $0;
         $444 = ((($443)) + 384|0);
         $445 = HEAP32[$444>>2]|0;
         $446 = $0;
         $447 = ((($446)) + 392|0);
         $448 = HEAP32[$447>>2]|0;
         $449 = ($445>>>0)<=($448>>>0);
         if (!($449)) {
          label = 40;
          break L1;
         }
         $450 = $old_num16;
         $451 = $450;
         $old_size19 = $451;
         $452 = $new_num17;
         $453 = $452;
         $new_size20 = $453;
         $454 = $0;
         $455 = $0;
         $456 = ((($455)) + 384|0);
         $457 = HEAP32[$456>>2]|0;
         $458 = $old_size19;
         $459 = $new_size20;
         $460 = (_resize($454,$457,$458,$459)|0);
         $461 = $0;
         $462 = ((($461)) + 384|0);
         HEAP32[$462>>2] = $460;
         $463 = $0;
         $464 = ((($463)) + 384|0);
         $465 = HEAP32[$464>>2]|0;
         $466 = $count18;
         $467 = (($465) + ($466)|0);
         $468 = $0;
         $469 = ((($468)) + 388|0);
         HEAP32[$469>>2] = $467;
         $470 = $0;
         $471 = ((($470)) + 384|0);
         $472 = HEAP32[$471>>2]|0;
         $473 = $new_num17;
         $474 = (($472) + ($473)|0);
         $475 = $0;
         $476 = ((($475)) + 392|0);
         HEAP32[$476>>2] = $474;
        }
        $477 = $0;
        $478 = ((($477)) + 388|0);
        $479 = HEAP32[$478>>2]|0;
        $480 = $0;
        $481 = ((($480)) + 392|0);
        $482 = HEAP32[$481>>2]|0;
        $483 = ($479>>>0)<($482>>>0);
        if (!($483)) {
         label = 43;
         break L1;
        }
        $484 = $0;
        $485 = ((($484)) + 388|0);
        $486 = HEAP32[$485>>2]|0;
        $487 = ((($486)) + 1|0);
        HEAP32[$485>>2] = $487;
        HEAP8[$486>>0] = 0;
       }
       $488 = $litlevel;
       $489 = $0;
       $490 = ((($489)) + 384|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($491) + ($488)|0);
       $493 = HEAP8[$492>>0]|0;
       $494 = ($493<<24>>24)!=(0);
       if (!($494)) {
        $495 = $0;
        $496 = ((($495)) + 400|0);
        $497 = HEAP32[$496>>2]|0;
        $498 = $0;
        $499 = ((($498)) + 404|0);
        $500 = HEAP32[$499>>2]|0;
        $501 = ($497>>>0)>=($500>>>0);
        if ($501) {
         $502 = $0;
         $503 = ((($502)) + 404|0);
         $504 = HEAP32[$503>>2]|0;
         $505 = $0;
         $506 = ((($505)) + 396|0);
         $507 = HEAP32[$506>>2]|0;
         $508 = $504;
         $509 = $507;
         $510 = (($508) - ($509))|0;
         $511 = (($510|0) / 4)&-1;
         $old_num21 = $511;
         $512 = $old_num21;
         $513 = ($512|0)!=(0);
         $514 = $old_num21;
         $515 = $514<<1;
         $516 = $513 ? $515 : 1;
         $new_num22 = $516;
         $517 = $0;
         $518 = ((($517)) + 400|0);
         $519 = HEAP32[$518>>2]|0;
         $520 = $0;
         $521 = ((($520)) + 396|0);
         $522 = HEAP32[$521>>2]|0;
         $523 = $519;
         $524 = $522;
         $525 = (($523) - ($524))|0;
         $526 = (($525|0) / 4)&-1;
         $count23 = $526;
         $527 = $0;
         $528 = ((($527)) + 396|0);
         $529 = HEAP32[$528>>2]|0;
         $530 = $0;
         $531 = ((($530)) + 404|0);
         $532 = HEAP32[$531>>2]|0;
         $533 = ($529>>>0)<=($532>>>0);
         if (!($533)) {
          label = 48;
          break L1;
         }
         $534 = $old_num21;
         $535 = $534<<2;
         $old_size24 = $535;
         $536 = $new_num22;
         $537 = $536<<2;
         $new_size25 = $537;
         $538 = $0;
         $539 = $0;
         $540 = ((($539)) + 396|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = $old_size24;
         $543 = $new_size25;
         $544 = (_resize($538,$541,$542,$543)|0);
         $545 = $0;
         $546 = ((($545)) + 396|0);
         HEAP32[$546>>2] = $544;
         $547 = $0;
         $548 = ((($547)) + 396|0);
         $549 = HEAP32[$548>>2]|0;
         $550 = $count23;
         $551 = (($549) + ($550<<2)|0);
         $552 = $0;
         $553 = ((($552)) + 400|0);
         HEAP32[$553>>2] = $551;
         $554 = $0;
         $555 = ((($554)) + 396|0);
         $556 = HEAP32[$555>>2]|0;
         $557 = $new_num22;
         $558 = (($556) + ($557<<2)|0);
         $559 = $0;
         $560 = ((($559)) + 404|0);
         HEAP32[$560>>2] = $558;
        }
        $561 = $0;
        $562 = ((($561)) + 400|0);
        $563 = HEAP32[$562>>2]|0;
        $564 = $0;
        $565 = ((($564)) + 404|0);
        $566 = HEAP32[$565>>2]|0;
        $567 = ($563>>>0)<($566>>>0);
        if (!($567)) {
         label = 51;
         break L1;
        }
        $568 = $litlevel;
        $569 = $0;
        $570 = ((($569)) + 400|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = ((($571)) + 4|0);
        HEAP32[$570>>2] = $572;
        HEAP32[$571>>2] = $568;
        $573 = $litlevel;
        $574 = $0;
        $575 = ((($574)) + 384|0);
        $576 = HEAP32[$575>>2]|0;
        $577 = (($576) + ($573)|0);
        HEAP8[$577>>0] = 1;
        $578 = $glue;
        $579 = (($578) + 1)|0;
        $glue = $579;
       }
      } else {
       $580 = $glue;
       $581 = (($580) + 1)|0;
       $glue = $581;
      }
      $582 = $p;
      $583 = ((($582)) + 4|0);
      $p = $583;
     }
     while(1) {
      $584 = $0;
      $585 = ((($584)) + 400|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = $0;
      $588 = ((($587)) + 396|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = ($586>>>0)>($589>>>0);
      if (!($590)) {
       break L26;
      }
      $591 = $0;
      $592 = ((($591)) + 400|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = ((($593)) + -4|0);
      HEAP32[$592>>2] = $594;
      $595 = HEAP32[$594>>2]|0;
      $litlevel = $595;
      $596 = $0;
      $597 = ((($596)) + 384|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = $litlevel;
      $600 = (($598) + ($599)|0);
      $601 = $0;
      $602 = ((($601)) + 388|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = ($600>>>0)<($603>>>0);
      if (!($604)) {
       label = 57;
       break L1;
      }
      $605 = $litlevel;
      $606 = $0;
      $607 = ((($606)) + 384|0);
      $608 = HEAP32[$607>>2]|0;
      $609 = (($608) + ($605)|0);
      $610 = HEAP8[$609>>0]|0;
      $611 = $610&255;
      $612 = ($611|0)!=(0);
      if (!($612)) {
       label = 59;
       break L1;
      }
      $613 = $litlevel;
      $614 = $0;
      $615 = ((($614)) + 384|0);
      $616 = HEAP32[$615>>2]|0;
      $617 = (($616) + ($613)|0);
      HEAP8[$617>>0] = 0;
     }
    }
   } while(0);
   $618 = $glue;
   $619 = ($618>>>0)<=(33554431);
   if (!($619)) {
    label = 62;
    break;
   }
   $620 = $glue;
   $621 = $res;
   $622 = ((($621)) + 4|0);
   $623 = HEAP32[$622>>2]|0;
   $624 = $620 & 33554431;
   $625 = $624 << 5;
   $626 = $623 & -1073741793;
   $627 = $626 | $625;
   HEAP32[$622>>2] = $627;
   $628 = $1;
   $629 = ($628|0)!=(0);
   $630 = $res;
   $631 = $0;
   if ($629) {
    $632 = ((($631)) + 284|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = ((($633)) + 4|0);
    HEAP32[$632>>2] = $634;
    HEAP32[$633>>2] = $630;
   } else {
    $635 = ((($631)) + 272|0);
    $636 = HEAP32[$635>>2]|0;
    $637 = ((($636)) + 4|0);
    HEAP32[$635>>2] = $637;
    HEAP32[$636>>2] = $630;
   }
   $638 = $0;
   $639 = ((($638)) + 284|0);
   $640 = HEAP32[$639>>2]|0;
   $641 = $0;
   $642 = ((($641)) + 268|0);
   $643 = HEAP32[$642>>2]|0;
   $644 = ($640|0)!=($643|0);
   if (!($644)) {
    label = 67;
    break;
   }
  }
  $645 = $1;
  $646 = ($645|0)!=(0);
  if ($646) {
   $647 = $0;
   $648 = ((($647)) + 312|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = ($649|0)!=(0|0);
   if ($650) {
    $651 = $0;
    $652 = ((($651)) + 316|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = ($653|0)!=(0);
    if (!($654)) {
     $655 = $0;
     $656 = $0;
     $657 = ((($656)) + 312|0);
     $658 = HEAP32[$657>>2]|0;
     _write_rup_header($655,$658);
     $659 = $0;
     $660 = ((($659)) + 316|0);
     HEAP32[$660>>2] = 1;
    }
   }
  }
  $num_false = 0;
  $num_undef = 0;
  $num_true = 0;
  $661 = $res;
  $662 = ((($661)) + 16|0);
  $q = $662;
  $663 = $0;
  $664 = ((($663)) + 336|0);
  $665 = HEAP32[$664>>2]|0;
  $p = $665;
  while(1) {
   $666 = $p;
   $667 = $0;
   $668 = ((($667)) + 340|0);
   $669 = HEAP32[$668>>2]|0;
   $670 = ($666>>>0)<($669>>>0);
   if (!($670)) {
    break;
   }
   $671 = $p;
   $672 = HEAP32[$671>>2]|0;
   $lit = $672;
   $673 = $lit;
   $674 = $q;
   $675 = ((($674)) + 4|0);
   $q = $675;
   HEAP32[$674>>2] = $673;
   $676 = $1;
   $677 = ($676|0)!=(0);
   if ($677) {
    $678 = $0;
    $679 = ((($678)) + 312|0);
    $680 = HEAP32[$679>>2]|0;
    $681 = ($680|0)!=(0|0);
    if ($681) {
     $682 = $0;
     $683 = ((($682)) + 312|0);
     $684 = HEAP32[$683>>2]|0;
     $685 = $lit;
     $686 = $0;
     $687 = ((($686)) + 40|0);
     $688 = HEAP32[$687>>2]|0;
     $689 = $685;
     $690 = $688;
     $691 = (($689) - ($690))|0;
     $692 = $691 & 1;
     $693 = ($692|0)!=(0);
     $694 = $693 ? -1 : 1;
     $695 = $lit;
     $696 = $0;
     $697 = ((($696)) + 40|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = $695;
     $700 = $698;
     $701 = (($699) - ($700))|0;
     $702 = (($701|0) / 2)&-1;
     $703 = Math_imul($694, $702)|0;
     HEAP32[$vararg_buffer>>2] = $703;
     (_fprintf($684,1238,$vararg_buffer)|0);
    }
   }
   $704 = $lit;
   $705 = HEAP8[$704>>0]|0;
   $val = $705;
   $706 = $val;
   $707 = $706 << 24 >> 24;
   $708 = ($707|0)==(1);
   $709 = $708&1;
   $710 = $num_true;
   $711 = (($710) + ($709))|0;
   $num_true = $711;
   $712 = $val;
   $713 = $712 << 24 >> 24;
   $714 = ($713|0)==(0);
   $715 = $714&1;
   $716 = $num_undef;
   $717 = (($716) + ($715))|0;
   $num_undef = $717;
   $718 = $val;
   $719 = $718 << 24 >> 24;
   $720 = ($719|0)==(-1);
   $721 = $720&1;
   $722 = $num_false;
   $723 = (($722) + ($721))|0;
   $num_false = $723;
   $724 = $p;
   $725 = ((($724)) + 4|0);
   $p = $725;
  }
  $726 = $num_false;
  $727 = $num_true;
  $728 = (($726) + ($727))|0;
  $729 = $num_undef;
  $730 = (($728) + ($729))|0;
  $731 = $size;
  $732 = ($730|0)==($731|0);
  if (!($732)) {
   label = 80;
   break;
  }
  $733 = $1;
  $734 = ($733|0)!=(0);
  if ($734) {
   $735 = $0;
   $736 = ((($735)) + 312|0);
   $737 = HEAP32[$736>>2]|0;
   $738 = ($737|0)!=(0|0);
   if ($738) {
    $739 = $0;
    $740 = ((($739)) + 312|0);
    $741 = HEAP32[$740>>2]|0;
    (_fputs(1242,$741)|0);
   }
  }
  $742 = $0;
  $743 = ((($742)) + 336|0);
  $744 = HEAP32[$743>>2]|0;
  $745 = $0;
  $746 = ((($745)) + 340|0);
  HEAP32[$746>>2] = $744;
  $747 = $reentered;
  $748 = ($747|0)==(0);
  $749 = $size;
  $750 = ($749>>>0)>(0);
  $or$cond11 = $748 & $750;
  if ($or$cond11) {
   $751 = $size;
   $752 = ($751>>>0)>(2);
   $753 = $reentered;
   $754 = ($753|0)!=(0);
   $or$cond = $752 & $754;
   if ($or$cond) {
    label = 86;
    break;
   }
   $755 = $0;
   $756 = $res;
   $757 = ((($756)) + 16|0);
   $758 = HEAP32[$757>>2]|0;
   $759 = $res;
   _connect_head_tail($755,$758,$759);
   $760 = $size;
   $761 = ($760>>>0)>(1);
   if ($761) {
    $762 = $0;
    $763 = $res;
    $764 = ((($763)) + 16|0);
    $765 = ((($764)) + 4|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = $res;
    _connect_head_tail($762,$766,$767);
   }
  }
  $768 = $size;
  $769 = ($768|0)==(0);
  if ($769) {
   $770 = $0;
   $771 = ((($770)) + 328|0);
   $772 = HEAP32[$771>>2]|0;
   $773 = ($772|0)!=(0|0);
   if (!($773)) {
    $774 = $res;
    $775 = $0;
    $776 = ((($775)) + 328|0);
    HEAP32[$776>>2] = $774;
   }
  }
  $777 = $size;
  $778 = ($777|0)!=(2);
  if ($778) {
   $779 = $res;
   $780 = ((($779)) + 4|0);
   $781 = HEAP32[$780>>2]|0;
   $782 = $781 & -17;
   $783 = $782 | 16;
   HEAP32[$780>>2] = $783;
  }
  $784 = $0;
  $785 = ((($784)) + 28|0);
  $786 = HEAP32[$785>>2]|0;
  $787 = ($786|0)==(0);
  $788 = $num_false;
  $789 = ($788>>>0)>(0);
  $or$cond3 = $787 & $789;
  if (!($or$cond3)) {
   label = 110;
   break;
  }
  $790 = $0;
  $791 = ((($790)) + 340|0);
  $792 = HEAP32[$791>>2]|0;
  $793 = $0;
  $794 = ((($793)) + 336|0);
  $795 = HEAP32[$794>>2]|0;
  $796 = ($792|0)==($795|0);
  if (!($796)) {
   label = 96;
   break;
  }
  $797 = $0;
  $798 = ((($797)) + 376|0);
  $799 = HEAP32[$798>>2]|0;
  $800 = $0;
  $801 = ((($800)) + 372|0);
  $802 = HEAP32[$801>>2]|0;
  $803 = ($799|0)==($802|0);
  if (!($803)) {
   label = 98;
   break;
  }
  $count_resolved = 1;
  $804 = $0;
  $805 = $res;
  _add_antecedent($804,$805);
  $806 = $res;
  $807 = (_end_of_lits($806)|0);
  $end = $807;
  $808 = $res;
  $809 = ((($808)) + 16|0);
  $p = $809;
  while(1) {
   $810 = $p;
   $811 = $end;
   $812 = ($810>>>0)<($811>>>0);
   if (!($812)) {
    break;
   }
   $813 = $p;
   $814 = HEAP32[$813>>2]|0;
   $lit = $814;
   $815 = $0;
   $816 = ((($815)) + 44|0);
   $817 = HEAP32[$816>>2]|0;
   $818 = $lit;
   $819 = $0;
   $820 = ((($819)) + 40|0);
   $821 = HEAP32[$820>>2]|0;
   $822 = $818;
   $823 = $821;
   $824 = (($822) - ($823))|0;
   $825 = (($824|0) / 2)&-1;
   $826 = (($817) + (($825*12)|0)|0);
   $v = $826;
   $827 = $0;
   $828 = $v;
   _use_var($827,$828);
   $829 = $lit;
   $830 = HEAP8[$829>>0]|0;
   $831 = $830 << 24 >> 24;
   $832 = ($831|0)==(-1);
   $833 = $0;
   if ($832) {
    $834 = $v;
    $835 = ((($834)) + 8|0);
    $836 = HEAP32[$835>>2]|0;
    _add_antecedent($833,$836);
    $837 = $count_resolved;
    $838 = (($837) + 1)|0;
    $count_resolved = $838;
   } else {
    $839 = $lit;
    _add_lit($833,$839);
   }
   $840 = $p;
   $841 = ((($840)) + 4|0);
   $p = $841;
  }
  $842 = $count_resolved;
  $843 = ($842>>>0)>=(2);
  if (!($843)) {
   label = 106;
   break;
  }
  $1 = 1;
  $844 = $res;
  $845 = $0;
  $846 = ((($845)) + 68|0);
  $847 = ($844|0)==($846|0);
  if ($847) {
   $848 = $0;
   _resetimpl($848);
  }
  $reentered = 1;
 }
 switch (label|0) {
  case 8: {
   ___assert_fail((3454|0),(904|0),2113,(3498|0));
   // unreachable;
   break;
  }
  case 14: {
   ___assert_fail((3520|0),(904|0),2125,(3498|0));
   // unreachable;
   break;
  }
  case 17: {
   ___assert_fail((3520|0),(904|0),2138,(3498|0));
   // unreachable;
   break;
  }
  case 21: {
   ___assert_fail((3548|0),(904|0),2146,(3498|0));
   // unreachable;
   break;
  }
  case 24: {
   ___assert_fail((3548|0),(904|0),2148,(3498|0));
   // unreachable;
   break;
  }
  case 27: {
   ___assert_fail((3576|0),(904|0),2156,(3498|0));
   // unreachable;
   break;
  }
  case 30: {
   ___assert_fail((3600|0),(904|0),2163,(3498|0));
   // unreachable;
   break;
  }
  case 35: {
   ___assert_fail((3627|0),(904|0),2169,(3498|0));
   // unreachable;
   break;
  }
  case 40: {
   ___assert_fail((3649|0),(904|0),2172,(3498|0));
   // unreachable;
   break;
  }
  case 43: {
   ___assert_fail((3680|0),(904|0),2173,(3498|0));
   // unreachable;
   break;
  }
  case 48: {
   ___assert_fail((3710|0),(904|0),2178,(3498|0));
   // unreachable;
   break;
  }
  case 51: {
   ___assert_fail((3739|0),(904|0),2179,(3498|0));
   // unreachable;
   break;
  }
  case 57: {
   ___assert_fail((3767|0),(904|0),2190,(3498|0));
   // unreachable;
   break;
  }
  case 59: {
   ___assert_fail((3806|0),(904|0),2191,(3498|0));
   // unreachable;
   break;
  }
  case 62: {
   ___assert_fail((3827|0),(904|0),2196,(3498|0));
   // unreachable;
   break;
  }
  case 67: {
   ___assert_fail((3843|0),(904|0),2212,(3498|0));
   // unreachable;
   break;
  }
  case 80: {
   ___assert_fail((3869|0),(904|0),2238,(3498|0));
   // unreachable;
   break;
  }
  case 86: {
   ___assert_fail((3910|0),(904|0),2247,(3498|0));
   // unreachable;
   break;
  }
  case 96: {
   ___assert_fail((3276|0),(904|0),2271,(3498|0));
   // unreachable;
   break;
  }
  case 98: {
   ___assert_fail((1362|0),(904|0),2272,(3498|0));
   // unreachable;
   break;
  }
  case 106: {
   ___assert_fail((3934|0),(904|0),2290,(3498|0));
   // unreachable;
   break;
  }
  case 110: {
   $849 = $num_true;
   $850 = ($849|0)==(0);
   $851 = $num_undef;
   $852 = ($851|0)==(1);
   $or$cond5 = $850 & $852;
   if ($or$cond5) {
    $lit = 0;
    $853 = $res;
    $854 = ((($853)) + 16|0);
    $p = $854;
    while(1) {
     $855 = $p;
     $856 = $res;
     $857 = ((($856)) + 16|0);
     $858 = $size;
     $859 = (($857) + ($858<<2)|0);
     $860 = ($855>>>0)<($859>>>0);
     if (!($860)) {
      break;
     }
     $861 = $p;
     $862 = HEAP32[$861>>2]|0;
     $863 = HEAP8[$862>>0]|0;
     $864 = $863 << 24 >> 24;
     $865 = ($864|0)==(0);
     if ($865) {
      $866 = $p;
      $867 = HEAP32[$866>>2]|0;
      $lit = $867;
     }
     $868 = $0;
     $869 = ((($868)) + 44|0);
     $870 = HEAP32[$869>>2]|0;
     $871 = $p;
     $872 = HEAP32[$871>>2]|0;
     $873 = $0;
     $874 = ((($873)) + 40|0);
     $875 = HEAP32[$874>>2]|0;
     $876 = $872;
     $877 = $875;
     $878 = (($876) - ($877))|0;
     $879 = (($878|0) / 2)&-1;
     $880 = (($870) + (($879*12)|0)|0);
     $v = $880;
     $881 = $0;
     $882 = $v;
     _use_var($881,$882);
     $883 = $p;
     $884 = ((($883)) + 4|0);
     $p = $884;
    }
    $885 = $lit;
    $886 = ($885|0)!=(0|0);
    if (!($886)) {
     ___assert_fail((2835|0),(904|0),2311,(3498|0));
     // unreachable;
    }
    $887 = $res;
    $reason = $887;
    $888 = $size;
    $889 = ($888|0)==(2);
    do {
     if ($889) {
      $890 = $res;
      $891 = ((($890)) + 16|0);
      $892 = HEAP32[$891>>2]|0;
      $other = $892;
      $893 = $other;
      $894 = $lit;
      $895 = ($893|0)==($894|0);
      if ($895) {
       $896 = $res;
       $897 = ((($896)) + 16|0);
       $898 = ((($897)) + 4|0);
       $899 = HEAP32[$898>>2]|0;
       $other = $899;
      }
      $900 = $other;
      $901 = HEAP8[$900>>0]|0;
      $902 = $901 << 24 >> 24;
      $903 = ($902|0)==(-1);
      if (!($903)) {
       ___assert_fail((3371|0),(904|0),2320,(3498|0));
       // unreachable;
      }
      $904 = $0;
      $905 = ((($904)) + 40|0);
      $906 = HEAP32[$905>>2]|0;
      $907 = $other;
      $908 = $0;
      $909 = ((($908)) + 40|0);
      $910 = HEAP32[$909>>2]|0;
      $911 = $907;
      $912 = $910;
      $913 = (($911) - ($912))|0;
      $914 = 1 ^ $913;
      $915 = (($906) + ($914)|0);
      $916 = HEAP8[$915>>0]|0;
      $917 = $916 << 24 >> 24;
      $918 = ($917|0)==(1);
      if ($918) {
       $919 = $0;
       $920 = ((($919)) + 40|0);
       $921 = HEAP32[$920>>2]|0;
       $922 = $other;
       $923 = $0;
       $924 = ((($923)) + 40|0);
       $925 = HEAP32[$924>>2]|0;
       $926 = $922;
       $927 = $925;
       $928 = (($926) - ($927))|0;
       $929 = 1 ^ $928;
       $930 = (($921) + ($929)|0);
       $931 = $0;
       $932 = ((($931)) + 40|0);
       $933 = HEAP32[$932>>2]|0;
       $934 = $930;
       $935 = $933;
       $936 = (($934) - ($935))|0;
       $937 = $936<<1;
       $938 = (1 + ($937))|0;
       $939 = $938;
       $reason = $939;
       break;
      } else {
       ___assert_fail((3403|0),(904|0),2321,(3498|0));
       // unreachable;
      }
     }
    } while(0);
    $940 = $0;
    $941 = $lit;
    $942 = $reason;
    _assign_forced($940,$941,$942);
    $943 = $num_true;
    $944 = (($943) + 1)|0;
    $num_true = $944;
   }
   $945 = $num_false;
   $946 = $size;
   $947 = ($945|0)==($946|0);
   do {
    if ($947) {
     $948 = $0;
     $949 = ((($948)) + 332|0);
     $950 = HEAP32[$949>>2]|0;
     $951 = ($950|0)!=(0|0);
     if (!($951)) {
      $952 = $res;
      $953 = $0;
      $954 = ((($953)) + 68|0);
      $955 = ($952|0)==($954|0);
      if ($955) {
       $956 = $0;
       $957 = $res;
       $958 = ((($957)) + 16|0);
       $959 = HEAP32[$958>>2]|0;
       $960 = $res;
       $961 = ((($960)) + 16|0);
       $962 = ((($961)) + 4|0);
       $963 = HEAP32[$962>>2]|0;
       $964 = (_setcimpl($956,$959,$963)|0);
       $965 = $0;
       $966 = ((($965)) + 332|0);
       HEAP32[$966>>2] = $964;
       break;
      } else {
       $967 = $res;
       $968 = $0;
       $969 = ((($968)) + 332|0);
       HEAP32[$969>>2] = $967;
       break;
      }
     }
    }
   } while(0);
   $970 = $1;
   $971 = ($970|0)!=(0);
   $972 = $num_true;
   $973 = ($972|0)!=(0);
   $or$cond7 = $971 | $973;
   $or$cond7$not = $or$cond7 ^ 1;
   $974 = $num_undef;
   $975 = ($974|0)!=(0);
   $or$cond9 = $or$cond7$not & $975;
   if ($or$cond9) {
    $976 = $0;
    $977 = $res;
    _incjwh($976,$977);
   }
   $978 = $res;
   $979 = $0;
   $980 = ((($979)) + 68|0);
   $981 = ($978|0)==($980|0);
   if (!($981)) {
    $983 = $res;
    STACKTOP = sp;return ($983|0);
   }
   $982 = $0;
   _resetimpl($982);
   $983 = $res;
   STACKTOP = sp;return ($983|0);
   break;
  }
 }
 return (0)|0;
}
function _impl2reason($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $other = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $0;
 $3 = ((($2)) + 68|0);
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $other = $5;
 $6 = $1;
 $7 = $other;
 $8 = ($6|0)==($7|0);
 if ($8) {
  $9 = $0;
  $10 = ((($9)) + 68|0);
  $11 = ((($10)) + 16|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $other = $13;
 }
 $14 = $other;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)==(-1);
 if (!($17)) {
  ___assert_fail((3371|0),(904|0),1721,(3391|0));
  // unreachable;
 }
 $18 = $0;
 $19 = ((($18)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $other;
 $22 = $0;
 $23 = ((($22)) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = 1 ^ $27;
 $29 = (($20) + ($28)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = ($31|0)==(1);
 if ($32) {
  $33 = $0;
  $34 = ((($33)) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $other;
  $37 = $0;
  $38 = ((($37)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $36;
  $41 = $39;
  $42 = (($40) - ($41))|0;
  $43 = 1 ^ $42;
  $44 = (($35) + ($43)|0);
  $45 = $0;
  $46 = ((($45)) + 40|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $44;
  $49 = $47;
  $50 = (($48) - ($49))|0;
  $51 = $50<<1;
  $52 = (1 + ($51))|0;
  $53 = $52;
  $res = $53;
  $54 = $0;
  _resetimpl($54);
  $55 = $res;
  STACKTOP = sp;return ($55|0);
 } else {
  ___assert_fail((3403|0),(904|0),1722,(3391|0));
  // unreachable;
 }
 return (0)|0;
}
function _add_resolved($ps,$learned) {
 $ps = $ps|0;
 $learned = $learned|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $learned;
 $2 = $0;
 $3 = ((($2)) + 372|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 376|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _sortlits($ps,$v,$size) {
 $ps = $ps|0;
 $v = $v|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aa = 0, $count = 0, $count8 = 0, $i = 0, $i14 = 0, $i17 = 0, $j = 0;
 var $j15 = 0, $l = 0, $l12 = 0, $ll = 0, $m = 0, $new_num = 0, $new_num7 = 0, $new_size = 0, $new_size10 = 0, $nn = 0, $old_num = 0, $old_num6 = 0, $old_size = 0, $old_size9 = 0, $pivot = 0, $pivot11 = 0, $r = 0, $r13 = 0, $rr = 0, $tmp = 0;
 var $tmp1 = 0, $tmp16 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $size;
 $3 = $2;
 $4 = ($3|0)==(2);
 $5 = $1;
 if ($4) {
  _sorttwolits($5);
  STACKTOP = sp;return;
 }
 $aa = $5;
 $6 = $2;
 $nn = $6;
 $l = 0;
 $7 = $nn;
 $8 = (($7) - 1)|0;
 $r = $8;
 $9 = $0;
 $10 = ((($9)) + 764|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 760|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if (!($15)) {
  ___assert_fail((1494|0),(904|0),1564,(4277|0));
  // unreachable;
 }
 $16 = $r;
 $17 = $l;
 $18 = (($16) - ($17))|0;
 $19 = ($18|0)<=(10);
 L8: do {
  if (!($19)) {
   while(1) {
    $20 = $l;
    $21 = $r;
    $22 = (($20) + ($21))|0;
    $23 = (($22|0) / 2)&-1;
    $m = $23;
    $24 = $aa;
    $25 = $r;
    $26 = (($24) + ($25<<2)|0);
    $27 = ((($26)) + -4|0);
    $28 = HEAP32[$27>>2]|0;
    $tmp = $28;
    $29 = $aa;
    $30 = $m;
    $31 = (($29) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $aa;
    $34 = $r;
    $35 = (($33) + ($34<<2)|0);
    $36 = ((($35)) + -4|0);
    HEAP32[$36>>2] = $32;
    $37 = $tmp;
    $38 = $aa;
    $39 = $m;
    $40 = (($38) + ($39<<2)|0);
    HEAP32[$40>>2] = $37;
    $41 = $0;
    $42 = $aa;
    $43 = $l;
    $44 = (($42) + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $aa;
    $47 = $r;
    $48 = (($46) + ($47<<2)|0);
    $49 = ((($48)) + -4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_cmp_added($41,$45,$50)|0);
    $52 = ($51|0)>(0);
    if ($52) {
     $53 = $aa;
     $54 = $r;
     $55 = (($53) + ($54<<2)|0);
     $56 = ((($55)) + -4|0);
     $57 = HEAP32[$56>>2]|0;
     $tmp1 = $57;
     $58 = $aa;
     $59 = $l;
     $60 = (($58) + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $aa;
     $63 = $r;
     $64 = (($62) + ($63<<2)|0);
     $65 = ((($64)) + -4|0);
     HEAP32[$65>>2] = $61;
     $66 = $tmp1;
     $67 = $aa;
     $68 = $l;
     $69 = (($67) + ($68<<2)|0);
     HEAP32[$69>>2] = $66;
    }
    $70 = $0;
    $71 = $aa;
    $72 = $l;
    $73 = (($71) + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $aa;
    $76 = $r;
    $77 = (($75) + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_cmp_added($70,$74,$78)|0);
    $80 = ($79|0)>(0);
    if ($80) {
     $81 = $aa;
     $82 = $r;
     $83 = (($81) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $tmp2 = $84;
     $85 = $aa;
     $86 = $l;
     $87 = (($85) + ($86<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $aa;
     $90 = $r;
     $91 = (($89) + ($90<<2)|0);
     HEAP32[$91>>2] = $88;
     $92 = $tmp2;
     $93 = $aa;
     $94 = $l;
     $95 = (($93) + ($94<<2)|0);
     HEAP32[$95>>2] = $92;
    }
    $96 = $0;
    $97 = $aa;
    $98 = $r;
    $99 = (($97) + ($98<<2)|0);
    $100 = ((($99)) + -4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $aa;
    $103 = $r;
    $104 = (($102) + ($103<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (_cmp_added($96,$101,$105)|0);
    $107 = ($106|0)>(0);
    if ($107) {
     $108 = $aa;
     $109 = $r;
     $110 = (($108) + ($109<<2)|0);
     $111 = HEAP32[$110>>2]|0;
     $tmp3 = $111;
     $112 = $aa;
     $113 = $r;
     $114 = (($112) + ($113<<2)|0);
     $115 = ((($114)) + -4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $aa;
     $118 = $r;
     $119 = (($117) + ($118<<2)|0);
     HEAP32[$119>>2] = $116;
     $120 = $tmp3;
     $121 = $aa;
     $122 = $r;
     $123 = (($121) + ($122<<2)|0);
     $124 = ((($123)) + -4|0);
     HEAP32[$124>>2] = $120;
    }
    $125 = $l;
    $126 = (($125) + 1)|0;
    $127 = (($126) - 1)|0;
    $i = $127;
    $128 = $r;
    $129 = (($128) - 1)|0;
    $j = $129;
    $130 = $j;
    $131 = $aa;
    $132 = (($131) + ($130<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    $pivot = $133;
    while(1) {
     $134 = $0;
     $135 = $i;
     $136 = (($135) + 1)|0;
     $i = $136;
     $137 = $aa;
     $138 = (($137) + ($136<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $pivot;
     $141 = (_cmp_added($134,$139,$140)|0);
     $142 = ($141|0)<(0);
     if ($142) {
      continue;
     }
     while(1) {
      $143 = $0;
      $144 = $pivot;
      $145 = $j;
      $146 = (($145) + -1)|0;
      $j = $146;
      $147 = $aa;
      $148 = (($147) + ($146<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (_cmp_added($143,$144,$149)|0);
      $151 = ($150|0)<(0);
      if (!($151)) {
       break;
      }
      $152 = $j;
      $153 = $l;
      $154 = (($153) + 1)|0;
      $155 = ($152|0)==($154|0);
      if ($155) {
       break;
      }
     }
     $156 = $i;
     $157 = $j;
     $158 = ($156|0)>=($157|0);
     $159 = $aa;
     if ($158) {
      break;
     }
     $160 = $j;
     $161 = (($159) + ($160<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $tmp4 = $162;
     $163 = $aa;
     $164 = $i;
     $165 = (($163) + ($164<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $aa;
     $168 = $j;
     $169 = (($167) + ($168<<2)|0);
     HEAP32[$169>>2] = $166;
     $170 = $tmp4;
     $171 = $aa;
     $172 = $i;
     $173 = (($171) + ($172<<2)|0);
     HEAP32[$173>>2] = $170;
    }
    $174 = $r;
    $175 = (($174) - 1)|0;
    $176 = (($159) + ($175<<2)|0);
    $177 = HEAP32[$176>>2]|0;
    $tmp5 = $177;
    $178 = $aa;
    $179 = $i;
    $180 = (($178) + ($179<<2)|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $aa;
    $183 = $r;
    $184 = (($183) - 1)|0;
    $185 = (($182) + ($184<<2)|0);
    HEAP32[$185>>2] = $181;
    $186 = $tmp5;
    $187 = $aa;
    $188 = $i;
    $189 = (($187) + ($188<<2)|0);
    HEAP32[$189>>2] = $186;
    $190 = $i;
    $191 = $l;
    $192 = (($190) - ($191))|0;
    $193 = $r;
    $194 = $i;
    $195 = (($193) - ($194))|0;
    $196 = ($192|0)<($195|0);
    if ($196) {
     $197 = $i;
     $198 = (($197) + 1)|0;
     $ll = $198;
     $199 = $r;
     $rr = $199;
     $200 = $i;
     $201 = (($200) - 1)|0;
     $r = $201;
    } else {
     $202 = $l;
     $ll = $202;
     $203 = $i;
     $204 = (($203) - 1)|0;
     $rr = $204;
     $205 = $i;
     $206 = (($205) + 1)|0;
     $l = $206;
    }
    $207 = $r;
    $208 = $l;
    $209 = (($207) - ($208))|0;
    $210 = ($209|0)>(10);
    $211 = $rr;
    $212 = $ll;
    $213 = (($211) - ($212))|0;
    $214 = ($213|0)>(10);
    if (!($210)) {
     if ($214) {
      $357 = $ll;
      $l = $357;
      $358 = $rr;
      $r = $358;
      continue;
     }
     $359 = $0;
     $360 = ((($359)) + 764|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = $0;
     $363 = ((($362)) + 760|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = ($361>>>0)>($364>>>0);
     if (!($365)) {
      break L8;
     }
     $366 = $0;
     $367 = ((($366)) + 764|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = ((($368)) + -4|0);
     HEAP32[$367>>2] = $369;
     $370 = HEAP32[$369>>2]|0;
     $r = $370;
     $371 = $0;
     $372 = ((($371)) + 764|0);
     $373 = HEAP32[$372>>2]|0;
     $374 = ((($373)) + -4|0);
     HEAP32[$372>>2] = $374;
     $375 = HEAP32[$374>>2]|0;
     $l = $375;
     continue;
    }
    if (!($214)) {
     label = 23;
     break;
    }
    $215 = $0;
    $216 = ((($215)) + 764|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $0;
    $219 = ((($218)) + 768|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($217|0)==($220|0);
    if ($221) {
     $222 = $0;
     $223 = ((($222)) + 768|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = $0;
     $226 = ((($225)) + 760|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $224;
     $229 = $227;
     $230 = (($228) - ($229))|0;
     $231 = (($230|0) / 4)&-1;
     $old_num = $231;
     $232 = $old_num;
     $233 = ($232|0)!=(0);
     $234 = $old_num;
     $235 = $234<<1;
     $236 = $233 ? $235 : 1;
     $new_num = $236;
     $237 = $0;
     $238 = ((($237)) + 764|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $0;
     $241 = ((($240)) + 760|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = $239;
     $244 = $242;
     $245 = (($243) - ($244))|0;
     $246 = (($245|0) / 4)&-1;
     $count = $246;
     $247 = $0;
     $248 = ((($247)) + 760|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = $0;
     $251 = ((($250)) + 768|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($249>>>0)<=($252>>>0);
     if (!($253)) {
      label = 26;
      break;
     }
     $254 = $old_num;
     $255 = $254<<2;
     $old_size = $255;
     $256 = $new_num;
     $257 = $256<<2;
     $new_size = $257;
     $258 = $0;
     $259 = $0;
     $260 = ((($259)) + 760|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = $old_size;
     $263 = $new_size;
     $264 = (_resize($258,$261,$262,$263)|0);
     $265 = $0;
     $266 = ((($265)) + 760|0);
     HEAP32[$266>>2] = $264;
     $267 = $0;
     $268 = ((($267)) + 760|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = $count;
     $271 = (($269) + ($270<<2)|0);
     $272 = $0;
     $273 = ((($272)) + 764|0);
     HEAP32[$273>>2] = $271;
     $274 = $0;
     $275 = ((($274)) + 760|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $new_num;
     $278 = (($276) + ($277<<2)|0);
     $279 = $0;
     $280 = ((($279)) + 768|0);
     HEAP32[$280>>2] = $278;
    }
    $281 = $ll;
    $282 = $0;
    $283 = ((($282)) + 764|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = ((($284)) + 4|0);
    HEAP32[$283>>2] = $285;
    HEAP32[$284>>2] = $281;
    $286 = $0;
    $287 = ((($286)) + 764|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $0;
    $290 = ((($289)) + 768|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ($288|0)==($291|0);
    if ($292) {
     $293 = $0;
     $294 = ((($293)) + 768|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $0;
     $297 = ((($296)) + 760|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = $295;
     $300 = $298;
     $301 = (($299) - ($300))|0;
     $302 = (($301|0) / 4)&-1;
     $old_num6 = $302;
     $303 = $old_num6;
     $304 = ($303|0)!=(0);
     $305 = $old_num6;
     $306 = $305<<1;
     $307 = $304 ? $306 : 1;
     $new_num7 = $307;
     $308 = $0;
     $309 = ((($308)) + 764|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = $0;
     $312 = ((($311)) + 760|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $310;
     $315 = $313;
     $316 = (($314) - ($315))|0;
     $317 = (($316|0) / 4)&-1;
     $count8 = $317;
     $318 = $0;
     $319 = ((($318)) + 760|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $0;
     $322 = ((($321)) + 768|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = ($320>>>0)<=($323>>>0);
     if (!($324)) {
      label = 30;
      break;
     }
     $325 = $old_num6;
     $326 = $325<<2;
     $old_size9 = $326;
     $327 = $new_num7;
     $328 = $327<<2;
     $new_size10 = $328;
     $329 = $0;
     $330 = $0;
     $331 = ((($330)) + 760|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = $old_size9;
     $334 = $new_size10;
     $335 = (_resize($329,$332,$333,$334)|0);
     $336 = $0;
     $337 = ((($336)) + 760|0);
     HEAP32[$337>>2] = $335;
     $338 = $0;
     $339 = ((($338)) + 760|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = $count8;
     $342 = (($340) + ($341<<2)|0);
     $343 = $0;
     $344 = ((($343)) + 764|0);
     HEAP32[$344>>2] = $342;
     $345 = $0;
     $346 = ((($345)) + 760|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = $new_num7;
     $349 = (($347) + ($348<<2)|0);
     $350 = $0;
     $351 = ((($350)) + 768|0);
     HEAP32[$351>>2] = $349;
    }
    $352 = $rr;
    $353 = $0;
    $354 = ((($353)) + 764|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ((($355)) + 4|0);
    HEAP32[$354>>2] = $356;
    HEAP32[$355>>2] = $352;
   }
   if ((label|0) == 23) {
    ___assert_fail((1519|0),(904|0),1564,(4277|0));
    // unreachable;
   }
   else if ((label|0) == 26) {
    ___assert_fail((1550|0),(904|0),1564,(4277|0));
    // unreachable;
   }
   else if ((label|0) == 30) {
    ___assert_fail((1550|0),(904|0),1564,(4277|0));
    // unreachable;
   }
  }
 } while(0);
 $l12 = 0;
 $376 = $nn;
 $377 = (($376) - 1)|0;
 $r13 = $377;
 $378 = $r13;
 $i14 = $378;
 while(1) {
  $379 = $i14;
  $380 = $l12;
  $381 = ($379|0)>($380|0);
  if (!($381)) {
   break;
  }
  $382 = $0;
  $383 = $aa;
  $384 = $i14;
  $385 = (($383) + ($384<<2)|0);
  $386 = ((($385)) + -4|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = $aa;
  $389 = $i14;
  $390 = (($388) + ($389<<2)|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = (_cmp_added($382,$387,$391)|0);
  $393 = ($392|0)>(0);
  if ($393) {
   $394 = $aa;
   $395 = $i14;
   $396 = (($394) + ($395<<2)|0);
   $397 = HEAP32[$396>>2]|0;
   $tmp16 = $397;
   $398 = $aa;
   $399 = $i14;
   $400 = (($398) + ($399<<2)|0);
   $401 = ((($400)) + -4|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = $aa;
   $404 = $i14;
   $405 = (($403) + ($404<<2)|0);
   HEAP32[$405>>2] = $402;
   $406 = $tmp16;
   $407 = $aa;
   $408 = $i14;
   $409 = (($407) + ($408<<2)|0);
   $410 = ((($409)) + -4|0);
   HEAP32[$410>>2] = $406;
  }
  $411 = $i14;
  $412 = (($411) + -1)|0;
  $i14 = $412;
 }
 $413 = $l12;
 $414 = (($413) + 2)|0;
 $i14 = $414;
 while(1) {
  $415 = $i14;
  $416 = $r13;
  $417 = ($415|0)<=($416|0);
  if (!($417)) {
   break;
  }
  $418 = $i14;
  $j15 = $418;
  $419 = $i14;
  $420 = $aa;
  $421 = (($420) + ($419<<2)|0);
  $422 = HEAP32[$421>>2]|0;
  $pivot11 = $422;
  while(1) {
   $423 = $0;
   $424 = $pivot11;
   $425 = $j15;
   $426 = (($425) - 1)|0;
   $427 = $aa;
   $428 = (($427) + ($426<<2)|0);
   $429 = HEAP32[$428>>2]|0;
   $430 = (_cmp_added($423,$424,$429)|0);
   $431 = ($430|0)<(0);
   if (!($431)) {
    break;
   }
   $432 = $j15;
   $433 = (($432) - 1)|0;
   $434 = $aa;
   $435 = (($434) + ($433<<2)|0);
   $436 = HEAP32[$435>>2]|0;
   $437 = $j15;
   $438 = $aa;
   $439 = (($438) + ($437<<2)|0);
   HEAP32[$439>>2] = $436;
   $440 = $j15;
   $441 = (($440) + -1)|0;
   $j15 = $441;
  }
  $442 = $pivot11;
  $443 = $j15;
  $444 = $aa;
  $445 = (($444) + ($443<<2)|0);
  HEAP32[$445>>2] = $442;
  $446 = $i14;
  $447 = (($446) + 1)|0;
  $i14 = $447;
 }
 $448 = $0;
 $449 = ((($448)) + 764|0);
 $450 = HEAP32[$449>>2]|0;
 $451 = $0;
 $452 = ((($451)) + 760|0);
 $453 = HEAP32[$452>>2]|0;
 $454 = ($450|0)==($453|0);
 if (!($454)) {
  ___assert_fail((1494|0),(904|0),1564,(4277|0));
  // unreachable;
 }
 $i17 = 0;
 while(1) {
  $455 = $i17;
  $456 = $nn;
  $457 = (($456) - 1)|0;
  $458 = ($455|0)<($457|0);
  if (!($458)) {
   label = 55;
   break;
  }
  $459 = $0;
  $460 = $i17;
  $461 = $aa;
  $462 = (($461) + ($460<<2)|0);
  $463 = HEAP32[$462>>2]|0;
  $464 = $i17;
  $465 = (($464) + 1)|0;
  $466 = $aa;
  $467 = (($466) + ($465<<2)|0);
  $468 = HEAP32[$467>>2]|0;
  $469 = (_cmp_added($459,$463,$468)|0);
  $470 = ($469|0)<=(0);
  if (!($470)) {
   label = 53;
   break;
  }
  $471 = $i17;
  $472 = (($471) + 1)|0;
  $i17 = $472;
 }
 if ((label|0) == 53) {
  ___assert_fail((4286|0),(904|0),1564,(4277|0));
  // unreachable;
 }
 else if ((label|0) == 55) {
  STACKTOP = sp;return;
 }
}
function _new_clause($ps,$size,$learned) {
 $ps = $ps|0;
 $size = $size|0;
 $learned = $learned|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bytes = 0, $or$cond = 0, $p = 0, $res = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $size;
 $2 = $learned;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_bytes_clause($3,$4,$5)|0);
 $bytes = $6;
 $7 = $0;
 $8 = $bytes;
 $9 = (_new($7,$8)|0);
 $tmp = $9;
 $10 = $tmp;
 $res = $10;
 $11 = $1;
 $12 = $res;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = $res;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $13 & 1;
 $18 = $17 << 1;
 $19 = $16 & -3;
 $20 = $19 | $18;
 HEAP32[$15>>2] = $20;
 $21 = $res;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & -2;
 HEAP32[$22>>2] = $24;
 $25 = $res;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & -17;
 HEAP32[$26>>2] = $28;
 $29 = $res;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & -5;
 HEAP32[$30>>2] = $32;
 $33 = $res;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & -9;
 HEAP32[$34>>2] = $36;
 $37 = $2;
 $38 = ($37|0)!=(0);
 $39 = $1;
 $40 = ($39>>>0)>(2);
 $or$cond = $38 & $40;
 if (!($or$cond)) {
  $59 = $res;
  STACKTOP = sp;return ($59|0);
 }
 $41 = $res;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 >>> 1;
 $45 = $44 & 1;
 $46 = ($45|0)!=(0);
 if (!($46)) {
  ___assert_fail((4235|0),(904|0),1273,(4250|0));
  // unreachable;
 }
 $47 = $res;
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48>>>0)>(2);
 if (!($49)) {
  ___assert_fail((4261|0),(904|0),1273,(4250|0));
  // unreachable;
 }
 $50 = $res;
 $51 = ((($50)) + 16|0);
 $52 = $res;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + ($53<<2)|0);
 $p = $54;
 $55 = $0;
 $56 = ((($55)) + 436|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $p;
 HEAP32[$58>>2] = $57;
 $59 = $res;
 STACKTOP = sp;return ($59|0);
}
function _write_rup_header($ps,$file) {
 $ps = $ps|0;
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $line = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $line = sp + 24|0;
 $0 = $ps;
 $1 = $file;
 $2 = $0;
 $3 = ((($2)) + 320|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 (_sprintf($line,4220,$vararg_buffer)|0);
 $8 = $1;
 (_fputs($line,$8)|0);
 $9 = (_strlen($line)|0);
 $10 = (255 - ($9))|0;
 $i = $10;
 while(1) {
  $11 = $i;
  $12 = ($11|0)>=(0);
  $13 = $1;
  if (!($12)) {
   break;
  }
  (_fputc(32,$13)|0);
  $14 = $i;
  $15 = (($14) + -1)|0;
  $i = $15;
 }
 (_fputc(10,$13)|0);
 $16 = $1;
 (_fflush($16)|0);
 STACKTOP = sp;return;
}
function _connect_head_tail($ps,$lit,$c) {
 $ps = $ps|0;
 $lit = $lit|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $c;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>=(1);
 if (!($5)) {
  ___assert_fail((4116|0),(904|0),1893,(4129|0));
  // unreachable;
 }
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 $9 = $0;
 if ($8) {
  $10 = $1;
  $11 = $2;
  _lpush($9,$10,$11);
  STACKTOP = sp;return;
 }
 $12 = ((($9)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = $0;
 $16 = ((($15)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (($13) + ($20<<2)|0);
 $s = $21;
 $22 = $2;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 $26 = ($24|0)!=($25|0);
 do {
  if ($26) {
   $27 = $2;
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28>>>0)>=(2);
   if (!($29)) {
    ___assert_fail((4147|0),(904|0),1905,(4129|0));
    // unreachable;
   }
   $30 = $2;
   $31 = ((($30)) + 16|0);
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = ($33|0)==($34|0);
   if ($35) {
    $36 = $s;
    $37 = HEAP32[$36>>2]|0;
    $38 = $2;
    $39 = ((($38)) + 8|0);
    $40 = ((($39)) + 4|0);
    HEAP32[$40>>2] = $37;
    break;
   } else {
    ___assert_fail((1659|0),(904|0),1906,(4129|0));
    // unreachable;
   }
  } else {
   $41 = $s;
   $42 = HEAP32[$41>>2]|0;
   $43 = $2;
   $44 = ((($43)) + 8|0);
   HEAP32[$44>>2] = $42;
  }
 } while(0);
 $45 = $2;
 $46 = $s;
 HEAP32[$46>>2] = $45;
 STACKTOP = sp;return;
}
function _assign_forced($ps,$lit,$reason) {
 $ps = $ps|0;
 $lit = $lit|0;
 $reason = $reason|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $reason;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((3999|0),(904|0),1814,(4006|0));
  // unreachable;
 }
 $5 = $1;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(0);
 if (!($8)) {
  ___assert_fail((2855|0),(904|0),1815,(4006|0));
  // unreachable;
 }
 $9 = $0;
 $10 = $1;
 $11 = $2;
 _assign($9,$10,$11);
 $12 = $2;
 $13 = $0;
 $14 = ((($13)) + 68|0);
 $15 = ($12|0)!=($14|0);
 if (!($15)) {
  ___assert_fail((2967|0),(904|0),1823,(4006|0));
  // unreachable;
 }
 $16 = $2;
 $17 = $16;
 $18 = 1 & $17;
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = $0;
   $21 = $1;
   $22 = $0;
   $23 = ((($22)) + 40|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $0;
   $26 = ((($25)) + 40|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $29 = $28;
   $30 = (($29>>>0) / 2)&-1;
   $31 = (($27) + ($30)|0);
   $32 = $0;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $31;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = 1 ^ $37;
   $39 = (($24) + ($38)|0);
   $40 = (_setimpl($20,$21,$39)|0);
   $2 = $40;
   $41 = $2;
   $42 = ($41|0)!=(0|0);
   if ($42) {
    break;
   } else {
    ___assert_fail((3999|0),(904|0),1826,(4006|0));
    // unreachable;
   }
  }
 } while(0);
 $43 = $0;
 $44 = ((($43)) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $1;
 $47 = $0;
 $48 = ((($47)) + 40|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $46;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 2)&-1;
 $54 = (($45) + (($53*12)|0)|0);
 $v = $54;
 $55 = $0;
 $56 = ((($55)) + 28|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  $59 = $0;
  $60 = $v;
  _use_var($59,$60);
 }
 $61 = $0;
 $62 = ((($61)) + 28|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0);
 do {
  if (!($64)) {
   $65 = $2;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66>>>0)>(1);
   if ($67) {
    $68 = $0;
    $69 = $1;
    $70 = $2;
    $71 = (_resolve_top_level_unit($68,$69,$70)|0);
    $2 = $71;
    $72 = $2;
    $73 = ($72|0)!=(0|0);
    if ($73) {
     break;
    } else {
     ___assert_fail((3999|0),(904|0),1839,(4006|0));
     // unreachable;
    }
   }
  }
 } while(0);
 $74 = $2;
 $75 = $74;
 $76 = 1 & $75;
 $77 = ($76|0)!=(0);
 if (!($77)) {
  $78 = $2;
  $79 = $0;
  $80 = ((($79)) + 68|0);
  $81 = ($78|0)==($80|0);
  if (!($81)) {
   $82 = $2;
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84 >>> 2;
   $86 = $85 & 1;
   $87 = ($86|0)!=(0);
   if ($87) {
    ___assert_fail((4020|0),(904|0),1848,(4006|0));
    // unreachable;
   }
   $88 = $2;
   $89 = ((($88)) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $90 & -5;
   $92 = $91 | 4;
   HEAP32[$89>>2] = $92;
   $93 = $2;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 >>> 1;
   $97 = $96 & 1;
   $98 = ($97|0)!=(0);
   if ($98) {
    $99 = $2;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100>>>0)>(2);
    if ($101) {
     $102 = $0;
     $103 = ((($102)) + 584|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($104) + 1)|0;
     HEAP32[$103>>2] = $105;
    }
   }
  }
 }
 $106 = $2;
 $107 = $0;
 $108 = ((($107)) + 68|0);
 $109 = ($106|0)==($108|0);
 if ($109) {
  $110 = $0;
  _resetimpl($110);
 }
 $111 = $0;
 $112 = ((($111)) + 28|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0);
 if ($114) {
  STACKTOP = sp;return;
 }
 $115 = $0;
 $116 = $v;
 _fixvar($115,$116);
 STACKTOP = sp;return;
}
function _setcimpl($ps,$a,$b) {
 $ps = $ps|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = ((($3)) + 120|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  ___assert_fail((3954|0),(904|0),1584,(3970|0));
  // unreachable;
 }
 $7 = $0;
 $8 = ((($7)) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(2);
 if ($10) {
  $11 = $1;
  $12 = $0;
  $13 = ((($12)) + 92|0);
  $14 = ((($13)) + 16|0);
  HEAP32[$14>>2] = $11;
  $15 = $2;
  $16 = $0;
  $17 = ((($16)) + 92|0);
  $18 = ((($17)) + 16|0);
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $15;
  $20 = $0;
  $21 = ((($20)) + 92|0);
  $22 = ((($21)) + 16|0);
  _sorttwolits($22);
  $23 = $0;
  $24 = ((($23)) + 120|0);
  HEAP32[$24>>2] = 1;
  $25 = $0;
  $26 = ((($25)) + 92|0);
  STACKTOP = sp;return ($26|0);
 } else {
  ___assert_fail((3979|0),(904|0),1585,(3970|0));
  // unreachable;
 }
 return (0)|0;
}
function _resolve_top_level_unit($ps,$lit,$reason) {
 $ps = $ps|0;
 $lit = $lit|0;
 $reason = $reason|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $count_resolved = 0, $eol = 0;
 var $other = 0, $p = 0, $u = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $reason;
 $3 = $0;
 $4 = ((($3)) + 376|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 372|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 if (!($9)) {
  ___assert_fail((1362|0),(904|0),1738,(4073|0));
  // unreachable;
 }
 $10 = $0;
 $11 = ((($10)) + 340|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 336|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)==($15|0);
 if (!($16)) {
  ___assert_fail((3276|0),(904|0),1739,(4073|0));
  // unreachable;
 }
 $17 = $0;
 $18 = $1;
 _add_lit($17,$18);
 $19 = $0;
 $20 = $2;
 _add_antecedent($19,$20);
 $count_resolved = 1;
 $21 = $0;
 $22 = ((($21)) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = $0;
 $26 = ((($25)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $24;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $31 = (($30|0) / 2)&-1;
 $32 = (($23) + (($31*12)|0)|0);
 $v = $32;
 $33 = $2;
 $34 = (_end_of_lits($33)|0);
 $eol = $34;
 $35 = $2;
 $36 = ((($35)) + 16|0);
 $p = $36;
 while(1) {
  $37 = $p;
  $38 = $eol;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $p;
  $41 = HEAP32[$40>>2]|0;
  $other = $41;
  $42 = $0;
  $43 = ((($42)) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $other;
  $46 = $0;
  $47 = ((($46)) + 40|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $45;
  $50 = $48;
  $51 = (($49) - ($50))|0;
  $52 = (($51|0) / 2)&-1;
  $53 = (($44) + (($52*12)|0)|0);
  $u = $53;
  $54 = $u;
  $55 = $v;
  $56 = ($54|0)==($55|0);
  if (!($56)) {
   $57 = $0;
   $58 = $u;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   _add_antecedent($57,$60);
   $61 = $count_resolved;
   $62 = (($61) + 1)|0;
   $count_resolved = $62;
  }
  $63 = $p;
  $64 = ((($63)) + 4|0);
  $p = $64;
 }
 $65 = $count_resolved;
 $66 = ($65>>>0)>=(2);
 if (!($66)) {
  $87 = $0;
  $88 = ((($87)) + 336|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $0;
  $91 = ((($90)) + 340|0);
  HEAP32[$91>>2] = $89;
  $92 = $0;
  $93 = ((($92)) + 372|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $0;
  $96 = ((($95)) + 376|0);
  HEAP32[$96>>2] = $94;
  $97 = $2;
  STACKTOP = sp;return ($97|0);
 }
 $67 = $2;
 $68 = $0;
 $69 = ((($68)) + 68|0);
 $70 = ($67|0)==($69|0);
 if ($70) {
  $71 = $0;
  _resetimpl($71);
 }
 $72 = $0;
 $73 = (_add_simplified_clause($72,1)|0);
 $2 = $73;
 $74 = $2;
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(2);
 do {
  if ($76) {
   $77 = $2;
   $78 = $0;
   $79 = ((($78)) + 68|0);
   $80 = ($77|0)==($79|0);
   if ($80) {
    $81 = $0;
    $82 = $1;
    $83 = (_impl2reason($81,$82)|0);
    $2 = $83;
    break;
   } else {
    ___assert_fail((4096|0),(904|0),1768,(4073|0));
    // unreachable;
   }
  }
 } while(0);
 $84 = $0;
 $85 = $v;
 $86 = $2;
 _assign_reason($84,$85,$86);
 $97 = $2;
 STACKTOP = sp;return ($97|0);
}
function _fixvar($ps,$v) {
 $ps = $ps|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 12)&-1;
 $13 = $12<<1;
 $14 = (($4) + ($13)|0);
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((4036|0),(904|0),1784,(4056|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  ___assert_fail((4063|0),(904|0),1785,(4056|0));
  // unreachable;
 }
 $20 = $0;
 $21 = ((($20)) + 632|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$21>>2] = $23;
 $24 = $0;
 $25 = ((($24)) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = $0;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $27;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($26) + ($34<<3)|0);
 $r = $35;
 $36 = $r;
 HEAP32[$36>>2] = -1;
 $37 = $0;
 $38 = ((($37)) + 664|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = $r;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 1073741823;
 $45 = ($44|0)!=(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $0;
 $47 = $r;
 _hup($46,$47);
 STACKTOP = sp;return;
}
function _lpush($ps,$lit,$c) {
 $ps = $ps|0;
 $lit = $lit|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $new_size = 0, $newsize = 0, $old_size = 0, $oldsize = 0, $pos = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $c;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ($5|0)==($6|0);
 $8 = $7&1;
 $pos = $8;
 $9 = $0;
 $10 = ((($9)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = $0;
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $12;
 $17 = $15;
 $18 = (($16) - ($17))|0;
 $19 = (($11) + ($18<<3)|0);
 $s = $19;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(2);
 if (!($22)) {
  ___assert_fail((4160|0),(904|0),1870,(4173|0));
  // unreachable;
 }
 $23 = $s;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 $26 = $s;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 do {
  if ($25) {
   $39 = $28 >>> 27;
   $40 = 1 << $39;
   $oldsize = $40;
   $41 = $s;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 & 134217727;
   $45 = $oldsize;
   $46 = ($44>>>0)<=($45>>>0);
   if (!($46)) {
    ___assert_fail((4200|0),(904|0),1878,(4173|0));
    // unreachable;
   }
   $47 = $s;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 134217727;
   $51 = $oldsize;
   $52 = ($50|0)==($51|0);
   if ($52) {
    $53 = $oldsize;
    $54 = $53<<1;
    $newsize = $54;
    $55 = $oldsize;
    $56 = $55<<2;
    $old_size = $56;
    $57 = $newsize;
    $58 = $57<<2;
    $new_size = $58;
    $59 = $0;
    $60 = $s;
    $61 = HEAP32[$60>>2]|0;
    $62 = $old_size;
    $63 = $new_size;
    $64 = (_resize($59,$61,$62,$63)|0);
    $65 = $s;
    HEAP32[$65>>2] = $64;
    $66 = $s;
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68 >>> 27;
    $70 = (($69) + 1)|0;
    $71 = HEAP32[$67>>2]|0;
    $72 = $70 & 31;
    $73 = $72 << 27;
    $74 = $71 & 134217727;
    $75 = $74 | $73;
    HEAP32[$67>>2] = $75;
   }
  } else {
   $29 = $28 & 134217727;
   $30 = ($29|0)!=(0);
   if ($30) {
    ___assert_fail((4179|0),(904|0),1873,(4173|0));
    // unreachable;
   }
   $31 = $s;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 >>> 27;
   $35 = ($34|0)!=(0);
   if ($35) {
    ___assert_fail((4189|0),(904|0),1874,(4173|0));
    // unreachable;
   } else {
    $36 = $0;
    $37 = (_new($36,4)|0);
    $38 = $s;
    HEAP32[$38>>2] = $37;
    break;
   }
  }
 } while(0);
 $76 = $pos;
 $77 = $2;
 $78 = ((($77)) + 16|0);
 $79 = (($78) + ($76<<2)|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $s;
 $82 = ((($81)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 134217727;
 $85 = (($84) + 1)|0;
 $86 = HEAP32[$82>>2]|0;
 $87 = $85 & 134217727;
 $88 = $86 & -134217728;
 $89 = $88 | $87;
 HEAP32[$82>>2] = $89;
 $90 = $s;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + ($84<<2)|0);
 HEAP32[$92>>2] = $80;
 STACKTOP = sp;return;
}
function _cmp_added($ps,$k,$l) {
 $ps = $ps|0;
 $k = $k|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $a = 0, $b = 0, $res = 0;
 var $u = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $k;
 $3 = $l;
 $4 = $2;
 $5 = HEAP8[$4>>0]|0;
 $a = $5;
 $6 = $3;
 $7 = HEAP8[$6>>0]|0;
 $b = $7;
 $8 = $a;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $b;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if ($13) {
   $0 = -1;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  }
 }
 $14 = $a;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $b;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(0);
  if ($19) {
   $0 = 1;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  }
 }
 $20 = $1;
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = $1;
 $25 = ((($24)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $23;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = (($29|0) / 2)&-1;
 $31 = (($22) + (($30*12)|0)|0);
 $u = $31;
 $32 = $1;
 $33 = ((($32)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = $1;
 $37 = ((($36)) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $35;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = (($41|0) / 2)&-1;
 $43 = (($34) + (($42*12)|0)|0);
 $v = $43;
 $44 = $a;
 $45 = $44 << 24 >> 24;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $b;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)!=(0);
  if (!($49)) {
   ___assert_fail((4329|0),(904|0),1535,(4340|0));
   // unreachable;
  }
  $50 = $v;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $u;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $res = $56;
  $57 = $res;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $res;
   $0 = $59;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  }
 }
 $60 = $1;
 $61 = ((($60)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $u;
 $64 = $1;
 $65 = ((($64)) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $63;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 12)&-1;
 $71 = (($62) + ($70<<3)|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $1;
 $74 = ((($73)) + 48|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $v;
 $77 = $1;
 $78 = ((($77)) + 44|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $76;
 $81 = $79;
 $82 = (($80) - ($81))|0;
 $83 = (($82|0) / 12)&-1;
 $84 = (($75) + ($83<<3)|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (_cmpflt($72,$85)|0);
 $res = $86;
 $87 = $res;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $res;
  $0 = $89;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 } else {
  $90 = $u;
  $91 = $v;
  $92 = $90;
  $93 = $91;
  $94 = (($92) - ($93))|0;
  $95 = (($94|0) / 12)&-1;
  $0 = $95;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 return (0)|0;
}
function _cmpflt($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = $2;
 $5 = ($3>>>0)<($4>>>0);
 do {
  if ($5) {
   $0 = -1;
  } else {
   $6 = $1;
   $7 = $2;
   $8 = ($6>>>0)>($7>>>0);
   if ($8) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _medium_agility($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = (_dynamic_flips_per_assignment_per_mille($1)|0);
 $3 = ($2>>>0)>=(230);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _undo($ps,$new_level) {
 $ps = $ps|0;
 $new_level = $new_level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $lit = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $new_level;
 while(1) {
  $2 = $0;
  $3 = ((($2)) + 128|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $0;
  $6 = ((($5)) + 124|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)>($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = ((($9)) + 128|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + -4|0);
  HEAP32[$10>>2] = $12;
  $13 = HEAP32[$12>>2]|0;
  $lit = $13;
  $14 = $0;
  $15 = ((($14)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $lit;
  $18 = $0;
  $19 = ((($18)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = (($23|0) / 2)&-1;
  $25 = (($16) + (($24*12)|0)|0);
  $v = $25;
  $26 = $v;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $1;
  $30 = ($28|0)==($29|0);
  $31 = $0;
  if ($30) {
   label = 4;
   break;
  }
  $35 = $lit;
  _unassign($31,$35);
 }
 if ((label|0) == 4) {
  $32 = ((($31)) + 128|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 4|0);
  HEAP32[$32>>2] = $34;
 }
 $36 = $1;
 $37 = $0;
 $38 = ((($37)) + 28|0);
 HEAP32[$38>>2] = $36;
 $39 = $0;
 $40 = ((($39)) + 128|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $0;
 $43 = ((($42)) + 136|0);
 HEAP32[$43>>2] = $41;
 $44 = $0;
 $45 = ((($44)) + 128|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $0;
 $48 = ((($47)) + 140|0);
 HEAP32[$48>>2] = $46;
 $49 = $0;
 $50 = ((($49)) + 332|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $0;
 $53 = ((($52)) + 92|0);
 $54 = ($51|0)==($53|0);
 if ($54) {
  $55 = $0;
  _resetcimpl($55);
 }
 $56 = $0;
 $57 = ((($56)) + 328|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $0;
 $60 = ((($59)) + 332|0);
 HEAP32[$60>>2] = $58;
 $61 = $0;
 $62 = ((($61)) + 28|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $0;
 $65 = ((($64)) + 144|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($63>>>0)<($66>>>0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = $0;
 $69 = ((($68)) + 148|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $0;
 $72 = ((($71)) + 152|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70>>>0)<($73>>>0);
 if (!($74)) {
  ___assert_fail((3178|0),(904|0),2791,(4419|0));
  // unreachable;
 }
 $75 = $0;
 $76 = ((($75)) + 144|0);
 HEAP32[$76>>2] = 0;
 $77 = $0;
 $78 = ((($77)) + 148|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $0;
 $81 = ((($80)) + 156|0);
 HEAP32[$81>>2] = $79;
 STACKTOP = sp;return;
}
function _inc_lrestart($ps,$skip) {
 $ps = $ps|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delta = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $skip;
 $2 = $0;
 $3 = ((($2)) + 592|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = (_luby($5)|0);
 $7 = ($6*100)|0;
 $delta = $7;
 $8 = $0;
 $9 = ((($8)) + 676|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $delta;
 $12 = (($10) + ($11))|0;
 $13 = $0;
 $14 = ((($13)) + 588|0);
 HEAP32[$14>>2] = $12;
 $15 = $0;
 $16 = ((($15)) + 600|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 $19 = $0;
 $20 = $1;
 $21 = ($20|0)!=(0);
 if ($18) {
  $22 = $21 ? 78 : 82;
  $23 = $22&255;
  _report($19,1,$23);
 } else {
  $24 = $21 ? 110 : 114;
  $25 = $24&255;
  _report($19,2,$25);
 }
 $26 = $delta;
 $27 = $0;
 $28 = ((($27)) + 596|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($26>>>0)>($29>>>0);
 if ($30) {
  $31 = $delta;
  $32 = $0;
  $33 = ((($32)) + 596|0);
  HEAP32[$33>>2] = $31;
  $34 = $0;
  $35 = ((($34)) + 600|0);
  HEAP32[$35>>2] = 1;
  STACKTOP = sp;return;
 } else {
  $36 = $0;
  $37 = ((($36)) + 600|0);
  HEAP32[$37>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _luby($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $k = 1;
 while(1) {
  $2 = $k;
  $3 = ($2>>>0)<(32);
  if (!($3)) {
   break;
  }
  $4 = $1;
  $5 = $k;
  $6 = 1 << $5;
  $7 = (($6) - 1)|0;
  $8 = ($4|0)==($7|0);
  $9 = $k;
  if ($8) {
   label = 4;
   break;
  }
  $12 = (($9) + 1)|0;
  $k = $12;
 }
 if ((label|0) == 4) {
  $10 = (($9) - 1)|0;
  $11 = 1 << $10;
  $0 = $11;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $k = 1;
 while(1) {
  $13 = $k;
  $14 = (($13) - 1)|0;
  $15 = 1 << $14;
  $16 = $1;
  $17 = ($15>>>0)<=($16>>>0);
  if ($17) {
   $18 = $1;
   $19 = $k;
   $20 = 1 << $19;
   $21 = (($20) - 1)|0;
   $22 = ($18>>>0)<($21>>>0);
   if ($22) {
    break;
   }
  }
  $30 = $k;
  $31 = (($30) + 1)|0;
  $k = $31;
 }
 $23 = $1;
 $24 = $k;
 $25 = (($24) - 1)|0;
 $26 = 1 << $25;
 $27 = (($23) - ($26))|0;
 $28 = (($27) + 1)|0;
 $29 = (_luby($28)|0);
 $0 = $29;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _unassign($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $next = 0, $or$cond = 0, $other = 0, $p = 0, $q = 0, $r = 0, $reason = 0, $v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___assert_fail((4450|0),(904|0),2665,(4467|0));
  // unreachable;
 }
 $6 = $0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $0;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = (($15|0) / 2)&-1;
 $17 = (($8) + (($16*12)|0)|0);
 $v = $17;
 $18 = $v;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $reason = $20;
 $21 = $reason;
 $22 = $0;
 $23 = ((($22)) + 68|0);
 $24 = ($21|0)!=($23|0);
 if (!($24)) {
  ___assert_fail((2967|0),(904|0),2673,(4467|0));
  // unreachable;
 }
 $25 = $reason;
 $26 = $25;
 $27 = 1 & $26;
 $28 = ($27|0)==(0);
 $29 = $reason;
 $30 = ($29|0)!=(0|0);
 $or$cond = $28 & $30;
 do {
  if ($or$cond) {
   $31 = $reason;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 >>> 2;
   $35 = $34 & 1;
   $36 = ($35|0)!=(0);
   if (!($36)) {
    ___assert_fail((3299|0),(904|0),2679,(4467|0));
    // unreachable;
   }
   $37 = $reason;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 & -5;
   HEAP32[$38>>2] = $40;
   $41 = $reason;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 >>> 1;
   $45 = $44 & 1;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $reason;
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48>>>0)>(2);
    if ($49) {
     $50 = $0;
     $51 = ((($50)) + 584|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52>>>0)>(0);
     if ($53) {
      $54 = $0;
      $55 = ((($54)) + 584|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($56) + -1)|0;
      HEAP32[$55>>2] = $57;
      break;
     } else {
      ___assert_fail((3314|0),(904|0),2682,(4467|0));
      // unreachable;
     }
    }
   }
  }
 } while(0);
 $58 = $1;
 HEAP8[$58>>0] = 0;
 $59 = $0;
 $60 = ((($59)) + 40|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $1;
 $63 = $0;
 $64 = ((($63)) + 40|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $62;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $69 = 1 ^ $68;
 $70 = (($61) + ($69)|0);
 HEAP8[$70>>0] = 0;
 $71 = $0;
 $72 = ((($71)) + 48|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $v;
 $75 = $0;
 $76 = ((($75)) + 44|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $74;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 12)&-1;
 $82 = (($73) + ($81<<3)|0);
 $r = $82;
 $83 = $r;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 & 1073741823;
 $87 = ($86|0)!=(0);
 if (!($87)) {
  $88 = $0;
  $89 = $r;
  _hpush($88,$89);
 }
 $90 = $0;
 $91 = ((($90)) + 60|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $1;
 $94 = $0;
 $95 = ((($94)) + 40|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $93;
 $98 = $96;
 $99 = (($97) - ($98))|0;
 $100 = (($92) + ($99<<2)|0);
 $q = $100;
 $101 = $q;
 $102 = HEAP32[$101>>2]|0;
 $p = $102;
 $103 = $q;
 HEAP32[$103>>2] = 0;
 while(1) {
  $104 = $p;
  $105 = ($104|0)!=(0|0);
  if (!($105)) {
   label = 23;
   break;
  }
  $106 = $p;
  $107 = ((($106)) + 16|0);
  $108 = HEAP32[$107>>2]|0;
  $other = $108;
  $109 = $other;
  $110 = $1;
  $111 = ($109|0)==($110|0);
  $112 = $p;
  $113 = ((($112)) + 16|0);
  $114 = ((($113)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  if ($111) {
   $other = $115;
   $116 = $p;
   $117 = ((($116)) + 8|0);
   $118 = ((($117)) + 4|0);
   $q = $118;
  } else {
   $119 = $1;
   $120 = ($115|0)==($119|0);
   if (!($120)) {
    label = 20;
    break;
   }
   $121 = $p;
   $122 = ((($121)) + 8|0);
   $q = $122;
  }
  $123 = $q;
  $124 = HEAP32[$123>>2]|0;
  $next = $124;
  $125 = $0;
  $126 = ((($125)) + 56|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $other;
  $129 = $0;
  $130 = ((($129)) + 40|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $128;
  $133 = $131;
  $134 = (($132) - ($133))|0;
  $135 = (($127) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $q;
  HEAP32[$137>>2] = $136;
  $138 = $p;
  $139 = $0;
  $140 = ((($139)) + 56|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $other;
  $143 = $0;
  $144 = ((($143)) + 40|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $142;
  $147 = $145;
  $148 = (($146) - ($147))|0;
  $149 = (($141) + ($148<<2)|0);
  HEAP32[$149>>2] = $138;
  $150 = $next;
  $p = $150;
 }
 if ((label|0) == 20) {
  ___assert_fail((4476|0),(904|0),2709,(4467|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _resetcimpl($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 120|0);
  HEAP32[$6>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((4424|0),(904|0),1597,(4439|0));
  // unreachable;
 }
}
function _reduce_limit_on_lclauses($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 568|0);
 $3 = HEAP32[$2>>2]|0;
 $res = $3;
 $4 = $0;
 $5 = ((($4)) + 584|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $res;
 $8 = (($7) + ($6))|0;
 $res = $8;
 $9 = $res;
 STACKTOP = sp;return ($9|0);
}
function _clause_satisfied($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eol = 0, $lit = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = (_end_of_lits($2)|0);
 $eol = $3;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $p = $5;
 while(1) {
  $6 = $p;
  $7 = $eol;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $p;
  $10 = HEAP32[$9>>2]|0;
  $lit = $10;
  $11 = $lit;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(1);
  if ($14) {
   label = 4;
   break;
  }
  $15 = $p;
  $16 = ((($15)) + 4|0);
  $p = $16;
 }
 if ((label|0) == 4) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _inc_vinc($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 420|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 432|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_mulflt($3,$6)|0);
 $8 = $0;
 $9 = ((($8)) + 420|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return;
}
function _inc_cinc($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 436|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 448|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_mulflt($3,$6)|0);
 $8 = $0;
 $9 = ((($8)) + 436|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = ((($10)) + 440|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 436|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)<($15>>>0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $0;
 _crescore($17);
 STACKTOP = sp;return;
}
function _mulflt($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $accu = 0, $ea = 0, $eb = 0, $ma = 0, $mb = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $accu = sp;
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = $2;
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $6 = $1;
  $tmp = $6;
  $7 = $2;
  $1 = $7;
  $8 = $tmp;
  $2 = $8;
 }
 $9 = $2;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $11 = $1;
 $12 = $11 & 16777215;
 $ma = $12;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = (($14) - 128)|0;
 $ea = $15;
 $16 = $ma;
 $17 = $16 | 16777216;
 $ma = $17;
 $18 = $2;
 $19 = $18 & 16777215;
 $mb = $19;
 $20 = $2;
 $21 = $20 >>> 24;
 $22 = (($21) - 128)|0;
 $eb = $22;
 $23 = $mb;
 $24 = $23 | 16777216;
 $mb = $24;
 $25 = $eb;
 $26 = $ea;
 $27 = (($26) + ($25))|0;
 $ea = $27;
 $28 = $ea;
 $29 = (($28) + 24)|0;
 $ea = $29;
 $30 = $ea;
 $31 = ($30|0)>(127);
 if ($31) {
  $0 = -1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $32 = $ea;
 $33 = ($32|0)<(-128);
 if ($33) {
  $0 = 1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $34 = $ma;
 $35 = $accu;
 $36 = $35;
 HEAP32[$36>>2] = $34;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $39 = $mb;
 $40 = $accu;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (___muldi3(($42|0),($45|0),($39|0),0)|0);
 $47 = tempRet0;
 $48 = $accu;
 $49 = $48;
 HEAP32[$49>>2] = $46;
 $50 = (($48) + 4)|0;
 $51 = $50;
 HEAP32[$51>>2] = $47;
 $52 = $accu;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (_bitshift64Lshr(($54|0),($57|0),24)|0);
 $59 = tempRet0;
 $60 = $accu;
 $61 = $60;
 HEAP32[$61>>2] = $58;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $59;
 $64 = $accu;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69>>>0)>(0);
 $71 = ($66>>>0)>=(33554432);
 $72 = ($69|0)==(0);
 $73 = $72 & $71;
 $74 = $70 | $73;
 if ($74) {
  $75 = $ea;
  $76 = ($75|0)==(127);
  if ($76) {
   $0 = -1;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $77 = $ea;
  $78 = (($77) + 1)|0;
  $ea = $78;
  $79 = $accu;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + 4)|0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (_bitshift64Lshr(($81|0),($84|0),1)|0);
  $86 = tempRet0;
  $87 = $accu;
  $88 = $87;
  HEAP32[$88>>2] = $85;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = $86;
  $91 = $accu;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96>>>0)>(0);
  $98 = ($93>>>0)>=(33554432);
  $99 = ($96|0)==(0);
  $100 = $99 & $98;
  $101 = $97 | $100;
  if ($101) {
   $0 = -1;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 }
 $102 = $accu;
 $103 = $102;
 $104 = HEAP32[$103>>2]|0;
 $105 = (($102) + 4)|0;
 $106 = $105;
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107>>>0)<(0);
 $109 = ($104>>>0)<(33554432);
 $110 = ($107|0)==(0);
 $111 = $110 & $109;
 $112 = $108 | $111;
 if (!($112)) {
  ___assert_fail((4637|0),(904|0),838,(4653|0));
  // unreachable;
 }
 $113 = $accu;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = (($113) + 4)|0;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = $115 & 16777216;
 $120 = ($119|0)!=(0);
 $121 = (0)!=(0);
 $122 = $120 | $121;
 if (!($122)) {
  ___assert_fail((4660|0),(904|0),839,(4653|0));
  // unreachable;
 }
 $123 = $accu;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($123) + 4)|0;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $ma = $125;
 $129 = $ma;
 $130 = $129 & -16777217;
 $ma = $130;
 $131 = $ma;
 $132 = $ea;
 $133 = (_packflt($131,$132)|0);
 $0 = $133;
 $134 = $0;
 STACKTOP = sp;return ($134|0);
}
function _crescore($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $c = 0, $factor = 0, $l = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 436|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_log2flt($3)|0);
 $l = $4;
 $5 = $l;
 $6 = ($5|0)>(0);
 if (!($6)) {
  ___assert_fail((4622|0),(904|0),3979,(4628|0));
  // unreachable;
 }
 $7 = $l;
 $8 = (0 - ($7))|0;
 $9 = (_base2flt(1,$8)|0);
 $factor = $9;
 $10 = $0;
 $11 = ((($10)) + 280|0);
 $12 = HEAP32[$11>>2]|0;
 $p = $12;
 while(1) {
  $13 = $p;
  $14 = $0;
  $15 = ((($14)) + 284|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)!=($16|0);
  if (!($17)) {
   label = 15;
   break;
  }
  $18 = $p;
  $19 = HEAP32[$18>>2]|0;
  $c = $19;
  $20 = $c;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $c;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 >>> 1;
   $26 = $25 & 1;
   $27 = ($26|0)!=(0);
   if (!($27)) {
    label = 7;
    break;
   }
   $28 = $c;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29>>>0)<=(2);
   if (!($30)) {
    $31 = $c;
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 >>> 1;
    $35 = $34 & 1;
    $36 = ($35|0)!=(0);
    if (!($36)) {
     label = 10;
     break;
    }
    $37 = $c;
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38>>>0)>(2);
    if (!($39)) {
     label = 12;
     break;
    }
    $40 = $c;
    $41 = ((($40)) + 16|0);
    $42 = $c;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + ($43<<2)|0);
    $a = $44;
    $45 = $a;
    $46 = HEAP32[$45>>2]|0;
    $47 = $factor;
    $48 = (_mulflt($46,$47)|0);
    $49 = $a;
    HEAP32[$49>>2] = $48;
   }
  }
  $50 = $p;
  $51 = ((($50)) + 4|0);
  $p = $51;
 }
 if ((label|0) == 7) {
  ___assert_fail((1853|0),(904|0),3992,(4628|0));
  // unreachable;
 }
 else if ((label|0) == 10) {
  ___assert_fail((1898|0),(904|0),3997,(4628|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  ___assert_fail((1911|0),(904|0),3997,(4628|0));
  // unreachable;
 }
 else if ((label|0) == 15) {
  $52 = $0;
  $53 = ((($52)) + 436|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $factor;
  $56 = (_mulflt($54,$55)|0);
  $57 = $0;
  $58 = ((($57)) + 436|0);
  HEAP32[$58>>2] = $56;
  STACKTOP = sp;return;
 }
}
function _log2flt($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $1 >>> 24;
 $3 = (($2) - 128)|0;
 $4 = (($3) + 24)|0;
 STACKTOP = sp;return ($4|0);
}
function _analyze($ps) {
 $ps = $ps|0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $eol = 0, $i = 0, $l = 0, $m = 0, $minlevel = 0, $old = 0, $open = 0, $or$cond = 0, $orig = 0, $other = 0, $p = 0, $q = 0;
 var $siglevels = 0, $start = 0, $this = 0, $u = 0, $uip = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 332|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((4856|0),(904|0),3143,(4869|0));
  // unreachable;
 }
 $5 = $0;
 $6 = ((($5)) + 340|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = ((($8)) + 336|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)==($10|0);
 if (!($11)) {
  ___assert_fail((3276|0),(904|0),3145,(4869|0));
  // unreachable;
 }
 $12 = $0;
 $13 = ((($12)) + 352|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 348|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)==($17|0);
 if (!($18)) {
  ___assert_fail((2294|0),(904|0),3146,(4869|0));
  // unreachable;
 }
 $19 = $0;
 $20 = ((($19)) + 376|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 372|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21|0)==($24|0);
 if (!($25)) {
  ___assert_fail((1362|0),(904|0),3147,(4869|0));
  // unreachable;
 }
 $26 = $0;
 $27 = ((($26)) + 128|0);
 $28 = HEAP32[$27>>2]|0;
 $q = $28;
 $open = 0;
 $29 = $0;
 $30 = ((($29)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $minlevel = $31;
 $siglevels = 0;
 $uip = 0;
 $32 = $0;
 $33 = ((($32)) + 332|0);
 $34 = HEAP32[$33>>2]|0;
 $c = $34;
 L13: while(1) {
  $35 = $0;
  $36 = $c;
  _add_antecedent($35,$36);
  $37 = $0;
  $38 = $c;
  _inc_activity($37,$38);
  $39 = $c;
  $40 = (_end_of_lits($39)|0);
  $eol = $40;
  $41 = $c;
  $42 = ((($41)) + 16|0);
  $p = $42;
  while(1) {
   $43 = $p;
   $44 = $eol;
   $45 = ($43>>>0)<($44>>>0);
   if (!($45)) {
    break;
   }
   $46 = $p;
   $47 = HEAP32[$46>>2]|0;
   $other = $47;
   $48 = $other;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49 << 24 >> 24;
   $51 = ($50|0)==(1);
   do {
    if (!($51)) {
     $52 = $other;
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     $55 = ($54|0)==(-1);
     if (!($55)) {
      label = 14;
      break L13;
     }
     $56 = $0;
     $57 = ((($56)) + 44|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $other;
     $60 = $0;
     $61 = ((($60)) + 40|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $59;
     $64 = $62;
     $65 = (($63) - ($64))|0;
     $66 = (($65|0) / 2)&-1;
     $67 = (($58) + (($66*12)|0)|0);
     $u = $67;
     $68 = $u;
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 & 1;
     $71 = $70&65535;
     $72 = ($71|0)!=(0);
     if (!($72)) {
      $73 = $u;
      $74 = HEAP16[$73>>1]|0;
      $75 = $74 & -2;
      $76 = $75 | 1;
      HEAP16[$73>>1] = $76;
      $77 = $0;
      $78 = $u;
      _inc_score($77,$78);
      $79 = $0;
      $80 = $u;
      _use_var($79,$80);
      $81 = $u;
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $0;
      $85 = ((($84)) + 28|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($83|0)==($86|0);
      if ($87) {
       $88 = $open;
       $89 = (($88) + 1)|0;
       $open = $89;
       break;
      }
      $90 = $0;
      $91 = $u;
      _push_var_as_marked($90,$91);
      $92 = $u;
      $93 = ((($92)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($94|0)!=(0);
      if ($95) {
       $96 = $0;
       $97 = ((($96)) + 748|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($98) + 1)|0;
       HEAP32[$97>>2] = $99;
       $100 = $u;
       $101 = ((($100)) + 4|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $minlevel;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        $105 = $u;
        $106 = ((($105)) + 4|0);
        $107 = HEAP32[$106>>2]|0;
        $minlevel = $107;
       }
       $108 = $u;
       $109 = ((($108)) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (_hashlevel($110)|0);
       $112 = $siglevels;
       $113 = $112 | $111;
       $siglevels = $113;
       break;
      } else {
       $114 = $u;
       $115 = ((($114)) + 4|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ($116|0)!=(0);
       if ($117) {
        label = 23;
        break L13;
       }
       $118 = $u;
       $119 = ((($118)) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ($120|0)!=(0|0);
       if (!($121)) {
        label = 25;
        break L13;
       }
       break;
      }
     }
    }
   } while(0);
   $122 = $p;
   $123 = ((($122)) + 4|0);
   $p = $123;
  }
  while(1) {
   $124 = $q;
   $125 = $0;
   $126 = ((($125)) + 124|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($124|0)==($127|0);
   if ($128) {
    label = 29;
    break L13;
   }
   $129 = $q;
   $130 = ((($129)) + -4|0);
   $q = $130;
   $131 = HEAP32[$130>>2]|0;
   $this = $131;
   $132 = $0;
   $133 = ((($132)) + 44|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $this;
   $136 = $0;
   $137 = ((($136)) + 40|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $135;
   $140 = $138;
   $141 = (($139) - ($140))|0;
   $142 = (($141|0) / 2)&-1;
   $143 = (($134) + (($142*12)|0)|0);
   $uip = $143;
   $144 = $uip;
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 & 1;
   $147 = $146&65535;
   $148 = ($147|0)!=(0);
   $149 = $148 ^ 1;
   if (!($149)) {
    break;
   }
  }
  $150 = $uip;
  $151 = HEAP16[$150>>1]|0;
  $152 = $151 & -2;
  HEAP16[$150>>1] = $152;
  $153 = $0;
  $154 = $uip;
  $155 = (_var2reason($153,$154)|0);
  $c = $155;
  $156 = $c;
  $157 = $0;
  $158 = ((($157)) + 68|0);
  $159 = ($156|0)==($158|0);
  if ($159) {
   $160 = $0;
   _resetimpl($160);
  }
  $161 = $open;
  $162 = (($161) + -1)|0;
  $open = $162;
  $163 = $open;
  $164 = ($163|0)!=(0);
  if ($164) {
   $$old = $c;
   $$old1 = ($$old|0)!=(0|0);
   if (!($$old1)) {
    break;
   }
  } else {
   $165 = $0;
   $166 = ((($165)) + 28|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)==(0);
   $169 = $c;
   $170 = ($169|0)!=(0|0);
   $or$cond = $168 & $170;
   if (!($or$cond)) {
    break;
   }
  }
  $171 = $c;
  $172 = ($171|0)!=(0|0);
  if (!($172)) {
   label = 37;
   break;
  }
 }
 if ((label|0) == 14) {
  ___assert_fail((3371|0),(904|0),3171,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  ___assert_fail((4877|0),(904|0),3199,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 25) {
  ___assert_fail((4887|0),(904|0),3200,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 29) {
  $uip = 0;
 }
 else if ((label|0) == 37) {
  ___assert_fail((4350|0),(904|0),3226,(4869|0));
  // unreachable;
 }
 $173 = $uip;
 $174 = ($173|0)!=(0|0);
 $175 = $0;
 $176 = ((($175)) + 28|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0);
 do {
  if ($174) {
   if ($178) {
    $179 = $0;
    $180 = ((($179)) + 40|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $uip;
    $183 = $0;
    $184 = ((($183)) + 44|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $182;
    $187 = $185;
    $188 = (($186) - ($187))|0;
    $189 = (($188|0) / 12)&-1;
    $190 = $189<<1;
    $191 = (($181) + ($190)|0);
    $this = $191;
    $192 = $this;
    $193 = HEAP8[$192>>0]|0;
    $194 = $193 << 24 >> 24;
    $195 = ($194|0)==(1);
    $196 = $195&1;
    $197 = $this;
    $198 = (($197) + ($196)|0);
    $this = $198;
    $199 = $0;
    $200 = ((($199)) + 748|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = (($201) + 1)|0;
    HEAP32[$200>>2] = $202;
    $203 = $0;
    $204 = ((($203)) + 744|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (($205) + 1)|0;
    HEAP32[$204>>2] = $206;
    $207 = $0;
    $208 = $this;
    _add_lit($207,$208);
    break;
   } else {
    ___assert_fail((4897|0),(904|0),3232,(4869|0));
    // unreachable;
   }
  } else {
   if ($178) {
    ___assert_fail((2784|0),(904|0),3243,(4869|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $209 = $0;
 $210 = ((($209)) + 352|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $0;
 $213 = ((($212)) + 348|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = $211;
 $216 = $214;
 $217 = (($215) - ($216))|0;
 $218 = (($217|0) / 4)&-1;
 $orig = $218;
 $i = 0;
 L63: while(1) {
  $219 = $i;
  $220 = $orig;
  $221 = ($219>>>0)<($220>>>0);
  if (!($221)) {
   label = 76;
   break;
  }
  $222 = $i;
  $223 = $0;
  $224 = ((($223)) + 348|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225) + ($222<<2)|0);
  $227 = HEAP32[$226>>2]|0;
  $start = $227;
  $228 = $start;
  $229 = HEAP16[$228>>1]|0;
  $230 = $229 & 1;
  $231 = $230&65535;
  $232 = ($231|0)!=(0);
  if (!($232)) {
   label = 49;
   break;
  }
  $233 = $start;
  $234 = $uip;
  $235 = ($233|0)!=($234|0);
  if (!($235)) {
   label = 51;
   break;
  }
  $236 = $start;
  $237 = ((($236)) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $0;
  $240 = ((($239)) + 28|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ($238>>>0)<($241>>>0);
  if (!($242)) {
   label = 53;
   break;
  }
  $243 = $start;
  $244 = ((($243)) + 8|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ($245|0)!=(0|0);
  L69: do {
   if ($246) {
    $247 = $0;
    $248 = ((($247)) + 352|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $0;
    $251 = ((($250)) + 348|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $249;
    $254 = $252;
    $255 = (($253) - ($254))|0;
    $256 = (($255|0) / 4)&-1;
    $old = $256;
    $257 = $0;
    $258 = ((($257)) + 364|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $0;
    $261 = ((($260)) + 360|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==($262|0);
    if (!($263)) {
     label = 56;
     break L63;
    }
    $264 = $0;
    $265 = $start;
    _push($264,$265);
    L72: while(1) {
     $266 = $0;
     $267 = ((($266)) + 364|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = $0;
     $270 = ((($269)) + 360|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($268>>>0)>($271>>>0);
     if (!($272)) {
      break L69;
     }
     $273 = $0;
     $274 = (_pop($273)|0);
     $u = $274;
     $275 = $u;
     $276 = HEAP16[$275>>1]|0;
     $277 = $276 & 1;
     $278 = $277&65535;
     $279 = ($278|0)!=(0);
     if (!($279)) {
      label = 60;
      break L63;
     }
     $280 = $0;
     $281 = $u;
     $282 = (_var2reason($280,$281)|0);
     $c = $282;
     $283 = $c;
     $284 = $0;
     $285 = ((($284)) + 68|0);
     $286 = ($283|0)==($285|0);
     if ($286) {
      $287 = $0;
      _resetimpl($287);
     }
     $288 = $c;
     $289 = ($288|0)!=(0|0);
     if (!($289)) {
      break;
     }
     $290 = $u;
     $291 = ((($290)) + 4|0);
     $292 = HEAP32[$291>>2]|0;
     $l = $292;
     $293 = ($292|0)!=(0);
     if ($293) {
      $294 = $l;
      $295 = $minlevel;
      $296 = ($294>>>0)<($295>>>0);
      if ($296) {
       break;
      }
      $297 = $l;
      $298 = (_hashlevel($297)|0);
      $299 = $siglevels;
      $300 = $299 ^ -1;
      $301 = $298 & $300;
      $302 = ($301|0)!=(0);
      if ($302) {
       break;
      }
     }
     $323 = $c;
     $324 = (_end_of_lits($323)|0);
     $eol = $324;
     $325 = $c;
     $326 = ((($325)) + 16|0);
     $p = $326;
     while(1) {
      $327 = $p;
      $328 = $eol;
      $329 = ($327>>>0)<($328>>>0);
      if (!($329)) {
       continue L72;
      }
      $330 = $0;
      $331 = ((($330)) + 44|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = $p;
      $334 = HEAP32[$333>>2]|0;
      $335 = $0;
      $336 = ((($335)) + 40|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = $334;
      $339 = $337;
      $340 = (($338) - ($339))|0;
      $341 = (($340|0) / 2)&-1;
      $342 = (($332) + (($341*12)|0)|0);
      $v = $342;
      $343 = $v;
      $344 = HEAP16[$343>>1]|0;
      $345 = $344 & 1;
      $346 = $345&65535;
      $347 = ($346|0)!=(0);
      if (!($347)) {
       $348 = $0;
       $349 = $v;
       _mark_var($348,$349);
       $350 = $0;
       $351 = $v;
       _push($350,$351);
      }
      $352 = $p;
      $353 = ((($352)) + 4|0);
      $p = $353;
     }
    }
    while(1) {
     $303 = $0;
     $304 = ((($303)) + 352|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = $0;
     $307 = ((($306)) + 348|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = $old;
     $310 = (($308) + ($309<<2)|0);
     $311 = ($305>>>0)>($310>>>0);
     $312 = $0;
     if (!($311)) {
      break;
     }
     $313 = ((($312)) + 352|0);
     $314 = HEAP32[$313>>2]|0;
     $315 = ((($314)) + -4|0);
     HEAP32[$313>>2] = $315;
     $316 = HEAP32[$315>>2]|0;
     $317 = HEAP16[$316>>1]|0;
     $318 = $317 & -2;
     HEAP16[$316>>1] = $318;
    }
    $319 = ((($312)) + 360|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = $0;
    $322 = ((($321)) + 364|0);
    HEAP32[$322>>2] = $320;
   }
  } while(0);
  $354 = $i;
  $355 = (($354) + 1)|0;
  $i = $355;
 }
 if ((label|0) == 49) {
  ___assert_fail((4907|0),(904|0),3262,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 51) {
  ___assert_fail((4919|0),(904|0),3263,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 53) {
  ___assert_fail((4932|0),(904|0),3264,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 56) {
  ___assert_fail((4957|0),(904|0),3270,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 60) {
  ___assert_fail((4978|0),(904|0),3275,(4869|0));
  // unreachable;
 }
 else if ((label|0) == 76) {
  $356 = $0;
  $357 = ((($356)) + 348|0);
  $358 = HEAP32[$357>>2]|0;
  $m = $358;
  while(1) {
   $359 = $m;
   $360 = $0;
   $361 = ((($360)) + 352|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = ($359>>>0)<($362>>>0);
   if (!($363)) {
    label = 93;
    break;
   }
   $364 = $m;
   $365 = HEAP32[$364>>2]|0;
   $v = $365;
   $366 = $v;
   $367 = HEAP16[$366>>1]|0;
   $368 = $367 & 1;
   $369 = $368&65535;
   $370 = ($369|0)!=(0);
   if (!($370)) {
    label = 79;
    break;
   }
   $371 = $v;
   $372 = HEAP16[$371>>1]|0;
   $373 = ($372&65535) >>> 1;
   $374 = $373 & 1;
   $375 = $374&65535;
   $376 = ($375|0)!=(0);
   if ($376) {
    label = 81;
    break;
   }
   $377 = $0;
   $378 = $v;
   _use_var($377,$378);
   $379 = $0;
   $380 = $v;
   $381 = (_var2reason($379,$380)|0);
   $c = $381;
   $382 = $c;
   $383 = ($382|0)!=(0|0);
   if ($383) {
    $384 = $c;
    $385 = $0;
    $386 = ((($385)) + 68|0);
    $387 = ($384|0)==($386|0);
    if ($387) {
     $388 = $0;
     _resetimpl($388);
    }
    $389 = $c;
    $390 = (_end_of_lits($389)|0);
    $eol = $390;
    $391 = $c;
    $392 = ((($391)) + 16|0);
    $p = $392;
    while(1) {
     $393 = $p;
     $394 = $eol;
     $395 = ($393>>>0)<($394>>>0);
     if (!($395)) {
      break;
     }
     $396 = $p;
     $397 = HEAP32[$396>>2]|0;
     $other = $397;
     $398 = $0;
     $399 = ((($398)) + 44|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = $other;
     $402 = $0;
     $403 = ((($402)) + 40|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = $401;
     $406 = $404;
     $407 = (($405) - ($406))|0;
     $408 = (($407|0) / 2)&-1;
     $409 = (($400) + (($408*12)|0)|0);
     $u = $409;
     $410 = $u;
     $411 = ((($410)) + 4|0);
     $412 = HEAP32[$411>>2]|0;
     $413 = ($412|0)!=(0);
     if ($413) {
      $414 = $u;
      $415 = HEAP16[$414>>1]|0;
      $416 = $415 & 1;
      $417 = $416&65535;
      $418 = ($417|0)!=(0);
      if (!($418)) {
       break;
      }
     }
     $419 = $p;
     $420 = ((($419)) + 4|0);
     $p = $420;
    }
    $421 = $p;
    $422 = $eol;
    $423 = ($421|0)!=($422|0);
    if (!($423)) {
     $424 = $0;
     $425 = $c;
     _add_antecedent($424,$425);
     $426 = $v;
     $427 = HEAP16[$426>>1]|0;
     $428 = $427 & -3;
     $429 = $428 | 2;
     HEAP16[$426>>1] = $429;
    }
   }
   $430 = $m;
   $431 = ((($430)) + 4|0);
   $m = $431;
  }
  if ((label|0) == 79) {
   ___assert_fail((2344|0),(904|0),3306,(4869|0));
   // unreachable;
  }
  else if ((label|0) == 81) {
   ___assert_fail((4986|0),(904|0),3307,(4869|0));
   // unreachable;
  }
  else if ((label|0) == 93) {
   $432 = $0;
   $433 = ((($432)) + 348|0);
   $434 = HEAP32[$433>>2]|0;
   $m = $434;
   while(1) {
    $435 = $m;
    $436 = $0;
    $437 = ((($436)) + 352|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = ($435>>>0)<($438>>>0);
    if (!($439)) {
     break;
    }
    $440 = $m;
    $441 = HEAP32[$440>>2]|0;
    $v = $441;
    $442 = $v;
    $443 = HEAP16[$442>>1]|0;
    $444 = $443 & 1;
    $445 = $444&65535;
    $446 = ($445|0)!=(0);
    if (!($446)) {
     label = 96;
     break;
    }
    $447 = $v;
    $448 = HEAP16[$447>>1]|0;
    $449 = $448 & -2;
    HEAP16[$447>>1] = $449;
    $450 = $v;
    $451 = HEAP16[$450>>1]|0;
    $452 = ($451&65535) >>> 1;
    $453 = $452 & 1;
    $454 = $453&65535;
    $455 = ($454|0)!=(0);
    if ($455) {
     $456 = $v;
     $457 = HEAP16[$456>>1]|0;
     $458 = $457 & -3;
     HEAP16[$456>>1] = $458;
    } else {
     $459 = $0;
     $460 = ((($459)) + 40|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = $v;
     $463 = $0;
     $464 = ((($463)) + 44|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = $462;
     $467 = $465;
     $468 = (($466) - ($467))|0;
     $469 = (($468|0) / 12)&-1;
     $470 = $469<<1;
     $471 = (($461) + ($470)|0);
     $this = $471;
     $472 = $this;
     $473 = HEAP8[$472>>0]|0;
     $474 = $473 << 24 >> 24;
     $475 = ($474|0)==(1);
     if ($475) {
      $476 = $this;
      $477 = ((($476)) + 1|0);
      $this = $477;
     }
     $478 = $0;
     $479 = $this;
     _add_lit($478,$479);
     $480 = $0;
     $481 = ((($480)) + 744|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = (($482) + 1)|0;
     HEAP32[$481>>2] = $483;
    }
    $484 = $m;
    $485 = ((($484)) + 4|0);
    $m = $485;
   }
   if ((label|0) == 96) {
    ___assert_fail((2344|0),(904|0),3341,(4869|0));
    // unreachable;
   }
   $486 = $0;
   $487 = ((($486)) + 340|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = $0;
   $490 = ((($489)) + 344|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = ($488>>>0)<=($491>>>0);
   if (!($492)) {
    ___assert_fail((4999|0),(904|0),3357,(4869|0));
    // unreachable;
   }
   $493 = $0;
   $494 = ((($493)) + 376|0);
   $495 = HEAP32[$494>>2]|0;
   $496 = $0;
   $497 = ((($496)) + 380|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = ($495>>>0)<=($498>>>0);
   if ($499) {
    $500 = $0;
    $501 = ((($500)) + 348|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = $0;
    $504 = ((($503)) + 352|0);
    HEAP32[$504>>2] = $502;
    STACKTOP = sp;return;
   } else {
    ___assert_fail((1473|0),(904|0),3358,(4869|0));
    // unreachable;
   }
  }
 }
}
function _drive($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p = 0, $res = 0, $v = 0, $vlevel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $res = 0;
 $1 = $0;
 $2 = ((($1)) + 336|0);
 $3 = HEAP32[$2>>2]|0;
 $p = $3;
 while(1) {
  $4 = $p;
  $5 = $0;
  $6 = ((($5)) + 340|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $0;
  $10 = ((($9)) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $p;
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = ((($14)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $13;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 2)&-1;
  $21 = (($11) + (($20*12)|0)|0);
  $v = $21;
  $22 = $v;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $vlevel = $24;
  $25 = $vlevel;
  $26 = $0;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25>>>0)<=($28>>>0);
  if (!($29)) {
   label = 4;
   break;
  }
  $30 = $vlevel;
  $31 = $0;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30>>>0)<($33>>>0);
  if ($34) {
   $35 = $vlevel;
   $36 = $res;
   $37 = ($35>>>0)>($36>>>0);
   if ($37) {
    $38 = $vlevel;
    $res = $38;
   }
  }
  $39 = $p;
  $40 = ((($39)) + 4|0);
  $p = $40;
 }
 if ((label|0) == 4) {
  ___assert_fail((4830|0),(904|0),3914,(4850|0));
  // unreachable;
 }
 else if ((label|0) == 9) {
  $41 = $res;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _force($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $eol = 0, $forced = 0, $lit = 0, $p = 0, $reason = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $c;
 $forced = 0;
 $2 = $1;
 $reason = $2;
 $3 = $1;
 $4 = (_end_of_lits($3)|0);
 $eol = $4;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $p = $6;
 while(1) {
  $7 = $p;
  $8 = $eol;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 14;
   break;
  }
  $10 = $p;
  $11 = HEAP32[$10>>2]|0;
  $lit = $11;
  $12 = $lit;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $forced;
   $17 = ($16|0)!=(0|0);
   if ($17) {
    label = 5;
    break;
   }
   $18 = $lit;
   $forced = $18;
   $19 = $1;
   $20 = $0;
   $21 = ((($20)) + 68|0);
   $22 = ($19|0)==($21|0);
   if ($22) {
    $23 = $0;
    $24 = ((($23)) + 40|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $p;
    $27 = $1;
    $28 = ((($27)) + 16|0);
    $29 = ($26|0)==($28|0);
    $30 = $29 ? 1 : -1;
    $31 = $p;
    $32 = (($31) + ($30<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $0;
    $35 = ((($34)) + 40|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $33;
    $38 = $36;
    $39 = (($37) - ($38))|0;
    $40 = 1 ^ $39;
    $41 = (($25) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = ($43|0)==(1);
    if (!($44)) {
     label = 8;
     break;
    }
    $45 = $0;
    $46 = ((($45)) + 40|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $p;
    $49 = $1;
    $50 = ((($49)) + 16|0);
    $51 = ($48|0)==($50|0);
    $52 = $51 ? 1 : -1;
    $53 = $p;
    $54 = (($53) + ($52<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $0;
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $55;
    $60 = $58;
    $61 = (($59) - ($60))|0;
    $62 = 1 ^ $61;
    $63 = (($47) + ($62)|0);
    $64 = $0;
    $65 = ((($64)) + 40|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $63;
    $68 = $66;
    $69 = (($67) - ($68))|0;
    $70 = $69<<1;
    $71 = (1 + ($70))|0;
    $72 = $71;
    $reason = $72;
   }
  } else {
   $73 = $lit;
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = ($75|0)==(-1);
   if (!($76)) {
    label = 11;
    break;
   }
  }
  $77 = $p;
  $78 = ((($77)) + 4|0);
  $p = $78;
 }
 if ((label|0) == 5) {
  ___assert_fail((4728|0),(904|0),4056,(4736|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  ___assert_fail((4742|0),(904|0),4060,(4736|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  ___assert_fail((4812|0),(904|0),4063,(4736|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  $79 = $1;
  $80 = $0;
  $81 = ((($80)) + 68|0);
  $82 = ($79|0)==($81|0);
  if ($82) {
   $83 = $0;
   _resetimpl($83);
  }
  $84 = $forced;
  $85 = ($84|0)!=(0|0);
  if (!($85)) {
   STACKTOP = sp;return;
  }
  $86 = $0;
  $87 = $forced;
  $88 = $reason;
  _assign_forced($86,$87,$88);
  STACKTOP = sp;return;
 }
}
function _inc_activity($ps,$c) {
 $ps = $ps|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $c;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 1;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<=(2);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 1;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  ___assert_fail((1898|0),(904|0),3119,(5113|0));
  // unreachable;
 }
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)>(2);
 if (!($19)) {
  ___assert_fail((1911|0),(904|0),3119,(5113|0));
  // unreachable;
 }
 $20 = $1;
 $21 = ((($20)) + 16|0);
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + ($23<<2)|0);
 $p = $24;
 $25 = $p;
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 436|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_addflt($26,$29)|0);
 $31 = $p;
 HEAP32[$31>>2] = $30;
 STACKTOP = sp;return;
}
function _inc_score($ps,$v) {
 $ps = $ps|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $score = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 664|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11&65535) >>> 6;
 $13 = $12 & 1;
 $14 = $13&65535;
 $15 = ($14|0)!=(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = ((($16)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = $0;
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $19;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 12)&-1;
 $27 = (($18) + ($26<<3)|0);
 $r = $27;
 $28 = $r;
 $29 = HEAP32[$28>>2]|0;
 $score = $29;
 $30 = $score;
 $31 = ($30|0)!=(-1);
 if (!($31)) {
  ___assert_fail((5072|0),(904|0),3098,(5088|0));
  // unreachable;
 }
 $32 = $score;
 $33 = $0;
 $34 = ((($33)) + 420|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_addflt($32,$35)|0);
 $score = $36;
 $37 = $score;
 $38 = ($37>>>0)<(4294967295);
 if (!($38)) {
  ___assert_fail((5098|0),(904|0),3101,(5088|0));
  // unreachable;
 }
 $39 = $score;
 $40 = $r;
 HEAP32[$40>>2] = $39;
 $41 = $r;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 1073741823;
 $45 = ($44|0)>(0);
 if ($45) {
  $46 = $0;
  $47 = $r;
  _hup($46,$47);
 }
 $48 = $score;
 $49 = $0;
 $50 = ((($49)) + 424|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($48>>>0)>($51>>>0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $0;
 _vrescore($53);
 STACKTOP = sp;return;
}
function _hashlevel($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $0;
 $2 = $1 & 31;
 $3 = 1 << $2;
 STACKTOP = sp;return ($3|0);
}
function _push($ps,$v) {
 $ps = $ps|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $count = 0, $new_num = 0, $new_size = 0, $old_num = 0, $old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 364|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 368|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $68 = $1;
  $69 = $0;
  $70 = ((($69)) + 364|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 4|0);
  HEAP32[$70>>2] = $72;
  HEAP32[$71>>2] = $68;
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 368|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 360|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = (($17|0) / 4)&-1;
 $old_num = $18;
 $19 = $old_num;
 $20 = ($19|0)!=(0);
 $21 = $old_num;
 $22 = $21<<1;
 $23 = $20 ? $22 : 1;
 $new_num = $23;
 $24 = $0;
 $25 = ((($24)) + 364|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 360|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $26;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = (($32|0) / 4)&-1;
 $count = $33;
 $34 = $0;
 $35 = ((($34)) + 360|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = ((($37)) + 368|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36>>>0)<=($39>>>0);
 if (!($40)) {
  ___assert_fail((5044|0),(904|0),3127,(5067|0));
  // unreachable;
 }
 $41 = $old_num;
 $42 = $41<<2;
 $old_size = $42;
 $43 = $new_num;
 $44 = $43<<2;
 $new_size = $44;
 $45 = $0;
 $46 = $0;
 $47 = ((($46)) + 360|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $old_size;
 $50 = $new_size;
 $51 = (_resize($45,$48,$49,$50)|0);
 $52 = $0;
 $53 = ((($52)) + 360|0);
 HEAP32[$53>>2] = $51;
 $54 = $0;
 $55 = ((($54)) + 360|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $count;
 $58 = (($56) + ($57<<2)|0);
 $59 = $0;
 $60 = ((($59)) + 364|0);
 HEAP32[$60>>2] = $58;
 $61 = $0;
 $62 = ((($61)) + 360|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $new_num;
 $65 = (($63) + ($64<<2)|0);
 $66 = $0;
 $67 = ((($66)) + 368|0);
 HEAP32[$67>>2] = $65;
 $68 = $1;
 $69 = $0;
 $70 = ((($69)) + 364|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 4|0);
 HEAP32[$70>>2] = $72;
 HEAP32[$71>>2] = $68;
 STACKTOP = sp;return;
}
function _pop($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 360|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 364|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3>>>0)<($6>>>0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 364|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + -4|0);
  HEAP32[$9>>2] = $11;
  $12 = HEAP32[$11>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  ___assert_fail((5020|0),(904|0),3133,(5040|0));
  // unreachable;
 }
 return (0)|0;
}
function _vrescore($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eor = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6<<3)|0);
 $eor = $7;
 $8 = $0;
 $9 = ((($8)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $p = $11;
 while(1) {
  $12 = $p;
  $13 = $eor;
  $14 = ($12>>>0)<=($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $p;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(-1);
  if ($17) {
   $18 = $p;
   $19 = HEAP32[$18>>2]|0;
   $20 = $0;
   $21 = ((($20)) + 428|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_mulflt($19,$22)|0);
   $24 = $p;
   HEAP32[$24>>2] = $23;
  }
  $25 = $p;
  $26 = ((($25)) + 8|0);
  $p = $26;
 }
 $27 = $0;
 $28 = ((($27)) + 420|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $0;
 $31 = ((($30)) + 428|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_mulflt($29,$32)|0);
 $34 = $0;
 $35 = ((($34)) + 420|0);
 HEAP32[$35>>2] = $33;
 STACKTOP = sp;return;
}
function _prop2($ps,$this) {
 $ps = $ps|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $l = 0, $lstk = 0, $other = 0, $start = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $this;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  ___assert_fail((5130|0),(904|0),3487,(5360|0));
  // unreachable;
 }
 $6 = $0;
 $7 = ((($6)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $0;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = (($8) + ($15<<3)|0);
 $lstk = $16;
 $17 = $lstk;
 $18 = HEAP32[$17>>2]|0;
 $start = $18;
 $19 = $start;
 $20 = $lstk;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 134217727;
 $24 = (($19) + ($23<<2)|0);
 $l = $24;
 while(1) {
  $25 = $l;
  $26 = $start;
  $27 = ($25|0)!=($26|0);
  if (!($27)) {
   label = 13;
   break;
  }
  $28 = $0;
  $29 = ((($28)) + 736|0);
  $30 = $29;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (_i64Add(($32|0),($35|0),1,0)|0);
  $37 = tempRet0;
  $38 = $29;
  $39 = $38;
  HEAP32[$39>>2] = $36;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  $42 = $l;
  $43 = ((($42)) + -4|0);
  $l = $43;
  $44 = HEAP32[$43>>2]|0;
  $other = $44;
  $45 = $other;
  $46 = HEAP8[$45>>0]|0;
  $tmp = $46;
  $47 = $tmp;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)==(1);
  if ($49) {
   continue;
  }
  $50 = $tmp;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)!=(-1);
  $53 = $0;
  if ($52) {
   $54 = $other;
   $55 = $0;
   $56 = ((($55)) + 40|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $1;
   $59 = $0;
   $60 = ((($59)) + 40|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $58;
   $63 = $61;
   $64 = (($62) - ($63))|0;
   $65 = 1 ^ $64;
   $66 = (($57) + ($65)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $69 = ($68|0)==(1);
   if (!($69)) {
    label = 8;
    break;
   }
   $70 = $0;
   $71 = ((($70)) + 40|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = $0;
   $75 = ((($74)) + 40|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $73;
   $78 = $76;
   $79 = (($77) - ($78))|0;
   $80 = 1 ^ $79;
   $81 = (($72) + ($80)|0);
   $82 = $0;
   $83 = ((($82)) + 40|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $81;
   $86 = $84;
   $87 = (($85) - ($86))|0;
   $88 = $87<<1;
   $89 = (1 + ($88))|0;
   $90 = $89;
   _assign_forced($53,$54,$90);
   continue;
  }
  $91 = ((($53)) + 332|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $0;
  $94 = ((($93)) + 92|0);
  $95 = ($92|0)==($94|0);
  if ($95) {
   $96 = $0;
   _resetcimpl($96);
  }
  $97 = $0;
  $98 = $1;
  $99 = $other;
  $100 = (_setcimpl($97,$98,$99)|0);
  $101 = $0;
  $102 = ((($101)) + 332|0);
  HEAP32[$102>>2] = $100;
 }
 if ((label|0) == 8) {
  ___assert_fail((5366|0),(904|0),3515,(5360|0));
  // unreachable;
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function _propl($ps,$this) {
 $ps = $ps|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $eol = 0, $htp_ptr = 0, $l = 0, $new_htp_ptr = 0, $new_lit = 0, $next = 0, $other = 0, $prev = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $this;
 $2 = $0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($4) + ($11<<2)|0);
 $htp_ptr = $12;
 $13 = $1;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(-1);
 if (!($16)) {
  ___assert_fail((5130|0),(904|0),3597,(5149|0));
  // unreachable;
 }
 $17 = $htp_ptr;
 $18 = HEAP32[$17>>2]|0;
 $c = $18;
 L4: while(1) {
  $19 = $c;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   label = 51;
   break;
  }
  $21 = $0;
  $22 = ((($21)) + 736|0);
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (_i64Add(($25|0),($28|0),1,0)|0);
  $30 = tempRet0;
  $31 = $22;
  $32 = $31;
  HEAP32[$32>>2] = $29;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $30;
  $35 = $c;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36>>>0)>(0);
  if (!($37)) {
   label = 6;
   break;
  }
  $38 = $c;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $other = $40;
  $41 = $other;
  $42 = $1;
  $43 = ($41|0)!=($42|0);
  $44 = $c;
  $45 = HEAP32[$44>>2]|0;
  if ($43) {
   $46 = ($45|0)!=(1);
   if (!($46)) {
    label = 9;
    break;
   }
   $47 = $1;
   $48 = $c;
   $49 = ((($48)) + 16|0);
   HEAP32[$49>>2] = $47;
   $50 = $other;
   $51 = $c;
   $52 = ((($51)) + 16|0);
   $53 = ((($52)) + 4|0);
   HEAP32[$53>>2] = $50;
   $54 = $c;
   $55 = ((($54)) + 8|0);
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $next = $57;
   $58 = $c;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $c;
   $62 = ((($61)) + 8|0);
   $63 = ((($62)) + 4|0);
   HEAP32[$63>>2] = $60;
   $64 = $next;
   $65 = $c;
   $66 = ((($65)) + 8|0);
   HEAP32[$66>>2] = $64;
  } else {
   $67 = ($45|0)==(1);
   if ($67) {
    label = 12;
    break;
   }
   $75 = $other;
   $76 = $1;
   $77 = ($75|0)==($76|0);
   if (!($77)) {
    label = 17;
    break;
   }
   $78 = $c;
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79>>>0)>(1);
   if (!($80)) {
    label = 17;
    break;
   }
   $81 = $c;
   $82 = ((($81)) + 16|0);
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $other = $84;
   $85 = $c;
   $86 = ((($85)) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $next = $87;
  }
  $88 = $other;
  $89 = $c;
  $90 = ((($89)) + 16|0);
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($88|0)==($92|0);
  if (!($93)) {
   label = 20;
   break;
  }
  $94 = $1;
  $95 = $c;
  $96 = ((($95)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($94|0)==($97|0);
  if (!($98)) {
   label = 22;
   break;
  }
  $99 = $next;
  $100 = $c;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($99|0)==($102|0);
  if (!($103)) {
   label = 24;
   break;
  }
  $104 = $c;
  $105 = ((($104)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 & 1;
  $108 = ($107|0)!=(0);
  if ($108) {
   label = 26;
   break;
  }
  $109 = $other;
  $110 = HEAP8[$109>>0]|0;
  $111 = $110 << 24 >> 24;
  $112 = ($111|0)==(1);
  do {
   if ($112) {
    $113 = $0;
    $114 = $other;
    $115 = (_should_disconnect_head_tail($113,$114)|0);
    $116 = ($115|0)!=(0);
    if ($116) {
     $117 = $0;
     $118 = ((($117)) + 60|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $other;
     $121 = $0;
     $122 = ((($121)) + 40|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $120;
     $125 = $123;
     $126 = (($124) - ($125))|0;
     $127 = (($119) + ($126<<2)|0);
     $new_htp_ptr = $127;
     $128 = $new_htp_ptr;
     $129 = HEAP32[$128>>2]|0;
     $130 = $c;
     $131 = ((($130)) + 8|0);
     HEAP32[$131>>2] = $129;
     $132 = $c;
     $133 = $new_htp_ptr;
     HEAP32[$133>>2] = $132;
     $134 = $next;
     $135 = $htp_ptr;
     HEAP32[$135>>2] = $134;
     break;
    } else {
     $136 = $c;
     $137 = ((($136)) + 8|0);
     $htp_ptr = $137;
     break;
    }
   } else {
    $138 = $c;
    $139 = ((($138)) + 16|0);
    $140 = ((($139)) + 4|0);
    $l = $140;
    $141 = $c;
    $142 = ((($141)) + 16|0);
    $143 = $c;
    $144 = HEAP32[$143>>2]|0;
    $145 = (($142) + ($144<<2)|0);
    $eol = $145;
    $146 = $1;
    $prev = $146;
    while(1) {
     $147 = $l;
     $148 = ((($147)) + 4|0);
     $l = $148;
     $149 = $eol;
     $150 = ($148|0)!=($149|0);
     if (!($150)) {
      break;
     }
     $151 = $l;
     $152 = HEAP32[$151>>2]|0;
     $new_lit = $152;
     $153 = $prev;
     $154 = $l;
     HEAP32[$154>>2] = $153;
     $155 = $new_lit;
     $prev = $155;
     $156 = $new_lit;
     $157 = HEAP8[$156>>0]|0;
     $158 = $157 << 24 >> 24;
     $159 = ($158|0)!=(-1);
     if ($159) {
      break;
     }
    }
    $160 = $l;
    $161 = $eol;
    $162 = ($160|0)==($161|0);
    if (!($162)) {
     $200 = $new_lit;
     $201 = HEAP8[$200>>0]|0;
     $202 = $201 << 24 >> 24;
     $203 = ($202|0)==(1);
     if (!($203)) {
      $204 = $new_lit;
      $205 = HEAP8[$204>>0]|0;
      $206 = $205 << 24 >> 24;
      $207 = ($206|0)==(0);
      if (!($207)) {
       label = 48;
       break L4;
      }
     }
     $208 = $new_lit;
     $209 = $c;
     $210 = ((($209)) + 16|0);
     HEAP32[$210>>2] = $208;
     $211 = $0;
     $212 = ((($211)) + 56|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $new_lit;
     $215 = $0;
     $216 = ((($215)) + 40|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $214;
     $219 = $217;
     $220 = (($218) - ($219))|0;
     $221 = (($213) + ($220<<2)|0);
     $new_htp_ptr = $221;
     $222 = $new_htp_ptr;
     $223 = HEAP32[$222>>2]|0;
     $224 = $c;
     $225 = ((($224)) + 8|0);
     HEAP32[$225>>2] = $223;
     $226 = $c;
     $227 = $new_htp_ptr;
     HEAP32[$227>>2] = $226;
     $228 = $next;
     $229 = $htp_ptr;
     HEAP32[$229>>2] = $228;
     break;
    }
    while(1) {
     $163 = $l;
     $164 = $c;
     $165 = ((($164)) + 16|0);
     $166 = ((($165)) + 8|0);
     $167 = ($163>>>0)>($166>>>0);
     if (!($167)) {
      break;
     }
     $168 = $l;
     $169 = ((($168)) + -4|0);
     $l = $169;
     $170 = HEAP32[$169>>2]|0;
     $new_lit = $170;
     $171 = $prev;
     $172 = $l;
     HEAP32[$172>>2] = $171;
     $173 = $new_lit;
     $prev = $173;
    }
    $174 = $c;
    $175 = ((($174)) + 16|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $1;
    $178 = ($176|0)==($177|0);
    if (!($178)) {
     label = 38;
     break L4;
    }
    $179 = $other;
    $180 = $c;
    $181 = ((($180)) + 16|0);
    $182 = ((($181)) + 4|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($179|0)==($183|0);
    if (!($184)) {
     label = 40;
     break L4;
    }
    $185 = $other;
    $186 = HEAP8[$185>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = ($187|0)==(-1);
    $189 = $0;
    if ($188) {
     label = 42;
     break L4;
    }
    $196 = $other;
    $197 = $c;
    _assign_forced($189,$196,$197);
    $198 = $c;
    $199 = ((($198)) + 8|0);
    $htp_ptr = $199;
   }
  } while(0);
  $230 = $next;
  $c = $230;
 }
 switch (label|0) {
  case 6: {
   ___assert_fail((5155|0),(904|0),3619,(5149|0));
   // unreachable;
   break;
  }
  case 9: {
   ___assert_fail((5167|0),(904|0),3623,(5149|0));
   // unreachable;
   break;
  }
  case 12: {
   $68 = $0;
   $69 = ((($68)) + 332|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    ___assert_fail((2821|0),(904|0),3633,(5149|0));
    // unreachable;
   }
   $72 = $c;
   $73 = $0;
   $74 = ((($73)) + 332|0);
   HEAP32[$74>>2] = $72;
   STACKTOP = sp;return;
   break;
  }
  case 17: {
   ___assert_fail((5180|0),(904|0),3637,(5149|0));
   // unreachable;
   break;
  }
  case 20: {
   ___assert_fail((5209|0),(904|0),3641,(5149|0));
   // unreachable;
   break;
  }
  case 22: {
   ___assert_fail((5229|0),(904|0),3642,(5149|0));
   // unreachable;
   break;
  }
  case 24: {
   ___assert_fail((5248|0),(904|0),3643,(5149|0));
   // unreachable;
   break;
  }
  case 26: {
   ___assert_fail((1441|0),(904|0),3644,(5149|0));
   // unreachable;
   break;
  }
  case 38: {
   ___assert_fail((5267|0),(904|0),3692,(5149|0));
   // unreachable;
   break;
  }
  case 40: {
   ___assert_fail((5209|0),(904|0),3694,(5149|0));
   // unreachable;
   break;
  }
  case 42: {
   $190 = ((($189)) + 332|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($191|0)!=(0|0);
   if ($192) {
    ___assert_fail((2821|0),(904|0),3697,(5149|0));
    // unreachable;
   }
   $193 = $c;
   $194 = $0;
   $195 = ((($194)) + 332|0);
   HEAP32[$195>>2] = $193;
   STACKTOP = sp;return;
   break;
  }
  case 48: {
   ___assert_fail((5286|0),(904|0),3705,(5149|0));
   // unreachable;
   break;
  }
  case 51: {
   STACKTOP = sp;return;
   break;
  }
 }
}
function _should_disconnect_head_tail($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $litlevel = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $lit;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)==(1);
 if (!($6)) {
  ___assert_fail((4450|0),(904|0),3571,(5332|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = $1;
 $12 = ((($11)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $10;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 2)&-1;
 $18 = (($9) + (($17*12)|0)|0);
 $v = $18;
 $19 = $v;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $litlevel = $21;
 $22 = $litlevel;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $0 = 1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $24 = $1;
 $25 = ((($24)) + 664|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 } else {
  $28 = $litlevel;
  $29 = $1;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28>>>0)<($31>>>0);
  $33 = $32&1;
  $0 = $33;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _trivial_clause($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aa = 0, $count = 0;
 var $count8 = 0, $i = 0, $i14 = 0, $i17 = 0, $j = 0, $j15 = 0, $l = 0, $l12 = 0, $ll = 0, $m = 0, $new_num = 0, $new_num7 = 0, $new_size = 0, $new_size10 = 0, $nn = 0, $old_num = 0, $old_num6 = 0, $old_size = 0, $old_size9 = 0, $p = 0;
 var $pivot = 0, $pivot11 = 0, $prev = 0, $q = 0, $r = 0, $r13 = 0, $rr = 0, $this = 0, $tmp = 0, $tmp1 = 0, $tmp16 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $1;
 $3 = ((($2)) + 336|0);
 $4 = HEAP32[$3>>2]|0;
 $aa = $4;
 $5 = $1;
 $6 = ((($5)) + 340|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = ((($8)) + 336|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 4)&-1;
 $nn = $14;
 $l = 0;
 $15 = $nn;
 $16 = (($15) - 1)|0;
 $r = $16;
 $17 = $1;
 $18 = ((($17)) + 764|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 760|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)==($22|0);
 if (!($23)) {
  ___assert_fail((1494|0),(904|0),2351,(5504|0));
  // unreachable;
 }
 $24 = $r;
 $25 = $l;
 $26 = (($24) - ($25))|0;
 $27 = ($26|0)<=(10);
 L4: do {
  if (!($27)) {
   while(1) {
    $28 = $l;
    $29 = $r;
    $30 = (($28) + ($29))|0;
    $31 = (($30|0) / 2)&-1;
    $m = $31;
    $32 = $aa;
    $33 = $r;
    $34 = (($32) + ($33<<2)|0);
    $35 = ((($34)) + -4|0);
    $36 = HEAP32[$35>>2]|0;
    $tmp = $36;
    $37 = $aa;
    $38 = $m;
    $39 = (($37) + ($38<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $aa;
    $42 = $r;
    $43 = (($41) + ($42<<2)|0);
    $44 = ((($43)) + -4|0);
    HEAP32[$44>>2] = $40;
    $45 = $tmp;
    $46 = $aa;
    $47 = $m;
    $48 = (($46) + ($47<<2)|0);
    HEAP32[$48>>2] = $45;
    $49 = $1;
    $50 = $aa;
    $51 = $l;
    $52 = (($50) + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $aa;
    $55 = $r;
    $56 = (($54) + ($55<<2)|0);
    $57 = ((($56)) + -4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (_cmp_ptr($49,$53,$58)|0);
    $60 = ($59|0)>(0);
    if ($60) {
     $61 = $aa;
     $62 = $r;
     $63 = (($61) + ($62<<2)|0);
     $64 = ((($63)) + -4|0);
     $65 = HEAP32[$64>>2]|0;
     $tmp1 = $65;
     $66 = $aa;
     $67 = $l;
     $68 = (($66) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $aa;
     $71 = $r;
     $72 = (($70) + ($71<<2)|0);
     $73 = ((($72)) + -4|0);
     HEAP32[$73>>2] = $69;
     $74 = $tmp1;
     $75 = $aa;
     $76 = $l;
     $77 = (($75) + ($76<<2)|0);
     HEAP32[$77>>2] = $74;
    }
    $78 = $1;
    $79 = $aa;
    $80 = $l;
    $81 = (($79) + ($80<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $aa;
    $84 = $r;
    $85 = (($83) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (_cmp_ptr($78,$82,$86)|0);
    $88 = ($87|0)>(0);
    if ($88) {
     $89 = $aa;
     $90 = $r;
     $91 = (($89) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $tmp2 = $92;
     $93 = $aa;
     $94 = $l;
     $95 = (($93) + ($94<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $aa;
     $98 = $r;
     $99 = (($97) + ($98<<2)|0);
     HEAP32[$99>>2] = $96;
     $100 = $tmp2;
     $101 = $aa;
     $102 = $l;
     $103 = (($101) + ($102<<2)|0);
     HEAP32[$103>>2] = $100;
    }
    $104 = $1;
    $105 = $aa;
    $106 = $r;
    $107 = (($105) + ($106<<2)|0);
    $108 = ((($107)) + -4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $aa;
    $111 = $r;
    $112 = (($110) + ($111<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (_cmp_ptr($104,$109,$113)|0);
    $115 = ($114|0)>(0);
    if ($115) {
     $116 = $aa;
     $117 = $r;
     $118 = (($116) + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $tmp3 = $119;
     $120 = $aa;
     $121 = $r;
     $122 = (($120) + ($121<<2)|0);
     $123 = ((($122)) + -4|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = $aa;
     $126 = $r;
     $127 = (($125) + ($126<<2)|0);
     HEAP32[$127>>2] = $124;
     $128 = $tmp3;
     $129 = $aa;
     $130 = $r;
     $131 = (($129) + ($130<<2)|0);
     $132 = ((($131)) + -4|0);
     HEAP32[$132>>2] = $128;
    }
    $133 = $l;
    $134 = (($133) + 1)|0;
    $135 = (($134) - 1)|0;
    $i = $135;
    $136 = $r;
    $137 = (($136) - 1)|0;
    $j = $137;
    $138 = $j;
    $139 = $aa;
    $140 = (($139) + ($138<<2)|0);
    $141 = HEAP32[$140>>2]|0;
    $pivot = $141;
    while(1) {
     $142 = $1;
     $143 = $i;
     $144 = (($143) + 1)|0;
     $i = $144;
     $145 = $aa;
     $146 = (($145) + ($144<<2)|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $pivot;
     $149 = (_cmp_ptr($142,$147,$148)|0);
     $150 = ($149|0)<(0);
     if ($150) {
      continue;
     }
     while(1) {
      $151 = $1;
      $152 = $pivot;
      $153 = $j;
      $154 = (($153) + -1)|0;
      $j = $154;
      $155 = $aa;
      $156 = (($155) + ($154<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (_cmp_ptr($151,$152,$157)|0);
      $159 = ($158|0)<(0);
      if (!($159)) {
       break;
      }
      $160 = $j;
      $161 = $l;
      $162 = (($161) + 1)|0;
      $163 = ($160|0)==($162|0);
      if ($163) {
       break;
      }
     }
     $164 = $i;
     $165 = $j;
     $166 = ($164|0)>=($165|0);
     $167 = $aa;
     if ($166) {
      break;
     }
     $168 = $j;
     $169 = (($167) + ($168<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $tmp4 = $170;
     $171 = $aa;
     $172 = $i;
     $173 = (($171) + ($172<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $aa;
     $176 = $j;
     $177 = (($175) + ($176<<2)|0);
     HEAP32[$177>>2] = $174;
     $178 = $tmp4;
     $179 = $aa;
     $180 = $i;
     $181 = (($179) + ($180<<2)|0);
     HEAP32[$181>>2] = $178;
    }
    $182 = $r;
    $183 = (($182) - 1)|0;
    $184 = (($167) + ($183<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $tmp5 = $185;
    $186 = $aa;
    $187 = $i;
    $188 = (($186) + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $aa;
    $191 = $r;
    $192 = (($191) - 1)|0;
    $193 = (($190) + ($192<<2)|0);
    HEAP32[$193>>2] = $189;
    $194 = $tmp5;
    $195 = $aa;
    $196 = $i;
    $197 = (($195) + ($196<<2)|0);
    HEAP32[$197>>2] = $194;
    $198 = $i;
    $199 = $l;
    $200 = (($198) - ($199))|0;
    $201 = $r;
    $202 = $i;
    $203 = (($201) - ($202))|0;
    $204 = ($200|0)<($203|0);
    if ($204) {
     $205 = $i;
     $206 = (($205) + 1)|0;
     $ll = $206;
     $207 = $r;
     $rr = $207;
     $208 = $i;
     $209 = (($208) - 1)|0;
     $r = $209;
    } else {
     $210 = $l;
     $ll = $210;
     $211 = $i;
     $212 = (($211) - 1)|0;
     $rr = $212;
     $213 = $i;
     $214 = (($213) + 1)|0;
     $l = $214;
    }
    $215 = $r;
    $216 = $l;
    $217 = (($215) - ($216))|0;
    $218 = ($217|0)>(10);
    $219 = $rr;
    $220 = $ll;
    $221 = (($219) - ($220))|0;
    $222 = ($221|0)>(10);
    if (!($218)) {
     if ($222) {
      $365 = $ll;
      $l = $365;
      $366 = $rr;
      $r = $366;
      continue;
     }
     $367 = $1;
     $368 = ((($367)) + 764|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = $1;
     $371 = ((($370)) + 760|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = ($369>>>0)>($372>>>0);
     if (!($373)) {
      break L4;
     }
     $374 = $1;
     $375 = ((($374)) + 764|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = ((($376)) + -4|0);
     HEAP32[$375>>2] = $377;
     $378 = HEAP32[$377>>2]|0;
     $r = $378;
     $379 = $1;
     $380 = ((($379)) + 764|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = ((($381)) + -4|0);
     HEAP32[$380>>2] = $382;
     $383 = HEAP32[$382>>2]|0;
     $l = $383;
     continue;
    }
    if (!($222)) {
     label = 21;
     break;
    }
    $223 = $1;
    $224 = ((($223)) + 764|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $1;
    $227 = ((($226)) + 768|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($225|0)==($228|0);
    if ($229) {
     $230 = $1;
     $231 = ((($230)) + 768|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = $1;
     $234 = ((($233)) + 760|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = $232;
     $237 = $235;
     $238 = (($236) - ($237))|0;
     $239 = (($238|0) / 4)&-1;
     $old_num = $239;
     $240 = $old_num;
     $241 = ($240|0)!=(0);
     $242 = $old_num;
     $243 = $242<<1;
     $244 = $241 ? $243 : 1;
     $new_num = $244;
     $245 = $1;
     $246 = ((($245)) + 764|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = $1;
     $249 = ((($248)) + 760|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = $247;
     $252 = $250;
     $253 = (($251) - ($252))|0;
     $254 = (($253|0) / 4)&-1;
     $count = $254;
     $255 = $1;
     $256 = ((($255)) + 760|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $1;
     $259 = ((($258)) + 768|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = ($257>>>0)<=($260>>>0);
     if (!($261)) {
      label = 24;
      break;
     }
     $262 = $old_num;
     $263 = $262<<2;
     $old_size = $263;
     $264 = $new_num;
     $265 = $264<<2;
     $new_size = $265;
     $266 = $1;
     $267 = $1;
     $268 = ((($267)) + 760|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = $old_size;
     $271 = $new_size;
     $272 = (_resize($266,$269,$270,$271)|0);
     $273 = $1;
     $274 = ((($273)) + 760|0);
     HEAP32[$274>>2] = $272;
     $275 = $1;
     $276 = ((($275)) + 760|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = $count;
     $279 = (($277) + ($278<<2)|0);
     $280 = $1;
     $281 = ((($280)) + 764|0);
     HEAP32[$281>>2] = $279;
     $282 = $1;
     $283 = ((($282)) + 760|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = $new_num;
     $286 = (($284) + ($285<<2)|0);
     $287 = $1;
     $288 = ((($287)) + 768|0);
     HEAP32[$288>>2] = $286;
    }
    $289 = $ll;
    $290 = $1;
    $291 = ((($290)) + 764|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = ((($292)) + 4|0);
    HEAP32[$291>>2] = $293;
    HEAP32[$292>>2] = $289;
    $294 = $1;
    $295 = ((($294)) + 764|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $1;
    $298 = ((($297)) + 768|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = ($296|0)==($299|0);
    if ($300) {
     $301 = $1;
     $302 = ((($301)) + 768|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = $1;
     $305 = ((($304)) + 760|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $303;
     $308 = $306;
     $309 = (($307) - ($308))|0;
     $310 = (($309|0) / 4)&-1;
     $old_num6 = $310;
     $311 = $old_num6;
     $312 = ($311|0)!=(0);
     $313 = $old_num6;
     $314 = $313<<1;
     $315 = $312 ? $314 : 1;
     $new_num7 = $315;
     $316 = $1;
     $317 = ((($316)) + 764|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $1;
     $320 = ((($319)) + 760|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = $318;
     $323 = $321;
     $324 = (($322) - ($323))|0;
     $325 = (($324|0) / 4)&-1;
     $count8 = $325;
     $326 = $1;
     $327 = ((($326)) + 760|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = $1;
     $330 = ((($329)) + 768|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($328>>>0)<=($331>>>0);
     if (!($332)) {
      label = 28;
      break;
     }
     $333 = $old_num6;
     $334 = $333<<2;
     $old_size9 = $334;
     $335 = $new_num7;
     $336 = $335<<2;
     $new_size10 = $336;
     $337 = $1;
     $338 = $1;
     $339 = ((($338)) + 760|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = $old_size9;
     $342 = $new_size10;
     $343 = (_resize($337,$340,$341,$342)|0);
     $344 = $1;
     $345 = ((($344)) + 760|0);
     HEAP32[$345>>2] = $343;
     $346 = $1;
     $347 = ((($346)) + 760|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = $count8;
     $350 = (($348) + ($349<<2)|0);
     $351 = $1;
     $352 = ((($351)) + 764|0);
     HEAP32[$352>>2] = $350;
     $353 = $1;
     $354 = ((($353)) + 760|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $new_num7;
     $357 = (($355) + ($356<<2)|0);
     $358 = $1;
     $359 = ((($358)) + 768|0);
     HEAP32[$359>>2] = $357;
    }
    $360 = $rr;
    $361 = $1;
    $362 = ((($361)) + 764|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ((($363)) + 4|0);
    HEAP32[$362>>2] = $364;
    HEAP32[$363>>2] = $360;
   }
   if ((label|0) == 21) {
    ___assert_fail((1519|0),(904|0),2351,(5504|0));
    // unreachable;
   }
   else if ((label|0) == 24) {
    ___assert_fail((1550|0),(904|0),2351,(5504|0));
    // unreachable;
   }
   else if ((label|0) == 28) {
    ___assert_fail((1550|0),(904|0),2351,(5504|0));
    // unreachable;
   }
  }
 } while(0);
 $l12 = 0;
 $384 = $nn;
 $385 = (($384) - 1)|0;
 $r13 = $385;
 $386 = $r13;
 $i14 = $386;
 while(1) {
  $387 = $i14;
  $388 = $l12;
  $389 = ($387|0)>($388|0);
  if (!($389)) {
   break;
  }
  $390 = $1;
  $391 = $aa;
  $392 = $i14;
  $393 = (($391) + ($392<<2)|0);
  $394 = ((($393)) + -4|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = $aa;
  $397 = $i14;
  $398 = (($396) + ($397<<2)|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (_cmp_ptr($390,$395,$399)|0);
  $401 = ($400|0)>(0);
  if ($401) {
   $402 = $aa;
   $403 = $i14;
   $404 = (($402) + ($403<<2)|0);
   $405 = HEAP32[$404>>2]|0;
   $tmp16 = $405;
   $406 = $aa;
   $407 = $i14;
   $408 = (($406) + ($407<<2)|0);
   $409 = ((($408)) + -4|0);
   $410 = HEAP32[$409>>2]|0;
   $411 = $aa;
   $412 = $i14;
   $413 = (($411) + ($412<<2)|0);
   HEAP32[$413>>2] = $410;
   $414 = $tmp16;
   $415 = $aa;
   $416 = $i14;
   $417 = (($415) + ($416<<2)|0);
   $418 = ((($417)) + -4|0);
   HEAP32[$418>>2] = $414;
  }
  $419 = $i14;
  $420 = (($419) + -1)|0;
  $i14 = $420;
 }
 $421 = $l12;
 $422 = (($421) + 2)|0;
 $i14 = $422;
 while(1) {
  $423 = $i14;
  $424 = $r13;
  $425 = ($423|0)<=($424|0);
  if (!($425)) {
   break;
  }
  $426 = $i14;
  $j15 = $426;
  $427 = $i14;
  $428 = $aa;
  $429 = (($428) + ($427<<2)|0);
  $430 = HEAP32[$429>>2]|0;
  $pivot11 = $430;
  while(1) {
   $431 = $1;
   $432 = $pivot11;
   $433 = $j15;
   $434 = (($433) - 1)|0;
   $435 = $aa;
   $436 = (($435) + ($434<<2)|0);
   $437 = HEAP32[$436>>2]|0;
   $438 = (_cmp_ptr($431,$432,$437)|0);
   $439 = ($438|0)<(0);
   if (!($439)) {
    break;
   }
   $440 = $j15;
   $441 = (($440) - 1)|0;
   $442 = $aa;
   $443 = (($442) + ($441<<2)|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = $j15;
   $446 = $aa;
   $447 = (($446) + ($445<<2)|0);
   HEAP32[$447>>2] = $444;
   $448 = $j15;
   $449 = (($448) + -1)|0;
   $j15 = $449;
  }
  $450 = $pivot11;
  $451 = $j15;
  $452 = $aa;
  $453 = (($452) + ($451<<2)|0);
  HEAP32[$453>>2] = $450;
  $454 = $i14;
  $455 = (($454) + 1)|0;
  $i14 = $455;
 }
 $456 = $1;
 $457 = ((($456)) + 764|0);
 $458 = HEAP32[$457>>2]|0;
 $459 = $1;
 $460 = ((($459)) + 760|0);
 $461 = HEAP32[$460>>2]|0;
 $462 = ($458|0)==($461|0);
 if (!($462)) {
  ___assert_fail((1494|0),(904|0),2351,(5504|0));
  // unreachable;
 }
 $i17 = 0;
 while(1) {
  $463 = $i17;
  $464 = $nn;
  $465 = (($464) - 1)|0;
  $466 = ($463|0)<($465|0);
  if (!($466)) {
   break;
  }
  $467 = $1;
  $468 = $i17;
  $469 = $aa;
  $470 = (($469) + ($468<<2)|0);
  $471 = HEAP32[$470>>2]|0;
  $472 = $i17;
  $473 = (($472) + 1)|0;
  $474 = $aa;
  $475 = (($474) + ($473<<2)|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = (_cmp_ptr($467,$471,$476)|0);
  $478 = ($477|0)<=(0);
  if (!($478)) {
   label = 51;
   break;
  }
  $479 = $i17;
  $480 = (($479) + 1)|0;
  $i17 = $480;
 }
 if ((label|0) == 51) {
  ___assert_fail((5519|0),(904|0),2351,(5504|0));
  // unreachable;
 }
 $prev = 0;
 $481 = $1;
 $482 = ((($481)) + 336|0);
 $483 = HEAP32[$482>>2]|0;
 $q = $483;
 $484 = $q;
 $p = $484;
 while(1) {
  $485 = $p;
  $486 = $1;
  $487 = ((($486)) + 340|0);
  $488 = HEAP32[$487>>2]|0;
  $489 = ($485>>>0)<($488>>>0);
  if (!($489)) {
   label = 63;
   break;
  }
  $490 = $p;
  $491 = HEAP32[$490>>2]|0;
  $this = $491;
  $492 = $1;
  $493 = ((($492)) + 44|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = $this;
  $496 = $1;
  $497 = ((($496)) + 40|0);
  $498 = HEAP32[$497>>2]|0;
  $499 = $495;
  $500 = $498;
  $501 = (($499) - ($500))|0;
  $502 = (($501|0) / 2)&-1;
  $503 = (($494) + (($502*12)|0)|0);
  $v = $503;
  $504 = $prev;
  $505 = $this;
  $506 = ($504|0)==($505|0);
  if (!($506)) {
   $507 = $this;
   $508 = HEAP8[$507>>0]|0;
   $509 = $508 << 24 >> 24;
   $510 = ($509|0)==(1);
   if ($510) {
    $511 = $v;
    $512 = ((($511)) + 4|0);
    $513 = HEAP32[$512>>2]|0;
    $514 = ($513|0)!=(0);
    if (!($514)) {
     label = 58;
     break;
    }
   }
   $515 = $prev;
   $516 = $1;
   $517 = ((($516)) + 40|0);
   $518 = HEAP32[$517>>2]|0;
   $519 = $this;
   $520 = $1;
   $521 = ((($520)) + 40|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = $519;
   $524 = $522;
   $525 = (($523) - ($524))|0;
   $526 = 1 ^ $525;
   $527 = (($518) + ($526)|0);
   $528 = ($515|0)==($527|0);
   if ($528) {
    label = 60;
    break;
   }
   $529 = $this;
   $prev = $529;
   $530 = $q;
   $531 = ((($530)) + 4|0);
   $q = $531;
   HEAP32[$530>>2] = $529;
  }
  $532 = $p;
  $533 = ((($532)) + 4|0);
  $p = $533;
 }
 if ((label|0) == 58) {
  $0 = 1;
  $537 = $0;
  STACKTOP = sp;return ($537|0);
 }
 else if ((label|0) == 60) {
  $0 = 1;
  $537 = $0;
  STACKTOP = sp;return ($537|0);
 }
 else if ((label|0) == 63) {
  $534 = $q;
  $535 = $1;
  $536 = ((($535)) + 340|0);
  HEAP32[$536>>2] = $534;
  $0 = 0;
  $537 = $0;
  STACKTOP = sp;return ($537|0);
 }
 return (0)|0;
}
function _delete_prefix($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_strlen($11)|0);
 $13 = (($12) + 1)|0;
 _delete($5,$8,$13);
 $14 = $0;
 $15 = ((($14)) + 16|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _faillits($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0.0, $2135 = 0.0, $2136 = 0.0, $2137 = 0, $2138 = 0, $2139 = 0.0, $214 = 0, $2140 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $aa = 0, $aa22 = 0, $aa57 = 0, $common = 0, $count = 0, $count12 = 0, $count40 = 0, $count45 = 0, $count75 = 0, $count80 = 0, $delta = 0, $i = 0, $i18 = 0, $i2 = 0, $i21 = 0, $i29 = 0, $i51 = 0, $i54 = 0, $i64 = 0;
 var $i86 = 0, $i89 = 0, $j = 0, $j19 = 0, $j35 = 0, $j52 = 0, $j7 = 0, $j70 = 0, $j87 = 0, $l = 0, $l16 = 0, $l24 = 0, $l49 = 0, $l59 = 0, $l84 = 0, $limit = 0, $lit = 0, $ll = 0, $ll27 = 0, $ll62 = 0;
 var $m = 0, $m26 = 0, $m61 = 0, $new_num = 0, $new_num11 = 0, $new_num39 = 0, $new_num44 = 0, $new_num74 = 0, $new_num79 = 0, $new_saved_size = 0, $new_size = 0, $new_size14 = 0, $new_size42 = 0, $new_size47 = 0, $new_size56 = 0, $new_size77 = 0, $new_size82 = 0, $new_trail_count = 0, $nn = 0, $nn23 = 0;
 var $nn58 = 0, $old_num = 0, $old_num10 = 0, $old_num38 = 0, $old_num43 = 0, $old_num73 = 0, $old_num78 = 0, $old_size = 0, $old_size13 = 0, $old_size41 = 0, $old_size46 = 0, $old_size55 = 0, $old_size76 = 0, $old_size81 = 0, $old_trail_count = 0, $oldladded = 0, $other = 0, $p = 0, $pivot = 0, $pivot15 = 0;
 var $pivot34 = 0, $pivot48 = 0, $pivot6 = 0, $pivot69 = 0, $pivot83 = 0, $q = 0, $r = 0, $r1 = 0, $r17 = 0, $r25 = 0, $r50 = 0, $r60 = 0, $r85 = 0, $rr = 0, $rr28 = 0, $rr63 = 0, $saved_count = 0, $started = 0.0, $tmp = 0, $tmp20 = 0;
 var $tmp3 = 0, $tmp30 = 0, $tmp31 = 0, $tmp32 = 0, $tmp33 = 0, $tmp36 = 0, $tmp37 = 0, $tmp4 = 0, $tmp5 = 0, $tmp53 = 0, $tmp65 = 0, $tmp66 = 0, $tmp67 = 0, $tmp68 = 0, $tmp71 = 0, $tmp72 = 0, $tmp8 = 0, $tmp88 = 0, $tmp9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $limit = sp + 16|0;
 $delta = sp + 8|0;
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 708|0);
 $3 = HEAP32[$2>>2]|0;
 $oldladded = $3;
 $4 = $0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = ((($8)) + 256|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = $0;
 $13 = ((($12)) + 260|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = ((($16)) + 616|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = ((($24)) + 656|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($23>>>0)<($31>>>0);
 $33 = ($20>>>0)<($28>>>0);
 $34 = ($23|0)==($31|0);
 $35 = $34 & $33;
 $36 = $32 | $35;
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = $0;
 _sflush($37);
 $38 = $0;
 $39 = ((($38)) + 472|0);
 $40 = +HEAPF64[$39>>3];
 $started = $40;
 $41 = $0;
 $42 = ((($41)) + 648|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[$42>>2] = $44;
 $45 = $0;
 $46 = ((($45)) + 616|0);
 $47 = $46;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (___udivdi3(($49|0),($52|0),10,0)|0);
 $54 = tempRet0;
 $55 = $delta;
 $56 = $55;
 HEAP32[$56>>2] = $53;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $54;
 $59 = $delta;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64>>>0)>(0);
 $66 = ($61>>>0)>=(100000000);
 $67 = ($64|0)==(0);
 $68 = $67 & $66;
 $69 = $65 | $68;
 if ($69) {
  $70 = $delta;
  $71 = $70;
  HEAP32[$71>>2] = 100000000;
  $72 = (($70) + 4)|0;
  $73 = $72;
  HEAP32[$73>>2] = 0;
 } else {
  $74 = $delta;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74) + 4)|0;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79>>>0)<(0);
  $81 = ($76>>>0)<=(100000);
  $82 = ($79|0)==(0);
  $83 = $82 & $81;
  $84 = $80 | $83;
  if ($84) {
   $85 = $delta;
   $86 = $85;
   HEAP32[$86>>2] = 100000;
   $87 = (($85) + 4)|0;
   $88 = $87;
   HEAP32[$88>>2] = 0;
  }
 }
 $89 = $0;
 $90 = ((($89)) + 616|0);
 $91 = $90;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($91) + 4)|0;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = $delta;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + 4)|0;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 $103 = (_i64Add(($93|0),($96|0),($99|0),($102|0))|0);
 $104 = tempRet0;
 $105 = $limit;
 $106 = $105;
 HEAP32[$106>>2] = $103;
 $107 = (($105) + 4)|0;
 $108 = $107;
 HEAP32[$108>>2] = $104;
 $109 = $0;
 $110 = ((($109)) + 616|0);
 $111 = $110;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (($111) + 4)|0;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = $0;
 $118 = ((($117)) + 656|0);
 $119 = $118;
 $120 = $119;
 HEAP32[$120>>2] = $113;
 $121 = (($119) + 4)|0;
 $122 = $121;
 HEAP32[$122>>2] = $116;
 $123 = $0;
 $124 = ((($123)) + 28|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)!=(0);
 if ($126) {
  ___assert_fail((2784|0),(904|0),4528,(6126|0));
  // unreachable;
 }
 $127 = $0;
 $128 = ((($127)) + 664|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0);
 if (!($130)) {
  ___assert_fail((6135|0),(904|0),4529,(6126|0));
  // unreachable;
 }
 $131 = $0;
 $132 = ((($131)) + 648|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133>>>0)<=(1);
 $135 = $0;
 $136 = ((($135)) + 256|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ((($137)) + 4|0);
 L21: do {
  if ($134) {
   $aa = $138;
   $139 = $0;
   $140 = ((($139)) + 260|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $0;
   $143 = ((($142)) + 256|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($144)) + 4|0);
   $146 = $141;
   $147 = $145;
   $148 = (($146) - ($147))|0;
   $149 = (($148|0) / 4)&-1;
   $nn = $149;
   $l = 0;
   $150 = $nn;
   $151 = (($150) - 1)|0;
   $r1 = $151;
   $152 = $0;
   $153 = ((($152)) + 764|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $0;
   $156 = ((($155)) + 760|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($154|0)==($157|0);
   if (!($158)) {
    ___assert_fail((1494|0),(904|0),4532,(6126|0));
    // unreachable;
   }
   $159 = $r1;
   $160 = $l;
   $161 = (($159) - ($160))|0;
   $162 = ($161|0)<=(10);
   L26: do {
    if (!($162)) {
     while(1) {
      $163 = $l;
      $164 = $r1;
      $165 = (($163) + ($164))|0;
      $166 = (($165|0) / 2)&-1;
      $m = $166;
      $167 = $aa;
      $168 = $r1;
      $169 = (($167) + ($168<<2)|0);
      $170 = ((($169)) + -4|0);
      $171 = HEAP32[$170>>2]|0;
      $tmp = $171;
      $172 = $aa;
      $173 = $m;
      $174 = (($172) + ($173<<2)|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = $aa;
      $177 = $r1;
      $178 = (($176) + ($177<<2)|0);
      $179 = ((($178)) + -4|0);
      HEAP32[$179>>2] = $175;
      $180 = $tmp;
      $181 = $aa;
      $182 = $m;
      $183 = (($181) + ($182<<2)|0);
      HEAP32[$183>>2] = $180;
      $184 = $0;
      $185 = $aa;
      $186 = $l;
      $187 = (($185) + ($186<<2)|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $aa;
      $190 = $r1;
      $191 = (($189) + ($190<<2)|0);
      $192 = ((($191)) + -4|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (_cmp_inverse_jwh_rnk($184,$188,$193)|0);
      $195 = ($194|0)>(0);
      if ($195) {
       $196 = $aa;
       $197 = $r1;
       $198 = (($196) + ($197<<2)|0);
       $199 = ((($198)) + -4|0);
       $200 = HEAP32[$199>>2]|0;
       $tmp3 = $200;
       $201 = $aa;
       $202 = $l;
       $203 = (($201) + ($202<<2)|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = $aa;
       $206 = $r1;
       $207 = (($205) + ($206<<2)|0);
       $208 = ((($207)) + -4|0);
       HEAP32[$208>>2] = $204;
       $209 = $tmp3;
       $210 = $aa;
       $211 = $l;
       $212 = (($210) + ($211<<2)|0);
       HEAP32[$212>>2] = $209;
      }
      $213 = $0;
      $214 = $aa;
      $215 = $l;
      $216 = (($214) + ($215<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = $aa;
      $219 = $r1;
      $220 = (($218) + ($219<<2)|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = (_cmp_inverse_jwh_rnk($213,$217,$221)|0);
      $223 = ($222|0)>(0);
      if ($223) {
       $224 = $aa;
       $225 = $r1;
       $226 = (($224) + ($225<<2)|0);
       $227 = HEAP32[$226>>2]|0;
       $tmp4 = $227;
       $228 = $aa;
       $229 = $l;
       $230 = (($228) + ($229<<2)|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = $aa;
       $233 = $r1;
       $234 = (($232) + ($233<<2)|0);
       HEAP32[$234>>2] = $231;
       $235 = $tmp4;
       $236 = $aa;
       $237 = $l;
       $238 = (($236) + ($237<<2)|0);
       HEAP32[$238>>2] = $235;
      }
      $239 = $0;
      $240 = $aa;
      $241 = $r1;
      $242 = (($240) + ($241<<2)|0);
      $243 = ((($242)) + -4|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = $aa;
      $246 = $r1;
      $247 = (($245) + ($246<<2)|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = (_cmp_inverse_jwh_rnk($239,$244,$248)|0);
      $250 = ($249|0)>(0);
      if ($250) {
       $251 = $aa;
       $252 = $r1;
       $253 = (($251) + ($252<<2)|0);
       $254 = HEAP32[$253>>2]|0;
       $tmp5 = $254;
       $255 = $aa;
       $256 = $r1;
       $257 = (($255) + ($256<<2)|0);
       $258 = ((($257)) + -4|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = $aa;
       $261 = $r1;
       $262 = (($260) + ($261<<2)|0);
       HEAP32[$262>>2] = $259;
       $263 = $tmp5;
       $264 = $aa;
       $265 = $r1;
       $266 = (($264) + ($265<<2)|0);
       $267 = ((($266)) + -4|0);
       HEAP32[$267>>2] = $263;
      }
      $268 = $l;
      $269 = (($268) + 1)|0;
      $270 = (($269) - 1)|0;
      $i2 = $270;
      $271 = $r1;
      $272 = (($271) - 1)|0;
      $j7 = $272;
      $273 = $j7;
      $274 = $aa;
      $275 = (($274) + ($273<<2)|0);
      $276 = HEAP32[$275>>2]|0;
      $pivot6 = $276;
      while(1) {
       $277 = $0;
       $278 = $i2;
       $279 = (($278) + 1)|0;
       $i2 = $279;
       $280 = $aa;
       $281 = (($280) + ($279<<2)|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = $pivot6;
       $284 = (_cmp_inverse_jwh_rnk($277,$282,$283)|0);
       $285 = ($284|0)<(0);
       if ($285) {
        continue;
       }
       while(1) {
        $286 = $0;
        $287 = $pivot6;
        $288 = $j7;
        $289 = (($288) + -1)|0;
        $j7 = $289;
        $290 = $aa;
        $291 = (($290) + ($289<<2)|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = (_cmp_inverse_jwh_rnk($286,$287,$292)|0);
        $294 = ($293|0)<(0);
        if (!($294)) {
         break;
        }
        $295 = $j7;
        $296 = $l;
        $297 = (($296) + 1)|0;
        $298 = ($295|0)==($297|0);
        if ($298) {
         break;
        }
       }
       $299 = $i2;
       $300 = $j7;
       $301 = ($299|0)>=($300|0);
       $302 = $aa;
       if ($301) {
        break;
       }
       $303 = $j7;
       $304 = (($302) + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $tmp8 = $305;
       $306 = $aa;
       $307 = $i2;
       $308 = (($306) + ($307<<2)|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = $aa;
       $311 = $j7;
       $312 = (($310) + ($311<<2)|0);
       HEAP32[$312>>2] = $309;
       $313 = $tmp8;
       $314 = $aa;
       $315 = $i2;
       $316 = (($314) + ($315<<2)|0);
       HEAP32[$316>>2] = $313;
      }
      $317 = $r1;
      $318 = (($317) - 1)|0;
      $319 = (($302) + ($318<<2)|0);
      $320 = HEAP32[$319>>2]|0;
      $tmp9 = $320;
      $321 = $aa;
      $322 = $i2;
      $323 = (($321) + ($322<<2)|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = $aa;
      $326 = $r1;
      $327 = (($326) - 1)|0;
      $328 = (($325) + ($327<<2)|0);
      HEAP32[$328>>2] = $324;
      $329 = $tmp9;
      $330 = $aa;
      $331 = $i2;
      $332 = (($330) + ($331<<2)|0);
      HEAP32[$332>>2] = $329;
      $333 = $i2;
      $334 = $l;
      $335 = (($333) - ($334))|0;
      $336 = $r1;
      $337 = $i2;
      $338 = (($336) - ($337))|0;
      $339 = ($335|0)<($338|0);
      if ($339) {
       $340 = $i2;
       $341 = (($340) + 1)|0;
       $ll = $341;
       $342 = $r1;
       $rr = $342;
       $343 = $i2;
       $344 = (($343) - 1)|0;
       $r1 = $344;
      } else {
       $345 = $l;
       $ll = $345;
       $346 = $i2;
       $347 = (($346) - 1)|0;
       $rr = $347;
       $348 = $i2;
       $349 = (($348) + 1)|0;
       $l = $349;
      }
      $350 = $r1;
      $351 = $l;
      $352 = (($350) - ($351))|0;
      $353 = ($352|0)>(10);
      $354 = $rr;
      $355 = $ll;
      $356 = (($354) - ($355))|0;
      $357 = ($356|0)>(10);
      if (!($353)) {
       if ($357) {
        $500 = $ll;
        $l = $500;
        $501 = $rr;
        $r1 = $501;
        continue;
       }
       $502 = $0;
       $503 = ((($502)) + 764|0);
       $504 = HEAP32[$503>>2]|0;
       $505 = $0;
       $506 = ((($505)) + 760|0);
       $507 = HEAP32[$506>>2]|0;
       $508 = ($504>>>0)>($507>>>0);
       if (!($508)) {
        break L26;
       }
       $509 = $0;
       $510 = ((($509)) + 764|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = ((($511)) + -4|0);
       HEAP32[$510>>2] = $512;
       $513 = HEAP32[$512>>2]|0;
       $r1 = $513;
       $514 = $0;
       $515 = ((($514)) + 764|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = ((($516)) + -4|0);
       HEAP32[$515>>2] = $517;
       $518 = HEAP32[$517>>2]|0;
       $l = $518;
       continue;
      }
      if (!($357)) {
       label = 33;
       break;
      }
      $358 = $0;
      $359 = ((($358)) + 764|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = $0;
      $362 = ((($361)) + 768|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = ($360|0)==($363|0);
      if ($364) {
       $365 = $0;
       $366 = ((($365)) + 768|0);
       $367 = HEAP32[$366>>2]|0;
       $368 = $0;
       $369 = ((($368)) + 760|0);
       $370 = HEAP32[$369>>2]|0;
       $371 = $367;
       $372 = $370;
       $373 = (($371) - ($372))|0;
       $374 = (($373|0) / 4)&-1;
       $old_num = $374;
       $375 = $old_num;
       $376 = ($375|0)!=(0);
       $377 = $old_num;
       $378 = $377<<1;
       $379 = $376 ? $378 : 1;
       $new_num = $379;
       $380 = $0;
       $381 = ((($380)) + 764|0);
       $382 = HEAP32[$381>>2]|0;
       $383 = $0;
       $384 = ((($383)) + 760|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = $382;
       $387 = $385;
       $388 = (($386) - ($387))|0;
       $389 = (($388|0) / 4)&-1;
       $count = $389;
       $390 = $0;
       $391 = ((($390)) + 760|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = $0;
       $394 = ((($393)) + 768|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = ($392>>>0)<=($395>>>0);
       if (!($396)) {
        label = 36;
        break;
       }
       $397 = $old_num;
       $398 = $397<<2;
       $old_size = $398;
       $399 = $new_num;
       $400 = $399<<2;
       $new_size = $400;
       $401 = $0;
       $402 = $0;
       $403 = ((($402)) + 760|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = $old_size;
       $406 = $new_size;
       $407 = (_resize($401,$404,$405,$406)|0);
       $408 = $0;
       $409 = ((($408)) + 760|0);
       HEAP32[$409>>2] = $407;
       $410 = $0;
       $411 = ((($410)) + 760|0);
       $412 = HEAP32[$411>>2]|0;
       $413 = $count;
       $414 = (($412) + ($413<<2)|0);
       $415 = $0;
       $416 = ((($415)) + 764|0);
       HEAP32[$416>>2] = $414;
       $417 = $0;
       $418 = ((($417)) + 760|0);
       $419 = HEAP32[$418>>2]|0;
       $420 = $new_num;
       $421 = (($419) + ($420<<2)|0);
       $422 = $0;
       $423 = ((($422)) + 768|0);
       HEAP32[$423>>2] = $421;
      }
      $424 = $ll;
      $425 = $0;
      $426 = ((($425)) + 764|0);
      $427 = HEAP32[$426>>2]|0;
      $428 = ((($427)) + 4|0);
      HEAP32[$426>>2] = $428;
      HEAP32[$427>>2] = $424;
      $429 = $0;
      $430 = ((($429)) + 764|0);
      $431 = HEAP32[$430>>2]|0;
      $432 = $0;
      $433 = ((($432)) + 768|0);
      $434 = HEAP32[$433>>2]|0;
      $435 = ($431|0)==($434|0);
      if ($435) {
       $436 = $0;
       $437 = ((($436)) + 768|0);
       $438 = HEAP32[$437>>2]|0;
       $439 = $0;
       $440 = ((($439)) + 760|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = $438;
       $443 = $441;
       $444 = (($442) - ($443))|0;
       $445 = (($444|0) / 4)&-1;
       $old_num10 = $445;
       $446 = $old_num10;
       $447 = ($446|0)!=(0);
       $448 = $old_num10;
       $449 = $448<<1;
       $450 = $447 ? $449 : 1;
       $new_num11 = $450;
       $451 = $0;
       $452 = ((($451)) + 764|0);
       $453 = HEAP32[$452>>2]|0;
       $454 = $0;
       $455 = ((($454)) + 760|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = $453;
       $458 = $456;
       $459 = (($457) - ($458))|0;
       $460 = (($459|0) / 4)&-1;
       $count12 = $460;
       $461 = $0;
       $462 = ((($461)) + 760|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = $0;
       $465 = ((($464)) + 768|0);
       $466 = HEAP32[$465>>2]|0;
       $467 = ($463>>>0)<=($466>>>0);
       if (!($467)) {
        label = 40;
        break;
       }
       $468 = $old_num10;
       $469 = $468<<2;
       $old_size13 = $469;
       $470 = $new_num11;
       $471 = $470<<2;
       $new_size14 = $471;
       $472 = $0;
       $473 = $0;
       $474 = ((($473)) + 760|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = $old_size13;
       $477 = $new_size14;
       $478 = (_resize($472,$475,$476,$477)|0);
       $479 = $0;
       $480 = ((($479)) + 760|0);
       HEAP32[$480>>2] = $478;
       $481 = $0;
       $482 = ((($481)) + 760|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = $count12;
       $485 = (($483) + ($484<<2)|0);
       $486 = $0;
       $487 = ((($486)) + 764|0);
       HEAP32[$487>>2] = $485;
       $488 = $0;
       $489 = ((($488)) + 760|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = $new_num11;
       $492 = (($490) + ($491<<2)|0);
       $493 = $0;
       $494 = ((($493)) + 768|0);
       HEAP32[$494>>2] = $492;
      }
      $495 = $rr;
      $496 = $0;
      $497 = ((($496)) + 764|0);
      $498 = HEAP32[$497>>2]|0;
      $499 = ((($498)) + 4|0);
      HEAP32[$497>>2] = $499;
      HEAP32[$498>>2] = $495;
     }
     if ((label|0) == 33) {
      ___assert_fail((1519|0),(904|0),4532,(6126|0));
      // unreachable;
     }
     else if ((label|0) == 36) {
      ___assert_fail((1550|0),(904|0),4532,(6126|0));
      // unreachable;
     }
     else if ((label|0) == 40) {
      ___assert_fail((1550|0),(904|0),4532,(6126|0));
      // unreachable;
     }
    }
   } while(0);
   $l16 = 0;
   $519 = $nn;
   $520 = (($519) - 1)|0;
   $r17 = $520;
   $521 = $r17;
   $i18 = $521;
   while(1) {
    $522 = $i18;
    $523 = $l16;
    $524 = ($522|0)>($523|0);
    if (!($524)) {
     break;
    }
    $525 = $0;
    $526 = $aa;
    $527 = $i18;
    $528 = (($526) + ($527<<2)|0);
    $529 = ((($528)) + -4|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = $aa;
    $532 = $i18;
    $533 = (($531) + ($532<<2)|0);
    $534 = HEAP32[$533>>2]|0;
    $535 = (_cmp_inverse_jwh_rnk($525,$530,$534)|0);
    $536 = ($535|0)>(0);
    if ($536) {
     $537 = $aa;
     $538 = $i18;
     $539 = (($537) + ($538<<2)|0);
     $540 = HEAP32[$539>>2]|0;
     $tmp20 = $540;
     $541 = $aa;
     $542 = $i18;
     $543 = (($541) + ($542<<2)|0);
     $544 = ((($543)) + -4|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = $aa;
     $547 = $i18;
     $548 = (($546) + ($547<<2)|0);
     HEAP32[$548>>2] = $545;
     $549 = $tmp20;
     $550 = $aa;
     $551 = $i18;
     $552 = (($550) + ($551<<2)|0);
     $553 = ((($552)) + -4|0);
     HEAP32[$553>>2] = $549;
    }
    $554 = $i18;
    $555 = (($554) + -1)|0;
    $i18 = $555;
   }
   $556 = $l16;
   $557 = (($556) + 2)|0;
   $i18 = $557;
   while(1) {
    $558 = $i18;
    $559 = $r17;
    $560 = ($558|0)<=($559|0);
    if (!($560)) {
     break;
    }
    $561 = $i18;
    $j19 = $561;
    $562 = $i18;
    $563 = $aa;
    $564 = (($563) + ($562<<2)|0);
    $565 = HEAP32[$564>>2]|0;
    $pivot15 = $565;
    while(1) {
     $566 = $0;
     $567 = $pivot15;
     $568 = $j19;
     $569 = (($568) - 1)|0;
     $570 = $aa;
     $571 = (($570) + ($569<<2)|0);
     $572 = HEAP32[$571>>2]|0;
     $573 = (_cmp_inverse_jwh_rnk($566,$567,$572)|0);
     $574 = ($573|0)<(0);
     if (!($574)) {
      break;
     }
     $575 = $j19;
     $576 = (($575) - 1)|0;
     $577 = $aa;
     $578 = (($577) + ($576<<2)|0);
     $579 = HEAP32[$578>>2]|0;
     $580 = $j19;
     $581 = $aa;
     $582 = (($581) + ($580<<2)|0);
     HEAP32[$582>>2] = $579;
     $583 = $j19;
     $584 = (($583) + -1)|0;
     $j19 = $584;
    }
    $585 = $pivot15;
    $586 = $j19;
    $587 = $aa;
    $588 = (($587) + ($586<<2)|0);
    HEAP32[$588>>2] = $585;
    $589 = $i18;
    $590 = (($589) + 1)|0;
    $i18 = $590;
   }
   $591 = $0;
   $592 = ((($591)) + 764|0);
   $593 = HEAP32[$592>>2]|0;
   $594 = $0;
   $595 = ((($594)) + 760|0);
   $596 = HEAP32[$595>>2]|0;
   $597 = ($593|0)==($596|0);
   if (!($597)) {
    ___assert_fail((1494|0),(904|0),4532,(6126|0));
    // unreachable;
   }
   $i21 = 0;
   while(1) {
    $598 = $i21;
    $599 = $nn;
    $600 = (($599) - 1)|0;
    $601 = ($598|0)<($600|0);
    if (!($601)) {
     break L21;
    }
    $602 = $0;
    $603 = $i21;
    $604 = $aa;
    $605 = (($604) + ($603<<2)|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = $i21;
    $608 = (($607) + 1)|0;
    $609 = $aa;
    $610 = (($609) + ($608<<2)|0);
    $611 = HEAP32[$610>>2]|0;
    $612 = (_cmp_inverse_jwh_rnk($602,$606,$611)|0);
    $613 = ($612|0)<=(0);
    if (!($613)) {
     break;
    }
    $614 = $i21;
    $615 = (($614) + 1)|0;
    $i21 = $615;
   }
   ___assert_fail((6151|0),(904|0),4532,(6126|0));
   // unreachable;
  } else {
   $aa22 = $138;
   $616 = $0;
   $617 = ((($616)) + 260|0);
   $618 = HEAP32[$617>>2]|0;
   $619 = $0;
   $620 = ((($619)) + 256|0);
   $621 = HEAP32[$620>>2]|0;
   $622 = ((($621)) + 4|0);
   $623 = $618;
   $624 = $622;
   $625 = (($623) - ($624))|0;
   $626 = (($625|0) / 4)&-1;
   $nn23 = $626;
   $l24 = 0;
   $627 = $nn23;
   $628 = (($627) - 1)|0;
   $r25 = $628;
   $629 = $0;
   $630 = ((($629)) + 764|0);
   $631 = HEAP32[$630>>2]|0;
   $632 = $0;
   $633 = ((($632)) + 760|0);
   $634 = HEAP32[$633>>2]|0;
   $635 = ($631|0)==($634|0);
   if (!($635)) {
    ___assert_fail((1494|0),(904|0),4534,(6126|0));
    // unreachable;
   }
   $636 = $r25;
   $637 = $l24;
   $638 = (($636) - ($637))|0;
   $639 = ($638|0)<=(10);
   L98: do {
    if (!($639)) {
     while(1) {
      $640 = $l24;
      $641 = $r25;
      $642 = (($640) + ($641))|0;
      $643 = (($642|0) / 2)&-1;
      $m26 = $643;
      $644 = $aa22;
      $645 = $r25;
      $646 = (($644) + ($645<<2)|0);
      $647 = ((($646)) + -4|0);
      $648 = HEAP32[$647>>2]|0;
      $tmp30 = $648;
      $649 = $aa22;
      $650 = $m26;
      $651 = (($649) + ($650<<2)|0);
      $652 = HEAP32[$651>>2]|0;
      $653 = $aa22;
      $654 = $r25;
      $655 = (($653) + ($654<<2)|0);
      $656 = ((($655)) + -4|0);
      HEAP32[$656>>2] = $652;
      $657 = $tmp30;
      $658 = $aa22;
      $659 = $m26;
      $660 = (($658) + ($659<<2)|0);
      HEAP32[$660>>2] = $657;
      $661 = $0;
      $662 = $aa22;
      $663 = $l24;
      $664 = (($662) + ($663<<2)|0);
      $665 = HEAP32[$664>>2]|0;
      $666 = $aa22;
      $667 = $r25;
      $668 = (($666) + ($667<<2)|0);
      $669 = ((($668)) + -4|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = (_cmp_inverse_rnk($661,$665,$670)|0);
      $672 = ($671|0)>(0);
      if ($672) {
       $673 = $aa22;
       $674 = $r25;
       $675 = (($673) + ($674<<2)|0);
       $676 = ((($675)) + -4|0);
       $677 = HEAP32[$676>>2]|0;
       $tmp31 = $677;
       $678 = $aa22;
       $679 = $l24;
       $680 = (($678) + ($679<<2)|0);
       $681 = HEAP32[$680>>2]|0;
       $682 = $aa22;
       $683 = $r25;
       $684 = (($682) + ($683<<2)|0);
       $685 = ((($684)) + -4|0);
       HEAP32[$685>>2] = $681;
       $686 = $tmp31;
       $687 = $aa22;
       $688 = $l24;
       $689 = (($687) + ($688<<2)|0);
       HEAP32[$689>>2] = $686;
      }
      $690 = $0;
      $691 = $aa22;
      $692 = $l24;
      $693 = (($691) + ($692<<2)|0);
      $694 = HEAP32[$693>>2]|0;
      $695 = $aa22;
      $696 = $r25;
      $697 = (($695) + ($696<<2)|0);
      $698 = HEAP32[$697>>2]|0;
      $699 = (_cmp_inverse_rnk($690,$694,$698)|0);
      $700 = ($699|0)>(0);
      if ($700) {
       $701 = $aa22;
       $702 = $r25;
       $703 = (($701) + ($702<<2)|0);
       $704 = HEAP32[$703>>2]|0;
       $tmp32 = $704;
       $705 = $aa22;
       $706 = $l24;
       $707 = (($705) + ($706<<2)|0);
       $708 = HEAP32[$707>>2]|0;
       $709 = $aa22;
       $710 = $r25;
       $711 = (($709) + ($710<<2)|0);
       HEAP32[$711>>2] = $708;
       $712 = $tmp32;
       $713 = $aa22;
       $714 = $l24;
       $715 = (($713) + ($714<<2)|0);
       HEAP32[$715>>2] = $712;
      }
      $716 = $0;
      $717 = $aa22;
      $718 = $r25;
      $719 = (($717) + ($718<<2)|0);
      $720 = ((($719)) + -4|0);
      $721 = HEAP32[$720>>2]|0;
      $722 = $aa22;
      $723 = $r25;
      $724 = (($722) + ($723<<2)|0);
      $725 = HEAP32[$724>>2]|0;
      $726 = (_cmp_inverse_rnk($716,$721,$725)|0);
      $727 = ($726|0)>(0);
      if ($727) {
       $728 = $aa22;
       $729 = $r25;
       $730 = (($728) + ($729<<2)|0);
       $731 = HEAP32[$730>>2]|0;
       $tmp33 = $731;
       $732 = $aa22;
       $733 = $r25;
       $734 = (($732) + ($733<<2)|0);
       $735 = ((($734)) + -4|0);
       $736 = HEAP32[$735>>2]|0;
       $737 = $aa22;
       $738 = $r25;
       $739 = (($737) + ($738<<2)|0);
       HEAP32[$739>>2] = $736;
       $740 = $tmp33;
       $741 = $aa22;
       $742 = $r25;
       $743 = (($741) + ($742<<2)|0);
       $744 = ((($743)) + -4|0);
       HEAP32[$744>>2] = $740;
      }
      $745 = $l24;
      $746 = (($745) + 1)|0;
      $747 = (($746) - 1)|0;
      $i29 = $747;
      $748 = $r25;
      $749 = (($748) - 1)|0;
      $j35 = $749;
      $750 = $j35;
      $751 = $aa22;
      $752 = (($751) + ($750<<2)|0);
      $753 = HEAP32[$752>>2]|0;
      $pivot34 = $753;
      while(1) {
       $754 = $0;
       $755 = $i29;
       $756 = (($755) + 1)|0;
       $i29 = $756;
       $757 = $aa22;
       $758 = (($757) + ($756<<2)|0);
       $759 = HEAP32[$758>>2]|0;
       $760 = $pivot34;
       $761 = (_cmp_inverse_rnk($754,$759,$760)|0);
       $762 = ($761|0)<(0);
       if ($762) {
        continue;
       }
       while(1) {
        $763 = $0;
        $764 = $pivot34;
        $765 = $j35;
        $766 = (($765) + -1)|0;
        $j35 = $766;
        $767 = $aa22;
        $768 = (($767) + ($766<<2)|0);
        $769 = HEAP32[$768>>2]|0;
        $770 = (_cmp_inverse_rnk($763,$764,$769)|0);
        $771 = ($770|0)<(0);
        if (!($771)) {
         break;
        }
        $772 = $j35;
        $773 = $l24;
        $774 = (($773) + 1)|0;
        $775 = ($772|0)==($774|0);
        if ($775) {
         break;
        }
       }
       $776 = $i29;
       $777 = $j35;
       $778 = ($776|0)>=($777|0);
       $779 = $aa22;
       if ($778) {
        break;
       }
       $780 = $j35;
       $781 = (($779) + ($780<<2)|0);
       $782 = HEAP32[$781>>2]|0;
       $tmp36 = $782;
       $783 = $aa22;
       $784 = $i29;
       $785 = (($783) + ($784<<2)|0);
       $786 = HEAP32[$785>>2]|0;
       $787 = $aa22;
       $788 = $j35;
       $789 = (($787) + ($788<<2)|0);
       HEAP32[$789>>2] = $786;
       $790 = $tmp36;
       $791 = $aa22;
       $792 = $i29;
       $793 = (($791) + ($792<<2)|0);
       HEAP32[$793>>2] = $790;
      }
      $794 = $r25;
      $795 = (($794) - 1)|0;
      $796 = (($779) + ($795<<2)|0);
      $797 = HEAP32[$796>>2]|0;
      $tmp37 = $797;
      $798 = $aa22;
      $799 = $i29;
      $800 = (($798) + ($799<<2)|0);
      $801 = HEAP32[$800>>2]|0;
      $802 = $aa22;
      $803 = $r25;
      $804 = (($803) - 1)|0;
      $805 = (($802) + ($804<<2)|0);
      HEAP32[$805>>2] = $801;
      $806 = $tmp37;
      $807 = $aa22;
      $808 = $i29;
      $809 = (($807) + ($808<<2)|0);
      HEAP32[$809>>2] = $806;
      $810 = $i29;
      $811 = $l24;
      $812 = (($810) - ($811))|0;
      $813 = $r25;
      $814 = $i29;
      $815 = (($813) - ($814))|0;
      $816 = ($812|0)<($815|0);
      if ($816) {
       $817 = $i29;
       $818 = (($817) + 1)|0;
       $ll27 = $818;
       $819 = $r25;
       $rr28 = $819;
       $820 = $i29;
       $821 = (($820) - 1)|0;
       $r25 = $821;
      } else {
       $822 = $l24;
       $ll27 = $822;
       $823 = $i29;
       $824 = (($823) - 1)|0;
       $rr28 = $824;
       $825 = $i29;
       $826 = (($825) + 1)|0;
       $l24 = $826;
      }
      $827 = $r25;
      $828 = $l24;
      $829 = (($827) - ($828))|0;
      $830 = ($829|0)>(10);
      $831 = $rr28;
      $832 = $ll27;
      $833 = (($831) - ($832))|0;
      $834 = ($833|0)>(10);
      if (!($830)) {
       if ($834) {
        $977 = $ll27;
        $l24 = $977;
        $978 = $rr28;
        $r25 = $978;
        continue;
       }
       $979 = $0;
       $980 = ((($979)) + 764|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = $0;
       $983 = ((($982)) + 760|0);
       $984 = HEAP32[$983>>2]|0;
       $985 = ($981>>>0)>($984>>>0);
       if (!($985)) {
        break L98;
       }
       $986 = $0;
       $987 = ((($986)) + 764|0);
       $988 = HEAP32[$987>>2]|0;
       $989 = ((($988)) + -4|0);
       HEAP32[$987>>2] = $989;
       $990 = HEAP32[$989>>2]|0;
       $r25 = $990;
       $991 = $0;
       $992 = ((($991)) + 764|0);
       $993 = HEAP32[$992>>2]|0;
       $994 = ((($993)) + -4|0);
       HEAP32[$992>>2] = $994;
       $995 = HEAP32[$994>>2]|0;
       $l24 = $995;
       continue;
      }
      if (!($834)) {
       label = 85;
       break;
      }
      $835 = $0;
      $836 = ((($835)) + 764|0);
      $837 = HEAP32[$836>>2]|0;
      $838 = $0;
      $839 = ((($838)) + 768|0);
      $840 = HEAP32[$839>>2]|0;
      $841 = ($837|0)==($840|0);
      if ($841) {
       $842 = $0;
       $843 = ((($842)) + 768|0);
       $844 = HEAP32[$843>>2]|0;
       $845 = $0;
       $846 = ((($845)) + 760|0);
       $847 = HEAP32[$846>>2]|0;
       $848 = $844;
       $849 = $847;
       $850 = (($848) - ($849))|0;
       $851 = (($850|0) / 4)&-1;
       $old_num38 = $851;
       $852 = $old_num38;
       $853 = ($852|0)!=(0);
       $854 = $old_num38;
       $855 = $854<<1;
       $856 = $853 ? $855 : 1;
       $new_num39 = $856;
       $857 = $0;
       $858 = ((($857)) + 764|0);
       $859 = HEAP32[$858>>2]|0;
       $860 = $0;
       $861 = ((($860)) + 760|0);
       $862 = HEAP32[$861>>2]|0;
       $863 = $859;
       $864 = $862;
       $865 = (($863) - ($864))|0;
       $866 = (($865|0) / 4)&-1;
       $count40 = $866;
       $867 = $0;
       $868 = ((($867)) + 760|0);
       $869 = HEAP32[$868>>2]|0;
       $870 = $0;
       $871 = ((($870)) + 768|0);
       $872 = HEAP32[$871>>2]|0;
       $873 = ($869>>>0)<=($872>>>0);
       if (!($873)) {
        label = 88;
        break;
       }
       $874 = $old_num38;
       $875 = $874<<2;
       $old_size41 = $875;
       $876 = $new_num39;
       $877 = $876<<2;
       $new_size42 = $877;
       $878 = $0;
       $879 = $0;
       $880 = ((($879)) + 760|0);
       $881 = HEAP32[$880>>2]|0;
       $882 = $old_size41;
       $883 = $new_size42;
       $884 = (_resize($878,$881,$882,$883)|0);
       $885 = $0;
       $886 = ((($885)) + 760|0);
       HEAP32[$886>>2] = $884;
       $887 = $0;
       $888 = ((($887)) + 760|0);
       $889 = HEAP32[$888>>2]|0;
       $890 = $count40;
       $891 = (($889) + ($890<<2)|0);
       $892 = $0;
       $893 = ((($892)) + 764|0);
       HEAP32[$893>>2] = $891;
       $894 = $0;
       $895 = ((($894)) + 760|0);
       $896 = HEAP32[$895>>2]|0;
       $897 = $new_num39;
       $898 = (($896) + ($897<<2)|0);
       $899 = $0;
       $900 = ((($899)) + 768|0);
       HEAP32[$900>>2] = $898;
      }
      $901 = $ll27;
      $902 = $0;
      $903 = ((($902)) + 764|0);
      $904 = HEAP32[$903>>2]|0;
      $905 = ((($904)) + 4|0);
      HEAP32[$903>>2] = $905;
      HEAP32[$904>>2] = $901;
      $906 = $0;
      $907 = ((($906)) + 764|0);
      $908 = HEAP32[$907>>2]|0;
      $909 = $0;
      $910 = ((($909)) + 768|0);
      $911 = HEAP32[$910>>2]|0;
      $912 = ($908|0)==($911|0);
      if ($912) {
       $913 = $0;
       $914 = ((($913)) + 768|0);
       $915 = HEAP32[$914>>2]|0;
       $916 = $0;
       $917 = ((($916)) + 760|0);
       $918 = HEAP32[$917>>2]|0;
       $919 = $915;
       $920 = $918;
       $921 = (($919) - ($920))|0;
       $922 = (($921|0) / 4)&-1;
       $old_num43 = $922;
       $923 = $old_num43;
       $924 = ($923|0)!=(0);
       $925 = $old_num43;
       $926 = $925<<1;
       $927 = $924 ? $926 : 1;
       $new_num44 = $927;
       $928 = $0;
       $929 = ((($928)) + 764|0);
       $930 = HEAP32[$929>>2]|0;
       $931 = $0;
       $932 = ((($931)) + 760|0);
       $933 = HEAP32[$932>>2]|0;
       $934 = $930;
       $935 = $933;
       $936 = (($934) - ($935))|0;
       $937 = (($936|0) / 4)&-1;
       $count45 = $937;
       $938 = $0;
       $939 = ((($938)) + 760|0);
       $940 = HEAP32[$939>>2]|0;
       $941 = $0;
       $942 = ((($941)) + 768|0);
       $943 = HEAP32[$942>>2]|0;
       $944 = ($940>>>0)<=($943>>>0);
       if (!($944)) {
        label = 92;
        break;
       }
       $945 = $old_num43;
       $946 = $945<<2;
       $old_size46 = $946;
       $947 = $new_num44;
       $948 = $947<<2;
       $new_size47 = $948;
       $949 = $0;
       $950 = $0;
       $951 = ((($950)) + 760|0);
       $952 = HEAP32[$951>>2]|0;
       $953 = $old_size46;
       $954 = $new_size47;
       $955 = (_resize($949,$952,$953,$954)|0);
       $956 = $0;
       $957 = ((($956)) + 760|0);
       HEAP32[$957>>2] = $955;
       $958 = $0;
       $959 = ((($958)) + 760|0);
       $960 = HEAP32[$959>>2]|0;
       $961 = $count45;
       $962 = (($960) + ($961<<2)|0);
       $963 = $0;
       $964 = ((($963)) + 764|0);
       HEAP32[$964>>2] = $962;
       $965 = $0;
       $966 = ((($965)) + 760|0);
       $967 = HEAP32[$966>>2]|0;
       $968 = $new_num44;
       $969 = (($967) + ($968<<2)|0);
       $970 = $0;
       $971 = ((($970)) + 768|0);
       HEAP32[$971>>2] = $969;
      }
      $972 = $rr28;
      $973 = $0;
      $974 = ((($973)) + 764|0);
      $975 = HEAP32[$974>>2]|0;
      $976 = ((($975)) + 4|0);
      HEAP32[$974>>2] = $976;
      HEAP32[$975>>2] = $972;
     }
     if ((label|0) == 85) {
      ___assert_fail((1519|0),(904|0),4534,(6126|0));
      // unreachable;
     }
     else if ((label|0) == 88) {
      ___assert_fail((1550|0),(904|0),4534,(6126|0));
      // unreachable;
     }
     else if ((label|0) == 92) {
      ___assert_fail((1550|0),(904|0),4534,(6126|0));
      // unreachable;
     }
    }
   } while(0);
   $l49 = 0;
   $996 = $nn23;
   $997 = (($996) - 1)|0;
   $r50 = $997;
   $998 = $r50;
   $i51 = $998;
   while(1) {
    $999 = $i51;
    $1000 = $l49;
    $1001 = ($999|0)>($1000|0);
    if (!($1001)) {
     break;
    }
    $1002 = $0;
    $1003 = $aa22;
    $1004 = $i51;
    $1005 = (($1003) + ($1004<<2)|0);
    $1006 = ((($1005)) + -4|0);
    $1007 = HEAP32[$1006>>2]|0;
    $1008 = $aa22;
    $1009 = $i51;
    $1010 = (($1008) + ($1009<<2)|0);
    $1011 = HEAP32[$1010>>2]|0;
    $1012 = (_cmp_inverse_rnk($1002,$1007,$1011)|0);
    $1013 = ($1012|0)>(0);
    if ($1013) {
     $1014 = $aa22;
     $1015 = $i51;
     $1016 = (($1014) + ($1015<<2)|0);
     $1017 = HEAP32[$1016>>2]|0;
     $tmp53 = $1017;
     $1018 = $aa22;
     $1019 = $i51;
     $1020 = (($1018) + ($1019<<2)|0);
     $1021 = ((($1020)) + -4|0);
     $1022 = HEAP32[$1021>>2]|0;
     $1023 = $aa22;
     $1024 = $i51;
     $1025 = (($1023) + ($1024<<2)|0);
     HEAP32[$1025>>2] = $1022;
     $1026 = $tmp53;
     $1027 = $aa22;
     $1028 = $i51;
     $1029 = (($1027) + ($1028<<2)|0);
     $1030 = ((($1029)) + -4|0);
     HEAP32[$1030>>2] = $1026;
    }
    $1031 = $i51;
    $1032 = (($1031) + -1)|0;
    $i51 = $1032;
   }
   $1033 = $l49;
   $1034 = (($1033) + 2)|0;
   $i51 = $1034;
   while(1) {
    $1035 = $i51;
    $1036 = $r50;
    $1037 = ($1035|0)<=($1036|0);
    if (!($1037)) {
     break;
    }
    $1038 = $i51;
    $j52 = $1038;
    $1039 = $i51;
    $1040 = $aa22;
    $1041 = (($1040) + ($1039<<2)|0);
    $1042 = HEAP32[$1041>>2]|0;
    $pivot48 = $1042;
    while(1) {
     $1043 = $0;
     $1044 = $pivot48;
     $1045 = $j52;
     $1046 = (($1045) - 1)|0;
     $1047 = $aa22;
     $1048 = (($1047) + ($1046<<2)|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = (_cmp_inverse_rnk($1043,$1044,$1049)|0);
     $1051 = ($1050|0)<(0);
     if (!($1051)) {
      break;
     }
     $1052 = $j52;
     $1053 = (($1052) - 1)|0;
     $1054 = $aa22;
     $1055 = (($1054) + ($1053<<2)|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = $j52;
     $1058 = $aa22;
     $1059 = (($1058) + ($1057<<2)|0);
     HEAP32[$1059>>2] = $1056;
     $1060 = $j52;
     $1061 = (($1060) + -1)|0;
     $j52 = $1061;
    }
    $1062 = $pivot48;
    $1063 = $j52;
    $1064 = $aa22;
    $1065 = (($1064) + ($1063<<2)|0);
    HEAP32[$1065>>2] = $1062;
    $1066 = $i51;
    $1067 = (($1066) + 1)|0;
    $i51 = $1067;
   }
   $1068 = $0;
   $1069 = ((($1068)) + 764|0);
   $1070 = HEAP32[$1069>>2]|0;
   $1071 = $0;
   $1072 = ((($1071)) + 760|0);
   $1073 = HEAP32[$1072>>2]|0;
   $1074 = ($1070|0)==($1073|0);
   if (!($1074)) {
    ___assert_fail((1494|0),(904|0),4534,(6126|0));
    // unreachable;
   }
   $i54 = 0;
   while(1) {
    $1075 = $i54;
    $1076 = $nn23;
    $1077 = (($1076) - 1)|0;
    $1078 = ($1075|0)<($1077|0);
    if (!($1078)) {
     break L21;
    }
    $1079 = $0;
    $1080 = $i54;
    $1081 = $aa22;
    $1082 = (($1081) + ($1080<<2)|0);
    $1083 = HEAP32[$1082>>2]|0;
    $1084 = $i54;
    $1085 = (($1084) + 1)|0;
    $1086 = $aa22;
    $1087 = (($1086) + ($1085<<2)|0);
    $1088 = HEAP32[$1087>>2]|0;
    $1089 = (_cmp_inverse_rnk($1079,$1083,$1088)|0);
    $1090 = ($1089|0)<=(0);
    if (!($1090)) {
     break;
    }
    $1091 = $i54;
    $1092 = (($1091) + 1)|0;
    $i54 = $1092;
   }
   ___assert_fail((6204|0),(904|0),4534,(6126|0));
   // unreachable;
  }
 } while(0);
 $i = 1;
 L167: while(1) {
  $1093 = $0;
  $1094 = ((($1093)) + 616|0);
  $1095 = $1094;
  $1096 = $1095;
  $1097 = HEAP32[$1096>>2]|0;
  $1098 = (($1095) + 4)|0;
  $1099 = $1098;
  $1100 = HEAP32[$1099>>2]|0;
  $1101 = $limit;
  $1102 = $1101;
  $1103 = HEAP32[$1102>>2]|0;
  $1104 = (($1101) + 4)|0;
  $1105 = $1104;
  $1106 = HEAP32[$1105>>2]|0;
  $1107 = ($1100>>>0)<($1106>>>0);
  $1108 = ($1097>>>0)<($1103>>>0);
  $1109 = ($1100|0)==($1106|0);
  $1110 = $1109 & $1108;
  $1111 = $1107 | $1110;
  if (!($1111)) {
   label = 195;
   break;
  }
  $1112 = $0;
  $1113 = ((($1112)) + 256|0);
  $1114 = HEAP32[$1113>>2]|0;
  $1115 = $i;
  $1116 = (($1114) + ($1115<<2)|0);
  $1117 = $0;
  $1118 = ((($1117)) + 260|0);
  $1119 = HEAP32[$1118>>2]|0;
  $1120 = ($1116|0)==($1119|0);
  if ($1120) {
   $1121 = $0;
   $1122 = ((($1121)) + 708|0);
   $1123 = HEAP32[$1122>>2]|0;
   $1124 = $oldladded;
   $1125 = ($1123|0)==($1124|0);
   if ($1125) {
    label = 195;
    break;
   }
   $i = 1;
   $1126 = $0;
   $1127 = ((($1126)) + 708|0);
   $1128 = HEAP32[$1127>>2]|0;
   $oldladded = $1128;
  }
  $1129 = $0;
  $1130 = ((($1129)) + 256|0);
  $1131 = HEAP32[$1130>>2]|0;
  $1132 = $i;
  $1133 = (($1131) + ($1132<<2)|0);
  $1134 = $0;
  $1135 = ((($1134)) + 260|0);
  $1136 = HEAP32[$1135>>2]|0;
  $1137 = ($1133>>>0)<($1136>>>0);
  if (!($1137)) {
   label = 123;
   break;
  }
  $1138 = $i;
  $1139 = (($1138) + 1)|0;
  $i = $1139;
  $1140 = $0;
  $1141 = ((($1140)) + 256|0);
  $1142 = HEAP32[$1141>>2]|0;
  $1143 = (($1142) + ($1138<<2)|0);
  $1144 = HEAP32[$1143>>2]|0;
  $r = $1144;
  $1145 = $0;
  $1146 = ((($1145)) + 40|0);
  $1147 = HEAP32[$1146>>2]|0;
  $1148 = $r;
  $1149 = $0;
  $1150 = ((($1149)) + 48|0);
  $1151 = HEAP32[$1150>>2]|0;
  $1152 = $1148;
  $1153 = $1151;
  $1154 = (($1152) - ($1153))|0;
  $1155 = (($1154|0) / 8)&-1;
  $1156 = $1155<<1;
  $1157 = (($1147) + ($1156)|0);
  $lit = $1157;
  $1158 = $lit;
  $1159 = HEAP8[$1158>>0]|0;
  $1160 = ($1159<<24>>24)!=(0);
  if ($1160) {
   continue;
  }
  $1161 = $0;
  $1162 = $0;
  $1163 = ((($1162)) + 40|0);
  $1164 = HEAP32[$1163>>2]|0;
  $1165 = $lit;
  $1166 = $0;
  $1167 = ((($1166)) + 40|0);
  $1168 = HEAP32[$1167>>2]|0;
  $1169 = $1165;
  $1170 = $1168;
  $1171 = (($1169) - ($1170))|0;
  $1172 = 1 ^ $1171;
  $1173 = (($1164) + ($1172)|0);
  $1174 = (_lit_has_binary_clauses($1161,$1173)|0);
  $1175 = ($1174|0)!=(0);
  if (!($1175)) {
   continue;
  }
  $1176 = $0;
  $1177 = $lit;
  _assign_decision($1176,$1177);
  $1178 = $0;
  $1179 = ((($1178)) + 128|0);
  $1180 = HEAP32[$1179>>2]|0;
  $1181 = $0;
  $1182 = ((($1181)) + 124|0);
  $1183 = HEAP32[$1182>>2]|0;
  $1184 = $1180;
  $1185 = $1183;
  $1186 = (($1184) - ($1185))|0;
  $1187 = (($1186|0) / 4)&-1;
  $old_trail_count = $1187;
  $1188 = $0;
  _flbcp($1188);
  $1189 = $0;
  $1190 = ((($1189)) + 332|0);
  $1191 = HEAP32[$1190>>2]|0;
  $1192 = ($1191|0)!=(0|0);
  if (!($1192)) {
   $1216 = $0;
   $1217 = ((($1216)) + 616|0);
   $1218 = $1217;
   $1219 = $1218;
   $1220 = HEAP32[$1219>>2]|0;
   $1221 = (($1218) + 4)|0;
   $1222 = $1221;
   $1223 = HEAP32[$1222>>2]|0;
   $1224 = $limit;
   $1225 = $1224;
   $1226 = HEAP32[$1225>>2]|0;
   $1227 = (($1224) + 4)|0;
   $1228 = $1227;
   $1229 = HEAP32[$1228>>2]|0;
   $1230 = ($1223>>>0)>($1229>>>0);
   $1231 = ($1220>>>0)>=($1226>>>0);
   $1232 = ($1223|0)==($1229|0);
   $1233 = $1232 & $1231;
   $1234 = $1230 | $1233;
   $1235 = $0;
   if ($1234) {
    label = 134;
    break;
   }
   $1236 = ((($1235)) + 40|0);
   $1237 = HEAP32[$1236>>2]|0;
   $1238 = $lit;
   $1239 = $0;
   $1240 = ((($1239)) + 40|0);
   $1241 = HEAP32[$1240>>2]|0;
   $1242 = $1238;
   $1243 = $1241;
   $1244 = (($1242) - ($1243))|0;
   $1245 = 1 ^ $1244;
   $1246 = (($1237) + ($1245)|0);
   $lit = $1246;
   $1247 = $0;
   $1248 = $0;
   $1249 = ((($1248)) + 40|0);
   $1250 = HEAP32[$1249>>2]|0;
   $1251 = $lit;
   $1252 = $0;
   $1253 = ((($1252)) + 40|0);
   $1254 = HEAP32[$1253>>2]|0;
   $1255 = $1251;
   $1256 = $1254;
   $1257 = (($1255) - ($1256))|0;
   $1258 = 1 ^ $1257;
   $1259 = (($1250) + ($1258)|0);
   $1260 = (_lit_has_binary_clauses($1247,$1259)|0);
   $1261 = ($1260|0)!=(0);
   $1262 = $0;
   if (!($1261)) {
    _undo($1262,0);
    continue;
   }
   $1263 = ((($1262)) + 128|0);
   $1264 = HEAP32[$1263>>2]|0;
   $1265 = $0;
   $1266 = ((($1265)) + 124|0);
   $1267 = HEAP32[$1266>>2]|0;
   $1268 = $1264;
   $1269 = $1267;
   $1270 = (($1268) - ($1269))|0;
   $1271 = (($1270|0) / 4)&-1;
   $new_trail_count = $1271;
   $1272 = $new_trail_count;
   $1273 = $old_trail_count;
   $1274 = (($1272) - ($1273))|0;
   $saved_count = $1274;
   $1275 = $saved_count;
   $1276 = $0;
   $1277 = ((($1276)) + 672|0);
   $1278 = HEAP32[$1277>>2]|0;
   $1279 = ($1275>>>0)>($1278>>>0);
   if ($1279) {
    $1280 = $0;
    $1281 = ((($1280)) + 672|0);
    $1282 = HEAP32[$1281>>2]|0;
    $1283 = ($1282|0)!=(0);
    if ($1283) {
     $1284 = $0;
     $1285 = ((($1284)) + 672|0);
     $1286 = HEAP32[$1285>>2]|0;
     $1287 = $1286<<1;
     $1288 = $1287;
    } else {
     $1288 = 1;
    }
    $new_saved_size = $1288;
    while(1) {
     $1289 = $saved_count;
     $1290 = $new_saved_size;
     $1291 = ($1289>>>0)>($1290>>>0);
     if (!($1291)) {
      break;
     }
     $1292 = $new_saved_size;
     $1293 = $1292<<1;
     $new_saved_size = $1293;
    }
    $1294 = $0;
    $1295 = ((($1294)) + 672|0);
    $1296 = HEAP32[$1295>>2]|0;
    $1297 = $1296<<2;
    $old_size55 = $1297;
    $1298 = $new_saved_size;
    $1299 = $1298<<2;
    $new_size56 = $1299;
    $1300 = $0;
    $1301 = $0;
    $1302 = ((($1301)) + 668|0);
    $1303 = HEAP32[$1302>>2]|0;
    $1304 = $old_size55;
    $1305 = $new_size56;
    $1306 = (_resize($1300,$1303,$1304,$1305)|0);
    $1307 = $0;
    $1308 = ((($1307)) + 668|0);
    HEAP32[$1308>>2] = $1306;
    $1309 = $new_saved_size;
    $1310 = $0;
    $1311 = ((($1310)) + 672|0);
    HEAP32[$1311>>2] = $1309;
   }
   $j = 0;
   while(1) {
    $1312 = $j;
    $1313 = $saved_count;
    $1314 = ($1312>>>0)<($1313>>>0);
    if (!($1314)) {
     break;
    }
    $1315 = $old_trail_count;
    $1316 = $j;
    $1317 = (($1315) + ($1316))|0;
    $1318 = $0;
    $1319 = ((($1318)) + 124|0);
    $1320 = HEAP32[$1319>>2]|0;
    $1321 = (($1320) + ($1317<<2)|0);
    $1322 = HEAP32[$1321>>2]|0;
    $1323 = $j;
    $1324 = $0;
    $1325 = ((($1324)) + 668|0);
    $1326 = HEAP32[$1325>>2]|0;
    $1327 = (($1326) + ($1323<<2)|0);
    HEAP32[$1327>>2] = $1322;
    $1328 = $j;
    $1329 = (($1328) + 1)|0;
    $j = $1329;
   }
   $1330 = $0;
   _undo($1330,0);
   $1331 = $0;
   $1332 = $lit;
   _assign_decision($1331,$1332);
   $1333 = $0;
   _flbcp($1333);
   $1334 = $0;
   $1335 = ((($1334)) + 332|0);
   $1336 = HEAP32[$1335>>2]|0;
   $1337 = ($1336|0)!=(0|0);
   if (!($1337)) {
    $1338 = $0;
    $1339 = ((($1338)) + 128|0);
    $1340 = HEAP32[$1339>>2]|0;
    $1341 = $0;
    $1342 = ((($1341)) + 124|0);
    $1343 = HEAP32[$1342>>2]|0;
    $1344 = $1340;
    $1345 = $1343;
    $1346 = (($1344) - ($1345))|0;
    $1347 = (($1346|0) / 4)&-1;
    $1348 = $new_trail_count;
    $1349 = ($1347|0)<=($1348|0);
    if ($1349) {
     $1350 = $lit;
     $1363 = $1350;
    } else {
     $1351 = $0;
     $1352 = ((($1351)) + 40|0);
     $1353 = HEAP32[$1352>>2]|0;
     $1354 = $lit;
     $1355 = $0;
     $1356 = ((($1355)) + 40|0);
     $1357 = HEAP32[$1356>>2]|0;
     $1358 = $1354;
     $1359 = $1357;
     $1360 = (($1358) - ($1359))|0;
     $1361 = 1 ^ $1360;
     $1362 = (($1353) + ($1361)|0);
     $1363 = $1362;
    }
    $pivot = $1363;
    $common = 0;
    $j = 0;
    while(1) {
     $1364 = $j;
     $1365 = $saved_count;
     $1366 = ($1364>>>0)<($1365>>>0);
     if (!($1366)) {
      break;
     }
     $1367 = $j;
     $1368 = $0;
     $1369 = ((($1368)) + 668|0);
     $1370 = HEAP32[$1369>>2]|0;
     $1371 = (($1370) + ($1367<<2)|0);
     $1372 = HEAP32[$1371>>2]|0;
     $other = $1372;
     $1373 = HEAP8[$1372>>0]|0;
     $1374 = $1373 << 24 >> 24;
     $1375 = ($1374|0)==(1);
     if ($1375) {
      $1376 = $other;
      $1377 = $common;
      $1378 = (($1377) + 1)|0;
      $common = $1378;
      $1379 = $0;
      $1380 = ((($1379)) + 668|0);
      $1381 = HEAP32[$1380>>2]|0;
      $1382 = (($1381) + ($1377<<2)|0);
      HEAP32[$1382>>2] = $1376;
     }
     $1383 = $j;
     $1384 = (($1383) + 1)|0;
     $j = $1384;
    }
    $1385 = $0;
    _undo($1385,0);
    $j = 0;
    while(1) {
     $1386 = $j;
     $1387 = $common;
     $1388 = ($1386>>>0)<($1387>>>0);
     if (!($1388)) {
      continue L167;
     }
     $1389 = $0;
     $1390 = ((($1389)) + 616|0);
     $1391 = $1390;
     $1392 = $1391;
     $1393 = HEAP32[$1392>>2]|0;
     $1394 = (($1391) + 4)|0;
     $1395 = $1394;
     $1396 = HEAP32[$1395>>2]|0;
     $1397 = $limit;
     $1398 = $1397;
     $1399 = HEAP32[$1398>>2]|0;
     $1400 = (($1397) + 4)|0;
     $1401 = $1400;
     $1402 = HEAP32[$1401>>2]|0;
     $1403 = $delta;
     $1404 = $1403;
     $1405 = HEAP32[$1404>>2]|0;
     $1406 = (($1403) + 4)|0;
     $1407 = $1406;
     $1408 = HEAP32[$1407>>2]|0;
     $1409 = (_i64Add(($1399|0),($1402|0),($1405|0),($1408|0))|0);
     $1410 = tempRet0;
     $1411 = ($1396>>>0)<($1410>>>0);
     $1412 = ($1393>>>0)<($1409>>>0);
     $1413 = ($1396|0)==($1410|0);
     $1414 = $1413 & $1412;
     $1415 = $1411 | $1414;
     if (!($1415)) {
      continue L167;
     }
     $1416 = $j;
     $1417 = $0;
     $1418 = ((($1417)) + 668|0);
     $1419 = HEAP32[$1418>>2]|0;
     $1420 = (($1419) + ($1416<<2)|0);
     $1421 = HEAP32[$1420>>2]|0;
     $other = $1421;
     $1422 = $other;
     $1423 = HEAP8[$1422>>0]|0;
     $1424 = $1423 << 24 >> 24;
     $1425 = ($1424|0)==(1);
     L213: do {
      if (!($1425)) {
       $1426 = $other;
       $1427 = HEAP8[$1426>>0]|0;
       $1428 = ($1427<<24>>24)!=(0);
       if ($1428) {
        label = 161;
        break L167;
       }
       $1429 = $pivot;
       $1430 = $0;
       $1431 = ((($1430)) + 40|0);
       $1432 = HEAP32[$1431>>2]|0;
       $1433 = $other;
       $1434 = $0;
       $1435 = ((($1434)) + 40|0);
       $1436 = HEAP32[$1435>>2]|0;
       $1437 = $1433;
       $1438 = $1436;
       $1439 = (($1437) - ($1438))|0;
       $1440 = 1 ^ $1439;
       $1441 = (($1432) + ($1440)|0);
       $1442 = ($1429|0)!=($1441|0);
       if (!($1442)) {
        label = 163;
        break L167;
       }
       $1443 = $pivot;
       $1444 = $other;
       $1445 = ($1443|0)!=($1444|0);
       if (!($1445)) {
        label = 165;
        break L167;
       }
       $1446 = $0;
       $1447 = $0;
       $1448 = ((($1447)) + 40|0);
       $1449 = HEAP32[$1448>>2]|0;
       $1450 = $other;
       $1451 = $0;
       $1452 = ((($1451)) + 40|0);
       $1453 = HEAP32[$1452>>2]|0;
       $1454 = $1450;
       $1455 = $1453;
       $1456 = (($1454) - ($1455))|0;
       $1457 = 1 ^ $1456;
       $1458 = (($1449) + ($1457)|0);
       _assign_decision($1446,$1458);
       $1459 = $0;
       _flbcp($1459);
       $1460 = $0;
       $1461 = ((($1460)) + 28|0);
       $1462 = HEAP32[$1461>>2]|0;
       $1463 = ($1462|0)==(1);
       if (!($1463)) {
        label = 167;
        break L167;
       }
       $1464 = $0;
       $1465 = ((($1464)) + 332|0);
       $1466 = HEAP32[$1465>>2]|0;
       $1467 = ($1466|0)!=(0|0);
       $1468 = $0;
       do {
        if ($1467) {
         _backtrack($1468);
         $1469 = $0;
         $1470 = ((($1469)) + 28|0);
         $1471 = HEAP32[$1470>>2]|0;
         $1472 = ($1471|0)!=(0);
         if ($1472) {
          label = 170;
          break L167;
         }
        } else {
         $1473 = $pivot;
         _assign_decision($1468,$1473);
         $1474 = $0;
         _flbcp($1474);
         $1475 = $0;
         _backtrack($1475);
         $1476 = $0;
         $1477 = ((($1476)) + 28|0);
         $1478 = HEAP32[$1477>>2]|0;
         $1479 = ($1478|0)!=(0);
         if (!($1479)) {
          break;
         }
         $1480 = $0;
         $1481 = ((($1480)) + 28|0);
         $1482 = HEAP32[$1481>>2]|0;
         $1483 = ($1482|0)==(1);
         if (!($1483)) {
          label = 174;
          break L167;
         }
         $1484 = $0;
         _flbcp($1484);
         $1485 = $0;
         $1486 = ((($1485)) + 332|0);
         $1487 = HEAP32[$1486>>2]|0;
         $1488 = ($1487|0)!=(0|0);
         $1489 = $0;
         if ($1488) {
          _backtrack($1489);
          $1490 = $0;
          $1491 = ((($1490)) + 28|0);
          $1492 = HEAP32[$1491>>2]|0;
          $1493 = ($1492|0)!=(0);
          if ($1493) {
           label = 177;
           break L167;
          }
         } else {
          $1494 = $0;
          $1495 = ((($1494)) + 40|0);
          $1496 = HEAP32[$1495>>2]|0;
          $1497 = $pivot;
          $1498 = $0;
          $1499 = ((($1498)) + 40|0);
          $1500 = HEAP32[$1499>>2]|0;
          $1501 = $1497;
          $1502 = $1500;
          $1503 = (($1501) - ($1502))|0;
          $1504 = 1 ^ $1503;
          $1505 = (($1496) + ($1504)|0);
          _assign_decision($1489,$1505);
          $1506 = $0;
          _flbcp($1506);
          $1507 = $0;
          _backtrack($1507);
          $1508 = $0;
          $1509 = ((($1508)) + 28|0);
          $1510 = HEAP32[$1509>>2]|0;
          $1511 = ($1510|0)!=(0);
          do {
           if ($1511) {
            $1512 = $0;
            $1513 = ((($1512)) + 28|0);
            $1514 = HEAP32[$1513>>2]|0;
            $1515 = ($1514|0)==(1);
            if (!($1515)) {
             label = 181;
             break L167;
            }
            $1516 = $0;
            _flbcp($1516);
            $1517 = $0;
            $1518 = ((($1517)) + 332|0);
            $1519 = HEAP32[$1518>>2]|0;
            $1520 = ($1519|0)!=(0|0);
            $1521 = $0;
            if ($1520) {
             _backtrack($1521);
             break;
            } else {
             _undo($1521,0);
             break L213;
            }
           }
          } while(0);
          $1522 = $0;
          $1523 = ((($1522)) + 28|0);
          $1524 = HEAP32[$1523>>2]|0;
          $1525 = ($1524|0)!=(0);
          if ($1525) {
           label = 186;
           break L167;
          }
         }
         $1526 = $0;
         $1527 = ((($1526)) + 28|0);
         $1528 = HEAP32[$1527>>2]|0;
         $1529 = ($1528|0)!=(0);
         if ($1529) {
          label = 189;
          break L167;
         }
        }
       } while(0);
       $1530 = $0;
       $1531 = ((($1530)) + 28|0);
       $1532 = HEAP32[$1531>>2]|0;
       $1533 = ($1532|0)!=(0);
       if ($1533) {
        label = 192;
        break L167;
       }
       $1534 = $0;
       _flbcp($1534);
       $1535 = $0;
       $1536 = ((($1535)) + 636|0);
       $1537 = HEAP32[$1536>>2]|0;
       $1538 = (($1537) + 1)|0;
       HEAP32[$1536>>2] = $1538;
       $1539 = $0;
       $1540 = ((($1539)) + 640|0);
       $1541 = HEAP32[$1540>>2]|0;
       $1542 = (($1541) + 1)|0;
       HEAP32[$1540>>2] = $1542;
       $1543 = $0;
       $1544 = ((($1543)) + 332|0);
       $1545 = HEAP32[$1544>>2]|0;
       $1546 = ($1545|0)!=(0|0);
       if ($1546) {
        label = 128;
        break L167;
       }
      }
     } while(0);
     $1547 = $j;
     $1548 = (($1547) + 1)|0;
     $j = $1548;
    }
   }
  }
  $1193 = $0;
  $1194 = ((($1193)) + 636|0);
  $1195 = HEAP32[$1194>>2]|0;
  $1196 = (($1195) + 1)|0;
  HEAP32[$1194>>2] = $1196;
  $1197 = $0;
  $1198 = ((($1197)) + 644|0);
  $1199 = HEAP32[$1198>>2]|0;
  $1200 = (($1199) + 1)|0;
  HEAP32[$1198>>2] = $1200;
  $1201 = $0;
  _backtrack($1201);
  $1202 = $0;
  _flbcp($1202);
  $1203 = $0;
  $1204 = ((($1203)) + 332|0);
  $1205 = HEAP32[$1204>>2]|0;
  $1206 = ($1205|0)!=(0|0);
  if ($1206) {
   label = 128;
   break;
  }
 }
 switch (label|0) {
  case 123: {
   ___assert_fail((6253|0),(904|0),4550,(6126|0));
   // unreachable;
   break;
  }
  case 128: {
   $1207 = $0;
   $1208 = ((($1207)) + 28|0);
   $1209 = HEAP32[$1208>>2]|0;
   $1210 = ($1209|0)!=(0);
   if ($1210) {
    ___assert_fail((2784|0),(904|0),4590,(6126|0));
    // unreachable;
   }
   $1211 = $0;
   _backtrack($1211);
   $1212 = $0;
   $1213 = ((($1212)) + 328|0);
   $1214 = HEAP32[$1213>>2]|0;
   $1215 = ($1214|0)!=(0|0);
   if ($1215) {
    break;
   } else {
    ___assert_fail((6278|0),(904|0),4592,(6126|0));
    // unreachable;
   }
   break;
  }
  case 134: {
   _undo($1235,0);
   label = 195;
   break;
  }
  case 161: {
   ___assert_fail((6288|0),(904|0),4669,(6126|0));
   // unreachable;
   break;
  }
  case 163: {
   ___assert_fail((6300|0),(904|0),4674,(6126|0));
   // unreachable;
   break;
  }
  case 165: {
   ___assert_fail((6323|0),(904|0),4675,(6126|0));
   // unreachable;
   break;
  }
  case 167: {
   ___assert_fail((6338|0),(904|0),4680,(6126|0));
   // unreachable;
   break;
  }
  case 170: {
   ___assert_fail((2784|0),(904|0),4684,(6126|0));
   // unreachable;
   break;
  }
  case 174: {
   ___assert_fail((6338|0),(904|0),4692,(6126|0));
   // unreachable;
   break;
  }
  case 177: {
   ___assert_fail((2784|0),(904|0),4698,(6126|0));
   // unreachable;
   break;
  }
  case 181: {
   ___assert_fail((6338|0),(904|0),4705,(6126|0));
   // unreachable;
   break;
  }
  case 186: {
   ___assert_fail((2784|0),(904|0),4719,(6126|0));
   // unreachable;
   break;
  }
  case 189: {
   ___assert_fail((2784|0),(904|0),4722,(6126|0));
   // unreachable;
   break;
  }
  case 192: {
   ___assert_fail((2784|0),(904|0),4725,(6126|0));
   // unreachable;
   break;
  }
 }
 if ((label|0) == 195) {
  $1549 = $0;
  $1550 = ((($1549)) + 616|0);
  $1551 = $1550;
  $1552 = $1551;
  $1553 = HEAP32[$1552>>2]|0;
  $1554 = (($1551) + 4)|0;
  $1555 = $1554;
  $1556 = HEAP32[$1555>>2]|0;
  $1557 = $0;
  $1558 = ((($1557)) + 656|0);
  $1559 = $1558;
  $1560 = $1559;
  $1561 = HEAP32[$1560>>2]|0;
  $1562 = (($1559) + 4)|0;
  $1563 = $1562;
  $1564 = HEAP32[$1563>>2]|0;
  $1565 = (_i64Subtract(($1553|0),($1556|0),($1561|0),($1564|0))|0);
  $1566 = tempRet0;
  $1567 = (___muldi3(9,0,($1565|0),($1566|0))|0);
  $1568 = tempRet0;
  $1569 = $0;
  $1570 = ((($1569)) + 656|0);
  $1571 = $1570;
  $1572 = $1571;
  $1573 = HEAP32[$1572>>2]|0;
  $1574 = (($1571) + 4)|0;
  $1575 = $1574;
  $1576 = HEAP32[$1575>>2]|0;
  $1577 = (_i64Add(($1573|0),($1576|0),($1567|0),($1568|0))|0);
  $1578 = tempRet0;
  $1579 = $1570;
  $1580 = $1579;
  HEAP32[$1580>>2] = $1577;
  $1581 = (($1579) + 4)|0;
  $1582 = $1581;
  HEAP32[$1582>>2] = $1578;
 }
 $1583 = $0;
 $1584 = ((($1583)) + 256|0);
 $1585 = HEAP32[$1584>>2]|0;
 $1586 = $0;
 $1587 = ((($1586)) + 260|0);
 $1588 = HEAP32[$1587>>2]|0;
 $1589 = ($1585>>>0)<($1588>>>0);
 if (!($1589)) {
  ___assert_fail((6353|0),(904|0),4744,(6126|0));
  // unreachable;
 }
 $1590 = $0;
 $1591 = ((($1590)) + 256|0);
 $1592 = HEAP32[$1591>>2]|0;
 $1593 = ((($1592)) + 4|0);
 $q = $1593;
 $p = $1593;
 while(1) {
  $1594 = $p;
  $1595 = $0;
  $1596 = ((($1595)) + 260|0);
  $1597 = HEAP32[$1596>>2]|0;
  $1598 = ($1594>>>0)<($1597>>>0);
  if (!($1598)) {
   break;
  }
  $1599 = $p;
  $1600 = HEAP32[$1599>>2]|0;
  $r = $1600;
  $1601 = $0;
  $1602 = ((($1601)) + 40|0);
  $1603 = HEAP32[$1602>>2]|0;
  $1604 = $r;
  $1605 = $0;
  $1606 = ((($1605)) + 48|0);
  $1607 = HEAP32[$1606>>2]|0;
  $1608 = $1604;
  $1609 = $1607;
  $1610 = (($1608) - ($1609))|0;
  $1611 = (($1610|0) / 8)&-1;
  $1612 = $1611<<1;
  $1613 = (($1603) + ($1612)|0);
  $lit = $1613;
  $1614 = $lit;
  $1615 = HEAP8[$1614>>0]|0;
  $1616 = ($1615<<24>>24)!=(0);
  $1617 = $r;
  if ($1616) {
   $1618 = ((($1617)) + 4|0);
   $1619 = HEAP32[$1618>>2]|0;
   $1620 = $1619 & -1073741824;
   HEAP32[$1618>>2] = $1620;
  } else {
   $1621 = $q;
   $1622 = ((($1621)) + 4|0);
   $q = $1622;
   HEAP32[$1621>>2] = $1617;
  }
  $1623 = $p;
  $1624 = ((($1623)) + 4|0);
  $p = $1624;
 }
 $1625 = $0;
 $1626 = ((($1625)) + 256|0);
 $1627 = HEAP32[$1626>>2]|0;
 $1628 = ((($1627)) + 4|0);
 $aa57 = $1628;
 $1629 = $0;
 $1630 = ((($1629)) + 260|0);
 $1631 = HEAP32[$1630>>2]|0;
 $1632 = $0;
 $1633 = ((($1632)) + 256|0);
 $1634 = HEAP32[$1633>>2]|0;
 $1635 = ((($1634)) + 4|0);
 $1636 = $1631;
 $1637 = $1635;
 $1638 = (($1636) - ($1637))|0;
 $1639 = (($1638|0) / 4)&-1;
 $nn58 = $1639;
 $l59 = 0;
 $1640 = $nn58;
 $1641 = (($1640) - 1)|0;
 $r60 = $1641;
 $1642 = $0;
 $1643 = ((($1642)) + 764|0);
 $1644 = HEAP32[$1643>>2]|0;
 $1645 = $0;
 $1646 = ((($1645)) + 760|0);
 $1647 = HEAP32[$1646>>2]|0;
 $1648 = ($1644|0)==($1647|0);
 if (!($1648)) {
  ___assert_fail((1494|0),(904|0),4756,(6126|0));
  // unreachable;
 }
 $1649 = $r60;
 $1650 = $l59;
 $1651 = (($1649) - ($1650))|0;
 $1652 = ($1651|0)<=(10);
 L281: do {
  if (!($1652)) {
   while(1) {
    $1653 = $l59;
    $1654 = $r60;
    $1655 = (($1653) + ($1654))|0;
    $1656 = (($1655|0) / 2)&-1;
    $m61 = $1656;
    $1657 = $aa57;
    $1658 = $r60;
    $1659 = (($1657) + ($1658<<2)|0);
    $1660 = ((($1659)) + -4|0);
    $1661 = HEAP32[$1660>>2]|0;
    $tmp65 = $1661;
    $1662 = $aa57;
    $1663 = $m61;
    $1664 = (($1662) + ($1663<<2)|0);
    $1665 = HEAP32[$1664>>2]|0;
    $1666 = $aa57;
    $1667 = $r60;
    $1668 = (($1666) + ($1667<<2)|0);
    $1669 = ((($1668)) + -4|0);
    HEAP32[$1669>>2] = $1665;
    $1670 = $tmp65;
    $1671 = $aa57;
    $1672 = $m61;
    $1673 = (($1671) + ($1672<<2)|0);
    HEAP32[$1673>>2] = $1670;
    $1674 = $0;
    $1675 = $aa57;
    $1676 = $l59;
    $1677 = (($1675) + ($1676<<2)|0);
    $1678 = HEAP32[$1677>>2]|0;
    $1679 = $aa57;
    $1680 = $r60;
    $1681 = (($1679) + ($1680<<2)|0);
    $1682 = ((($1681)) + -4|0);
    $1683 = HEAP32[$1682>>2]|0;
    $1684 = (_cmp_inverse_rnk($1674,$1678,$1683)|0);
    $1685 = ($1684|0)>(0);
    if ($1685) {
     $1686 = $aa57;
     $1687 = $r60;
     $1688 = (($1686) + ($1687<<2)|0);
     $1689 = ((($1688)) + -4|0);
     $1690 = HEAP32[$1689>>2]|0;
     $tmp66 = $1690;
     $1691 = $aa57;
     $1692 = $l59;
     $1693 = (($1691) + ($1692<<2)|0);
     $1694 = HEAP32[$1693>>2]|0;
     $1695 = $aa57;
     $1696 = $r60;
     $1697 = (($1695) + ($1696<<2)|0);
     $1698 = ((($1697)) + -4|0);
     HEAP32[$1698>>2] = $1694;
     $1699 = $tmp66;
     $1700 = $aa57;
     $1701 = $l59;
     $1702 = (($1700) + ($1701<<2)|0);
     HEAP32[$1702>>2] = $1699;
    }
    $1703 = $0;
    $1704 = $aa57;
    $1705 = $l59;
    $1706 = (($1704) + ($1705<<2)|0);
    $1707 = HEAP32[$1706>>2]|0;
    $1708 = $aa57;
    $1709 = $r60;
    $1710 = (($1708) + ($1709<<2)|0);
    $1711 = HEAP32[$1710>>2]|0;
    $1712 = (_cmp_inverse_rnk($1703,$1707,$1711)|0);
    $1713 = ($1712|0)>(0);
    if ($1713) {
     $1714 = $aa57;
     $1715 = $r60;
     $1716 = (($1714) + ($1715<<2)|0);
     $1717 = HEAP32[$1716>>2]|0;
     $tmp67 = $1717;
     $1718 = $aa57;
     $1719 = $l59;
     $1720 = (($1718) + ($1719<<2)|0);
     $1721 = HEAP32[$1720>>2]|0;
     $1722 = $aa57;
     $1723 = $r60;
     $1724 = (($1722) + ($1723<<2)|0);
     HEAP32[$1724>>2] = $1721;
     $1725 = $tmp67;
     $1726 = $aa57;
     $1727 = $l59;
     $1728 = (($1726) + ($1727<<2)|0);
     HEAP32[$1728>>2] = $1725;
    }
    $1729 = $0;
    $1730 = $aa57;
    $1731 = $r60;
    $1732 = (($1730) + ($1731<<2)|0);
    $1733 = ((($1732)) + -4|0);
    $1734 = HEAP32[$1733>>2]|0;
    $1735 = $aa57;
    $1736 = $r60;
    $1737 = (($1735) + ($1736<<2)|0);
    $1738 = HEAP32[$1737>>2]|0;
    $1739 = (_cmp_inverse_rnk($1729,$1734,$1738)|0);
    $1740 = ($1739|0)>(0);
    if ($1740) {
     $1741 = $aa57;
     $1742 = $r60;
     $1743 = (($1741) + ($1742<<2)|0);
     $1744 = HEAP32[$1743>>2]|0;
     $tmp68 = $1744;
     $1745 = $aa57;
     $1746 = $r60;
     $1747 = (($1745) + ($1746<<2)|0);
     $1748 = ((($1747)) + -4|0);
     $1749 = HEAP32[$1748>>2]|0;
     $1750 = $aa57;
     $1751 = $r60;
     $1752 = (($1750) + ($1751<<2)|0);
     HEAP32[$1752>>2] = $1749;
     $1753 = $tmp68;
     $1754 = $aa57;
     $1755 = $r60;
     $1756 = (($1754) + ($1755<<2)|0);
     $1757 = ((($1756)) + -4|0);
     HEAP32[$1757>>2] = $1753;
    }
    $1758 = $l59;
    $1759 = (($1758) + 1)|0;
    $1760 = (($1759) - 1)|0;
    $i64 = $1760;
    $1761 = $r60;
    $1762 = (($1761) - 1)|0;
    $j70 = $1762;
    $1763 = $j70;
    $1764 = $aa57;
    $1765 = (($1764) + ($1763<<2)|0);
    $1766 = HEAP32[$1765>>2]|0;
    $pivot69 = $1766;
    while(1) {
     $1767 = $0;
     $1768 = $i64;
     $1769 = (($1768) + 1)|0;
     $i64 = $1769;
     $1770 = $aa57;
     $1771 = (($1770) + ($1769<<2)|0);
     $1772 = HEAP32[$1771>>2]|0;
     $1773 = $pivot69;
     $1774 = (_cmp_inverse_rnk($1767,$1772,$1773)|0);
     $1775 = ($1774|0)<(0);
     if ($1775) {
      continue;
     }
     while(1) {
      $1776 = $0;
      $1777 = $pivot69;
      $1778 = $j70;
      $1779 = (($1778) + -1)|0;
      $j70 = $1779;
      $1780 = $aa57;
      $1781 = (($1780) + ($1779<<2)|0);
      $1782 = HEAP32[$1781>>2]|0;
      $1783 = (_cmp_inverse_rnk($1776,$1777,$1782)|0);
      $1784 = ($1783|0)<(0);
      if (!($1784)) {
       break;
      }
      $1785 = $j70;
      $1786 = $l59;
      $1787 = (($1786) + 1)|0;
      $1788 = ($1785|0)==($1787|0);
      if ($1788) {
       break;
      }
     }
     $1789 = $i64;
     $1790 = $j70;
     $1791 = ($1789|0)>=($1790|0);
     $1792 = $aa57;
     if ($1791) {
      break;
     }
     $1793 = $j70;
     $1794 = (($1792) + ($1793<<2)|0);
     $1795 = HEAP32[$1794>>2]|0;
     $tmp71 = $1795;
     $1796 = $aa57;
     $1797 = $i64;
     $1798 = (($1796) + ($1797<<2)|0);
     $1799 = HEAP32[$1798>>2]|0;
     $1800 = $aa57;
     $1801 = $j70;
     $1802 = (($1800) + ($1801<<2)|0);
     HEAP32[$1802>>2] = $1799;
     $1803 = $tmp71;
     $1804 = $aa57;
     $1805 = $i64;
     $1806 = (($1804) + ($1805<<2)|0);
     HEAP32[$1806>>2] = $1803;
    }
    $1807 = $r60;
    $1808 = (($1807) - 1)|0;
    $1809 = (($1792) + ($1808<<2)|0);
    $1810 = HEAP32[$1809>>2]|0;
    $tmp72 = $1810;
    $1811 = $aa57;
    $1812 = $i64;
    $1813 = (($1811) + ($1812<<2)|0);
    $1814 = HEAP32[$1813>>2]|0;
    $1815 = $aa57;
    $1816 = $r60;
    $1817 = (($1816) - 1)|0;
    $1818 = (($1815) + ($1817<<2)|0);
    HEAP32[$1818>>2] = $1814;
    $1819 = $tmp72;
    $1820 = $aa57;
    $1821 = $i64;
    $1822 = (($1820) + ($1821<<2)|0);
    HEAP32[$1822>>2] = $1819;
    $1823 = $i64;
    $1824 = $l59;
    $1825 = (($1823) - ($1824))|0;
    $1826 = $r60;
    $1827 = $i64;
    $1828 = (($1826) - ($1827))|0;
    $1829 = ($1825|0)<($1828|0);
    if ($1829) {
     $1830 = $i64;
     $1831 = (($1830) + 1)|0;
     $ll62 = $1831;
     $1832 = $r60;
     $rr63 = $1832;
     $1833 = $i64;
     $1834 = (($1833) - 1)|0;
     $r60 = $1834;
    } else {
     $1835 = $l59;
     $ll62 = $1835;
     $1836 = $i64;
     $1837 = (($1836) - 1)|0;
     $rr63 = $1837;
     $1838 = $i64;
     $1839 = (($1838) + 1)|0;
     $l59 = $1839;
    }
    $1840 = $r60;
    $1841 = $l59;
    $1842 = (($1840) - ($1841))|0;
    $1843 = ($1842|0)>(10);
    $1844 = $rr63;
    $1845 = $ll62;
    $1846 = (($1844) - ($1845))|0;
    $1847 = ($1846|0)>(10);
    if (!($1843)) {
     if ($1847) {
      $1990 = $ll62;
      $l59 = $1990;
      $1991 = $rr63;
      $r60 = $1991;
      continue;
     }
     $1992 = $0;
     $1993 = ((($1992)) + 764|0);
     $1994 = HEAP32[$1993>>2]|0;
     $1995 = $0;
     $1996 = ((($1995)) + 760|0);
     $1997 = HEAP32[$1996>>2]|0;
     $1998 = ($1994>>>0)>($1997>>>0);
     if (!($1998)) {
      break L281;
     }
     $1999 = $0;
     $2000 = ((($1999)) + 764|0);
     $2001 = HEAP32[$2000>>2]|0;
     $2002 = ((($2001)) + -4|0);
     HEAP32[$2000>>2] = $2002;
     $2003 = HEAP32[$2002>>2]|0;
     $r60 = $2003;
     $2004 = $0;
     $2005 = ((($2004)) + 764|0);
     $2006 = HEAP32[$2005>>2]|0;
     $2007 = ((($2006)) + -4|0);
     HEAP32[$2005>>2] = $2007;
     $2008 = HEAP32[$2007>>2]|0;
     $l59 = $2008;
     continue;
    }
    if (!($1847)) {
     label = 224;
     break;
    }
    $1848 = $0;
    $1849 = ((($1848)) + 764|0);
    $1850 = HEAP32[$1849>>2]|0;
    $1851 = $0;
    $1852 = ((($1851)) + 768|0);
    $1853 = HEAP32[$1852>>2]|0;
    $1854 = ($1850|0)==($1853|0);
    if ($1854) {
     $1855 = $0;
     $1856 = ((($1855)) + 768|0);
     $1857 = HEAP32[$1856>>2]|0;
     $1858 = $0;
     $1859 = ((($1858)) + 760|0);
     $1860 = HEAP32[$1859>>2]|0;
     $1861 = $1857;
     $1862 = $1860;
     $1863 = (($1861) - ($1862))|0;
     $1864 = (($1863|0) / 4)&-1;
     $old_num73 = $1864;
     $1865 = $old_num73;
     $1866 = ($1865|0)!=(0);
     $1867 = $old_num73;
     $1868 = $1867<<1;
     $1869 = $1866 ? $1868 : 1;
     $new_num74 = $1869;
     $1870 = $0;
     $1871 = ((($1870)) + 764|0);
     $1872 = HEAP32[$1871>>2]|0;
     $1873 = $0;
     $1874 = ((($1873)) + 760|0);
     $1875 = HEAP32[$1874>>2]|0;
     $1876 = $1872;
     $1877 = $1875;
     $1878 = (($1876) - ($1877))|0;
     $1879 = (($1878|0) / 4)&-1;
     $count75 = $1879;
     $1880 = $0;
     $1881 = ((($1880)) + 760|0);
     $1882 = HEAP32[$1881>>2]|0;
     $1883 = $0;
     $1884 = ((($1883)) + 768|0);
     $1885 = HEAP32[$1884>>2]|0;
     $1886 = ($1882>>>0)<=($1885>>>0);
     if (!($1886)) {
      label = 227;
      break;
     }
     $1887 = $old_num73;
     $1888 = $1887<<2;
     $old_size76 = $1888;
     $1889 = $new_num74;
     $1890 = $1889<<2;
     $new_size77 = $1890;
     $1891 = $0;
     $1892 = $0;
     $1893 = ((($1892)) + 760|0);
     $1894 = HEAP32[$1893>>2]|0;
     $1895 = $old_size76;
     $1896 = $new_size77;
     $1897 = (_resize($1891,$1894,$1895,$1896)|0);
     $1898 = $0;
     $1899 = ((($1898)) + 760|0);
     HEAP32[$1899>>2] = $1897;
     $1900 = $0;
     $1901 = ((($1900)) + 760|0);
     $1902 = HEAP32[$1901>>2]|0;
     $1903 = $count75;
     $1904 = (($1902) + ($1903<<2)|0);
     $1905 = $0;
     $1906 = ((($1905)) + 764|0);
     HEAP32[$1906>>2] = $1904;
     $1907 = $0;
     $1908 = ((($1907)) + 760|0);
     $1909 = HEAP32[$1908>>2]|0;
     $1910 = $new_num74;
     $1911 = (($1909) + ($1910<<2)|0);
     $1912 = $0;
     $1913 = ((($1912)) + 768|0);
     HEAP32[$1913>>2] = $1911;
    }
    $1914 = $ll62;
    $1915 = $0;
    $1916 = ((($1915)) + 764|0);
    $1917 = HEAP32[$1916>>2]|0;
    $1918 = ((($1917)) + 4|0);
    HEAP32[$1916>>2] = $1918;
    HEAP32[$1917>>2] = $1914;
    $1919 = $0;
    $1920 = ((($1919)) + 764|0);
    $1921 = HEAP32[$1920>>2]|0;
    $1922 = $0;
    $1923 = ((($1922)) + 768|0);
    $1924 = HEAP32[$1923>>2]|0;
    $1925 = ($1921|0)==($1924|0);
    if ($1925) {
     $1926 = $0;
     $1927 = ((($1926)) + 768|0);
     $1928 = HEAP32[$1927>>2]|0;
     $1929 = $0;
     $1930 = ((($1929)) + 760|0);
     $1931 = HEAP32[$1930>>2]|0;
     $1932 = $1928;
     $1933 = $1931;
     $1934 = (($1932) - ($1933))|0;
     $1935 = (($1934|0) / 4)&-1;
     $old_num78 = $1935;
     $1936 = $old_num78;
     $1937 = ($1936|0)!=(0);
     $1938 = $old_num78;
     $1939 = $1938<<1;
     $1940 = $1937 ? $1939 : 1;
     $new_num79 = $1940;
     $1941 = $0;
     $1942 = ((($1941)) + 764|0);
     $1943 = HEAP32[$1942>>2]|0;
     $1944 = $0;
     $1945 = ((($1944)) + 760|0);
     $1946 = HEAP32[$1945>>2]|0;
     $1947 = $1943;
     $1948 = $1946;
     $1949 = (($1947) - ($1948))|0;
     $1950 = (($1949|0) / 4)&-1;
     $count80 = $1950;
     $1951 = $0;
     $1952 = ((($1951)) + 760|0);
     $1953 = HEAP32[$1952>>2]|0;
     $1954 = $0;
     $1955 = ((($1954)) + 768|0);
     $1956 = HEAP32[$1955>>2]|0;
     $1957 = ($1953>>>0)<=($1956>>>0);
     if (!($1957)) {
      label = 231;
      break;
     }
     $1958 = $old_num78;
     $1959 = $1958<<2;
     $old_size81 = $1959;
     $1960 = $new_num79;
     $1961 = $1960<<2;
     $new_size82 = $1961;
     $1962 = $0;
     $1963 = $0;
     $1964 = ((($1963)) + 760|0);
     $1965 = HEAP32[$1964>>2]|0;
     $1966 = $old_size81;
     $1967 = $new_size82;
     $1968 = (_resize($1962,$1965,$1966,$1967)|0);
     $1969 = $0;
     $1970 = ((($1969)) + 760|0);
     HEAP32[$1970>>2] = $1968;
     $1971 = $0;
     $1972 = ((($1971)) + 760|0);
     $1973 = HEAP32[$1972>>2]|0;
     $1974 = $count80;
     $1975 = (($1973) + ($1974<<2)|0);
     $1976 = $0;
     $1977 = ((($1976)) + 764|0);
     HEAP32[$1977>>2] = $1975;
     $1978 = $0;
     $1979 = ((($1978)) + 760|0);
     $1980 = HEAP32[$1979>>2]|0;
     $1981 = $new_num79;
     $1982 = (($1980) + ($1981<<2)|0);
     $1983 = $0;
     $1984 = ((($1983)) + 768|0);
     HEAP32[$1984>>2] = $1982;
    }
    $1985 = $rr63;
    $1986 = $0;
    $1987 = ((($1986)) + 764|0);
    $1988 = HEAP32[$1987>>2]|0;
    $1989 = ((($1988)) + 4|0);
    HEAP32[$1987>>2] = $1989;
    HEAP32[$1988>>2] = $1985;
   }
   if ((label|0) == 224) {
    ___assert_fail((1519|0),(904|0),4756,(6126|0));
    // unreachable;
   }
   else if ((label|0) == 227) {
    ___assert_fail((1550|0),(904|0),4756,(6126|0));
    // unreachable;
   }
   else if ((label|0) == 231) {
    ___assert_fail((1550|0),(904|0),4756,(6126|0));
    // unreachable;
   }
  }
 } while(0);
 $l84 = 0;
 $2009 = $nn58;
 $2010 = (($2009) - 1)|0;
 $r85 = $2010;
 $2011 = $r85;
 $i86 = $2011;
 while(1) {
  $2012 = $i86;
  $2013 = $l84;
  $2014 = ($2012|0)>($2013|0);
  if (!($2014)) {
   break;
  }
  $2015 = $0;
  $2016 = $aa57;
  $2017 = $i86;
  $2018 = (($2016) + ($2017<<2)|0);
  $2019 = ((($2018)) + -4|0);
  $2020 = HEAP32[$2019>>2]|0;
  $2021 = $aa57;
  $2022 = $i86;
  $2023 = (($2021) + ($2022<<2)|0);
  $2024 = HEAP32[$2023>>2]|0;
  $2025 = (_cmp_inverse_rnk($2015,$2020,$2024)|0);
  $2026 = ($2025|0)>(0);
  if ($2026) {
   $2027 = $aa57;
   $2028 = $i86;
   $2029 = (($2027) + ($2028<<2)|0);
   $2030 = HEAP32[$2029>>2]|0;
   $tmp88 = $2030;
   $2031 = $aa57;
   $2032 = $i86;
   $2033 = (($2031) + ($2032<<2)|0);
   $2034 = ((($2033)) + -4|0);
   $2035 = HEAP32[$2034>>2]|0;
   $2036 = $aa57;
   $2037 = $i86;
   $2038 = (($2036) + ($2037<<2)|0);
   HEAP32[$2038>>2] = $2035;
   $2039 = $tmp88;
   $2040 = $aa57;
   $2041 = $i86;
   $2042 = (($2040) + ($2041<<2)|0);
   $2043 = ((($2042)) + -4|0);
   HEAP32[$2043>>2] = $2039;
  }
  $2044 = $i86;
  $2045 = (($2044) + -1)|0;
  $i86 = $2045;
 }
 $2046 = $l84;
 $2047 = (($2046) + 2)|0;
 $i86 = $2047;
 while(1) {
  $2048 = $i86;
  $2049 = $r85;
  $2050 = ($2048|0)<=($2049|0);
  if (!($2050)) {
   break;
  }
  $2051 = $i86;
  $j87 = $2051;
  $2052 = $i86;
  $2053 = $aa57;
  $2054 = (($2053) + ($2052<<2)|0);
  $2055 = HEAP32[$2054>>2]|0;
  $pivot83 = $2055;
  while(1) {
   $2056 = $0;
   $2057 = $pivot83;
   $2058 = $j87;
   $2059 = (($2058) - 1)|0;
   $2060 = $aa57;
   $2061 = (($2060) + ($2059<<2)|0);
   $2062 = HEAP32[$2061>>2]|0;
   $2063 = (_cmp_inverse_rnk($2056,$2057,$2062)|0);
   $2064 = ($2063|0)<(0);
   if (!($2064)) {
    break;
   }
   $2065 = $j87;
   $2066 = (($2065) - 1)|0;
   $2067 = $aa57;
   $2068 = (($2067) + ($2066<<2)|0);
   $2069 = HEAP32[$2068>>2]|0;
   $2070 = $j87;
   $2071 = $aa57;
   $2072 = (($2071) + ($2070<<2)|0);
   HEAP32[$2072>>2] = $2069;
   $2073 = $j87;
   $2074 = (($2073) + -1)|0;
   $j87 = $2074;
  }
  $2075 = $pivot83;
  $2076 = $j87;
  $2077 = $aa57;
  $2078 = (($2077) + ($2076<<2)|0);
  HEAP32[$2078>>2] = $2075;
  $2079 = $i86;
  $2080 = (($2079) + 1)|0;
  $i86 = $2080;
 }
 $2081 = $0;
 $2082 = ((($2081)) + 764|0);
 $2083 = HEAP32[$2082>>2]|0;
 $2084 = $0;
 $2085 = ((($2084)) + 760|0);
 $2086 = HEAP32[$2085>>2]|0;
 $2087 = ($2083|0)==($2086|0);
 if (!($2087)) {
  ___assert_fail((1494|0),(904|0),4756,(6126|0));
  // unreachable;
 }
 $i89 = 0;
 while(1) {
  $2088 = $i89;
  $2089 = $nn58;
  $2090 = (($2089) - 1)|0;
  $2091 = ($2088|0)<($2090|0);
  $2092 = $0;
  if (!($2091)) {
   break;
  }
  $2093 = $i89;
  $2094 = $aa57;
  $2095 = (($2094) + ($2093<<2)|0);
  $2096 = HEAP32[$2095>>2]|0;
  $2097 = $i89;
  $2098 = (($2097) + 1)|0;
  $2099 = $aa57;
  $2100 = (($2099) + ($2098<<2)|0);
  $2101 = HEAP32[$2100>>2]|0;
  $2102 = (_cmp_inverse_rnk($2092,$2096,$2101)|0);
  $2103 = ($2102|0)<=(0);
  if (!($2103)) {
   label = 254;
   break;
  }
  $2104 = $i89;
  $2105 = (($2104) + 1)|0;
  $i89 = $2105;
 }
 if ((label|0) == 254) {
  ___assert_fail((6204|0),(904|0),4756,(6126|0));
  // unreachable;
 }
 $2106 = ((($2092)) + 256|0);
 $2107 = HEAP32[$2106>>2]|0;
 $2108 = ((($2107)) + 4|0);
 $p = $2108;
 while(1) {
  $2109 = $p;
  $2110 = $0;
  $2111 = ((($2110)) + 260|0);
  $2112 = HEAP32[$2111>>2]|0;
  $2113 = ($2109>>>0)<($2112>>>0);
  if (!($2113)) {
   break;
  }
  $2114 = $p;
  $2115 = $0;
  $2116 = ((($2115)) + 256|0);
  $2117 = HEAP32[$2116>>2]|0;
  $2118 = $2114;
  $2119 = $2117;
  $2120 = (($2118) - ($2119))|0;
  $2121 = (($2120|0) / 4)&-1;
  $2122 = $p;
  $2123 = HEAP32[$2122>>2]|0;
  $2124 = ((($2123)) + 4|0);
  $2125 = HEAP32[$2124>>2]|0;
  $2126 = $2121 & 1073741823;
  $2127 = $2125 & -1073741824;
  $2128 = $2127 | $2126;
  HEAP32[$2124>>2] = $2128;
  $2129 = $p;
  $2130 = ((($2129)) + 4|0);
  $p = $2130;
 }
 $2131 = $0;
 _sflush($2131);
 $2132 = $0;
 $2133 = ((($2132)) + 472|0);
 $2134 = +HEAPF64[$2133>>3];
 $2135 = $started;
 $2136 = $2134 - $2135;
 $2137 = $0;
 $2138 = ((($2137)) + 480|0);
 $2139 = +HEAPF64[$2138>>3];
 $2140 = $2139 + $2136;
 HEAPF64[$2138>>3] = $2140;
 STACKTOP = sp;return;
}
function _cmp_inverse_jwh_rnk($ps,$r,$s) {
 $ps = $ps|0;
 $r = $r|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $b = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ps;
 $2 = $r;
 $3 = $s;
 $4 = $1;
 $5 = $2;
 $6 = (_rnk2jwh($4,$5)|0);
 $a = $6;
 $7 = $1;
 $8 = $3;
 $9 = (_rnk2jwh($7,$8)|0);
 $b = $9;
 $10 = $a;
 $11 = $b;
 $12 = (_cmpflt($10,$11)|0);
 $res = $12;
 $13 = $res;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $res;
  $16 = (0 - ($15))|0;
  $0 = $16;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $17 = $1;
  $18 = $2;
  $19 = $3;
  $20 = (_cmp_inverse_rnk($17,$18,$19)|0);
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _cmp_inverse_rnk($ps,$a,$b) {
 $ps = $ps|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = $2;
 $5 = (_cmp_rnk($3,$4)|0);
 $6 = (0 - ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function _lit_has_binary_clauses($ps,$lit) {
 $ps = $ps|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lstk = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $lit;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($4) + ($11<<3)|0);
 $lstk = $12;
 $13 = $lstk;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 134217727;
 $17 = ($16|0)!=(0);
 $18 = $17&1;
 STACKTOP = sp;return ($18|0);
}
function _flbcp($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 _bcp($1);
 STACKTOP = sp;return;
}
function _rnk2jwh($ps,$r) {
 $ps = $ps|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $njwh = 0, $nlit = 0, $pjwh = 0, $plit = 0, $res = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $r;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 8)&-1;
 $13 = $12<<1;
 $14 = (($4) + ($13)|0);
 $plit = $14;
 $15 = $plit;
 $16 = ((($15)) + 1|0);
 $nlit = $16;
 $17 = $0;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $plit;
 $21 = $0;
 $22 = ((($21)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $20;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 $27 = (($19) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $pjwh = $28;
 $29 = $0;
 $30 = ((($29)) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $nlit;
 $33 = $0;
 $34 = ((($33)) + 40|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $32;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($31) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $njwh = $40;
 $41 = $pjwh;
 $42 = $njwh;
 $43 = (_mulflt($41,$42)|0);
 $res = $43;
 $44 = $pjwh;
 $45 = $njwh;
 $46 = (_addflt($44,$45)|0);
 $sum = $46;
 $47 = $sum;
 $48 = (_base2flt(1,-10)|0);
 $49 = (_mulflt($47,$48)|0);
 $sum = $49;
 $50 = $res;
 $51 = $sum;
 $52 = (_addflt($50,$51)|0);
 $res = $52;
 $53 = $res;
 STACKTOP = sp;return ($53|0);
}
function _int2unsigned($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $0;
 $2 = ($1|0)<(0);
 $3 = $0;
 if ($2) {
  $4 = (0 - ($3))|0;
  $5 = $4<<1;
  $6 = (1 + ($5))|0;
  $8 = $6;
 } else {
  $7 = $3<<1;
  $8 = $7;
 }
 STACKTOP = sp;return ($8|0);
}
function _reset_assumptions($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 248|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 252|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 148|0);
  $9 = HEAP32[$8>>2]|0;
  $p = $9;
  while(1) {
   $10 = $p;
   $11 = $0;
   $12 = ((($11)) + 152|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($10>>>0)<($13>>>0);
   $15 = $0;
   if (!($14)) {
    break;
   }
   $16 = ((($15)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $p;
   $19 = HEAP32[$18>>2]|0;
   $20 = $0;
   $21 = ((($20)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $19;
   $24 = $22;
   $25 = (($23) - ($24))|0;
   $26 = (($25|0) / 2)&-1;
   $27 = (($17) + (($26*12)|0)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28 & -33;
   HEAP16[$27>>1] = $29;
   $30 = $p;
   $31 = ((($30)) + 4|0);
   $p = $31;
  }
  $32 = ((($15)) + 252|0);
  HEAP32[$32>>2] = 0;
 }
 $33 = $0;
 $34 = ((($33)) + 148|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = ((($36)) + 152|0);
 HEAP32[$37>>2] = $35;
 $38 = $0;
 $39 = ((($38)) + 156|0);
 HEAP32[$39>>2] = $35;
 $40 = $0;
 $41 = ((($40)) + 144|0);
 HEAP32[$41>>2] = 0;
 STACKTOP = sp;return;
}
function _reset_partial($ps) {
 $ps = $ps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $0;
 $2 = ((($1)) + 308|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $idx = 1;
 while(1) {
  $5 = $idx;
  $6 = $0;
  $7 = ((($6)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<=($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $idx;
  $11 = $0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + (($10*12)|0)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 & -8193;
  HEAP16[$14>>1] = $16;
  $17 = $idx;
  $18 = (($17) + 1)|0;
  $idx = $18;
 }
 $19 = $0;
 $20 = ((($19)) + 308|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _fix_trail_lits($ps,$delta) {
 $ps = $ps|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $delta;
 $2 = $0;
 $3 = ((($2)) + 124|0);
 $4 = HEAP32[$3>>2]|0;
 $p = $4;
 while(1) {
  $5 = $p;
  $6 = $0;
  $7 = ((($6)) + 128|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $p;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10)|0);
  HEAP32[$11>>2] = $13;
  $14 = $p;
  $15 = ((($14)) + 4|0);
  $p = $15;
 }
 STACKTOP = sp;return;
}
function _fix_clause_lits($ps,$delta) {
 $ps = $ps|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $clause = 0, $eol = 0, $lit = 0, $p = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $delta;
 $2 = $0;
 $3 = ((($2)) + 268|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 272|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 $9 = $0;
 if ($8) {
  $10 = ((($9)) + 280|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 } else {
  $12 = ((($9)) + 268|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
 }
 $p = $14;
 L5: while(1) {
  $15 = $p;
  $16 = $0;
  $17 = ((($16)) + 284|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)!=($18|0);
  if (!($19)) {
   label = 16;
   break;
  }
  $20 = $p;
  $21 = HEAP32[$20>>2]|0;
  $clause = $21;
  $22 = $clause;
  $23 = ($22|0)!=(0|0);
  L8: do {
   if ($23) {
    $24 = $clause;
    $25 = ((($24)) + 16|0);
    $q = $25;
    $26 = $clause;
    $27 = (_end_of_lits($26)|0);
    $eol = $27;
    while(1) {
     $28 = $q;
     $29 = $eol;
     $30 = ($28>>>0)<($29>>>0);
     if (!($30)) {
      break L8;
     }
     $31 = $q;
     $32 = $clause;
     $33 = ((($32)) + 16|0);
     $34 = $31;
     $35 = $33;
     $36 = (($34) - ($35))|0;
     $37 = (($36|0) / 4)&-1;
     $38 = $clause;
     $39 = HEAP32[$38>>2]|0;
     $40 = ($37|0)<=($39|0);
     if (!($40)) {
      label = 10;
      break L5;
     }
     $41 = $q;
     $42 = HEAP32[$41>>2]|0;
     $lit = $42;
     $43 = $1;
     $44 = $lit;
     $45 = (($44) + ($43)|0);
     $lit = $45;
     $46 = $lit;
     $47 = $q;
     $48 = ((($47)) + 4|0);
     $q = $48;
     HEAP32[$47>>2] = $46;
    }
   }
  } while(0);
  $49 = $p;
  $50 = ((($49)) + 4|0);
  $51 = $0;
  $52 = ((($51)) + 272|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = $0;
   $56 = ((($55)) + 280|0);
   $57 = HEAP32[$56>>2]|0;
   $60 = $57;
  } else {
   $58 = $p;
   $59 = ((($58)) + 4|0);
   $60 = $59;
  }
  $p = $60;
 }
 if ((label|0) == 10) {
  ___assert_fail((6616|0),(904|0),2572,(6654|0));
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function _fix_added_lits($ps,$delta) {
 $ps = $ps|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $delta;
 $2 = $0;
 $3 = ((($2)) + 336|0);
 $4 = HEAP32[$3>>2]|0;
 $p = $4;
 while(1) {
  $5 = $p;
  $6 = $0;
  $7 = ((($6)) + 340|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $p;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10)|0);
  HEAP32[$11>>2] = $13;
  $14 = $p;
  $15 = ((($14)) + 4|0);
  $p = $15;
 }
 STACKTOP = sp;return;
}
function _fix_assumed_lits($ps,$delta) {
 $ps = $ps|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $delta;
 $2 = $0;
 $3 = ((($2)) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $p = $4;
 while(1) {
  $5 = $p;
  $6 = $0;
  $7 = ((($6)) + 152|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $p;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10)|0);
  HEAP32[$11>>2] = $13;
  $14 = $p;
  $15 = ((($14)) + 4|0);
  $p = $15;
 }
 STACKTOP = sp;return;
}
function _fix_cls_lits($ps,$delta) {
 $ps = $ps|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $delta;
 $2 = $0;
 $3 = ((($2)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 $p = $4;
 while(1) {
  $5 = $p;
  $6 = $0;
  $7 = ((($6)) + 168|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $p;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10)|0);
  HEAP32[$11>>2] = $13;
  $14 = $p;
  $15 = ((($14)) + 4|0);
  $p = $15;
 }
 STACKTOP = sp;return;
}
function _fix_impl_lits($ps,$delta) {
 $ps = $ps|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $delta;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $s = $5;
 while(1) {
  $6 = $s;
  $7 = $0;
  $8 = ((($7)) + 64|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12<<1;
  $14 = (($9) + ($13<<3)|0);
  $15 = ((($14)) + 8|0);
  $16 = ($6>>>0)<=($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $s;
  $18 = HEAP32[$17>>2]|0;
  $p = $18;
  while(1) {
   $19 = $p;
   $20 = $s;
   $21 = HEAP32[$20>>2]|0;
   $22 = $s;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 & 134217727;
   $26 = (($21) + ($25<<2)|0);
   $27 = ($19>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $1;
   $29 = $p;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($28)|0);
   HEAP32[$29>>2] = $31;
   $32 = $p;
   $33 = ((($32)) + 4|0);
   $p = $33;
  }
  $34 = $s;
  $35 = ((($34)) + 8|0);
  $s = $35;
 }
 STACKTOP = sp;return;
}
function _fix_heap_rnks($ps,$delta) {
 $ps = $ps|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ps;
 $1 = $delta;
 $2 = $0;
 $3 = ((($2)) + 256|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $p = $5;
 while(1) {
  $6 = $p;
  $7 = $0;
  $8 = ((($7)) + 260|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $1;
  $12 = $p;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<3)|0);
  HEAP32[$12>>2] = $14;
  $15 = $p;
  $16 = ((($15)) + 4|0);
  $p = $16;
 }
 STACKTOP = sp;return;
}
function _ascii2flt($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $base = 0, $ch = 0, $onetenth = 0, $or$cond = 0, $p = 0;
 var $res = 0, $ten = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $2 = (_base2flt(10,0)|0);
 $ten = $2;
 $3 = (_base2flt(26843546,-28)|0);
 $onetenth = $3;
 $res = 0;
 $4 = $1;
 $p = $4;
 $5 = $p;
 $6 = ((($5)) + 1|0);
 $p = $6;
 $7 = HEAP8[$5>>0]|0;
 $8 = $7 << 24 >> 24;
 $ch = $8;
 $9 = $ch;
 $10 = ($9|0)!=(46);
 L1: do {
  if ($10) {
   $11 = $ch;
   $12 = (_isdigit($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    $0 = -1;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
   $14 = $ch;
   $15 = (($14) - 48)|0;
   $16 = (_base2flt($15,0)|0);
   $res = $16;
   while(1) {
    $17 = $p;
    $18 = ((($17)) + 1|0);
    $p = $18;
    $19 = HEAP8[$17>>0]|0;
    $20 = $19 << 24 >> 24;
    $ch = $20;
    $21 = ($20|0)==(0);
    $22 = $ch;
    $23 = ($22|0)==(46);
    $or$cond = $21 | $23;
    if ($or$cond) {
     break L1;
    }
    $24 = $ch;
    $25 = (_isdigit($24)|0);
    $26 = ($25|0)!=(0);
    if (!($26)) {
     break;
    }
    $27 = $res;
    $28 = $ten;
    $29 = (_mulflt($27,$28)|0);
    $res = $29;
    $30 = $ch;
    $31 = (($30) - 48)|0;
    $32 = (_base2flt($31,0)|0);
    $tmp = $32;
    $33 = $res;
    $34 = $tmp;
    $35 = (_addflt($33,$34)|0);
    $res = $35;
   }
   $0 = -1;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $36 = $ch;
 $37 = ($36|0)==(46);
 L14: do {
  if ($37) {
   $38 = $p;
   $39 = ((($38)) + 1|0);
   $p = $39;
   $40 = HEAP8[$38>>0]|0;
   $41 = $40 << 24 >> 24;
   $ch = $41;
   $42 = $ch;
   $43 = (_isdigit($42)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $0 = -1;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
   $45 = $onetenth;
   $base = $45;
   $46 = $ch;
   $47 = (($46) - 48)|0;
   $48 = (_base2flt($47,0)|0);
   $49 = $base;
   $50 = (_mulflt($48,$49)|0);
   $tmp = $50;
   $51 = $res;
   $52 = $tmp;
   $53 = (_addflt($51,$52)|0);
   $res = $53;
   while(1) {
    $54 = $p;
    $55 = ((($54)) + 1|0);
    $p = $55;
    $56 = HEAP8[$54>>0]|0;
    $57 = $56 << 24 >> 24;
    $ch = $57;
    $58 = ($57|0)!=(0);
    if (!($58)) {
     break L14;
    }
    $59 = $ch;
    $60 = (_isdigit($59)|0);
    $61 = ($60|0)!=(0);
    if (!($61)) {
     break;
    }
    $62 = $base;
    $63 = $onetenth;
    $64 = (_mulflt($62,$63)|0);
    $base = $64;
    $65 = $ch;
    $66 = (($65) - 48)|0;
    $67 = (_base2flt($66,0)|0);
    $68 = $base;
    $69 = (_mulflt($67,$68)|0);
    $tmp = $69;
    $70 = $res;
    $71 = $tmp;
    $72 = (_addflt($70,$71)|0);
    $res = $72;
   }
   $0 = -1;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $73 = $res;
 $0 = $73;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _getrusage($who,$ru) {
 $who = $who|0;
 $ru = $ru|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $who;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $ru;
 $0 = (___syscall77(77,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=68; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$01$2 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[64>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[64>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((40)|0));
   $$01$2 = HEAP32[(36)>>2]|0;
   $11 = ($$01$2|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$01$2;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((40)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 7]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 7]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 3;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 7]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 7]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[12>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((6|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (6749 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 6837;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 6837;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 6837;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 180;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn$15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn$15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn$15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn$15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond$18 = $4 & $3;
 L1: do {
  if ($or$cond$18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 7]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 7]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i$33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41279$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$590$i = 0, $$a$3$188$i = 0, $$a$3$i = 0, $$a$3189$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa162$i = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa326 = 0, $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa330 = 0;
 var $$lcssa331 = 0, $$lcssa332 = 0, $$lcssa334 = 0, $$lcssa344 = 0, $$lcssa347 = 0.0, $$lcssa349 = 0, $$lcssa52 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi187$iZ2D = 0, $$pre182$i = 0;
 var $$pre185$i = 0, $$pre186$i = 0, $$pre190 = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0;
 var $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1150$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3137$i = 0, $a$5$lcssa$i = 0, $a$5112$i = 0, $a$6$i = 0, $a$8$i = 0;
 var $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0143$i = 0, $carry3$0131$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$142$i = 0, $d$0$i = 0, $d$0144$i = 0, $d$1130$i = 0, $d$2$lcssa$i = 0;
 var $d$2111$i = 0, $d$4$i = 0, $d$585$i = 0, $d$678$i = 0, $d$789$i = 0, $e$0126$i = 0, $e$1$i = 0, $e$2107$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$196$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0103 = 0, $fl$056 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa197 = 0, $i$0108 = 0, $i$0125$i = 0, $i$03$i = 0, $i$03$i$25 = 0;
 var $i$1$lcssa$i = 0, $i$1119 = 0, $i$1119$i = 0, $i$2106$i = 0, $i$295 = 0, $i$295$lcssa = 0, $i$3102$i = 0, $i$393 = 0, $isdigit = 0, $isdigit$2$i = 0, $isdigit$2$i$23 = 0, $isdigit$i = 0, $isdigit$i$27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$1$i = 0, $isdigittmp$1$i$22 = 0, $isdigittmp$i = 0;
 var $isdigittmp$i$26 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i$24 = 0, $isdigittmp9 = 0, $j$0$118$i = 0, $j$0$i = 0, $j$0120$i = 0, $j$1103$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1107 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond239 = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4195 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$172$i = 0, $round$071$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$082$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$073$i = 0, $s9$0$i = 0, $s9$186$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa327 = 0, $storemerge = 0, $storemerge$13 = 0, $storemerge$8102 = 0, $storemerge$854 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0109 = 0, $ws$1120 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$096 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1149$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3136$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0;
 var $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 242;
   break;
  } else {
   $24 = $21;$26 = $22;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $28 = $26;$z$096 = $26;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$lcssa52 = $26;$z$0$lcssa = $26;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa52 = $28;$z$0$lcssa = $z$096;
      break L12;
     }
     $31 = ((($z$096)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$096 = $31;
      label = 9;
     } else {
      $$lcssa52 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $22;
  $37 = (($35) - ($36))|0;
  if ($0) {
   $38 = HEAP32[$f>>2]|0;
   $39 = $38 & 32;
   $40 = ($39|0)==(0);
   if ($40) {
    (___fwritex($22,$37,$f)|0);
   }
  }
  $41 = ($z$0$lcssa|0)==($22|0);
  if (!($41)) {
   $l10n$0$phi = $l10n$0;$22 = $$lcssa52;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $42 = ((($$lcssa52)) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $isdigittmp = (($44) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $45 = ((($$lcssa52)) + 2|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(36);
   $48 = ((($$lcssa52)) + 3|0);
   $$43 = $47 ? $48 : $42;
   $$l10n$0 = $47 ? 1 : $l10n$0;
   $isdigittmp$ = $47 ? $isdigittmp : -1;
   $$pre190 = HEAP8[$$43>>0]|0;
   $50 = $$pre190;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $50 = $43;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $42;
  }
  $49 = $50 << 24 >> 24;
  $51 = $49 & -32;
  $52 = ($51|0)==(32);
  L25: do {
   if ($52) {
    $54 = $49;$59 = $50;$fl$0103 = 0;$storemerge$8102 = $storemerge;
    while(1) {
     $53 = (($54) + -32)|0;
     $55 = 1 << $53;
     $56 = $55 & 75913;
     $57 = ($56|0)==(0);
     if ($57) {
      $68 = $59;$fl$056 = $fl$0103;$storemerge$854 = $storemerge$8102;
      break L25;
     }
     $58 = $59 << 24 >> 24;
     $60 = (($58) + -32)|0;
     $61 = 1 << $60;
     $62 = $61 | $fl$0103;
     $63 = ((($storemerge$8102)) + 1|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 << 24 >> 24;
     $66 = $65 & -32;
     $67 = ($66|0)==(32);
     if ($67) {
      $54 = $65;$59 = $64;$fl$0103 = $62;$storemerge$8102 = $63;
     } else {
      $68 = $64;$fl$056 = $62;$storemerge$854 = $63;
      break;
     }
    }
   } else {
    $68 = $50;$fl$056 = 0;$storemerge$854 = $storemerge;
   }
  } while(0);
  $69 = ($68<<24>>24)==(42);
  do {
   if ($69) {
    $70 = ((($storemerge$854)) + 1|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71 << 24 >> 24;
    $isdigittmp11 = (($72) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $73 = ((($storemerge$854)) + 2|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = ($74<<24>>24)==(36);
     if ($75) {
      $76 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$76>>2] = 10;
      $77 = HEAP8[$70>>0]|0;
      $78 = $77 << 24 >> 24;
      $79 = (($78) + -48)|0;
      $80 = (($nl_arg) + ($79<<3)|0);
      $81 = $80;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) + 4)|0;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($storemerge$854)) + 3|0);
      $l10n$2 = 1;$storemerge$13 = $87;$w$0 = $83;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $88 = ($l10n$1|0)==(0);
     if (!($88)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $108 = $70;$fl$1 = $fl$056;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $89 = $arglist_current;
     $90 = ((0) + 4|0);
     $expanded4 = $90;
     $expanded = (($expanded4) - 1)|0;
     $91 = (($89) + ($expanded))|0;
     $92 = ((0) + 4|0);
     $expanded8 = $92;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $93 = $91 & $expanded6;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge$13 = $70;$w$0 = $95;
    }
    $96 = ($w$0|0)<(0);
    if ($96) {
     $97 = $fl$056 | 8192;
     $98 = (0 - ($w$0))|0;
     $108 = $storemerge$13;$fl$1 = $97;$l10n$3 = $l10n$2;$w$1 = $98;
    } else {
     $108 = $storemerge$13;$fl$1 = $fl$056;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $99 = $68 << 24 >> 24;
    $isdigittmp$1$i = (($99) + -48)|0;
    $isdigit$2$i = ($isdigittmp$1$i>>>0)<(10);
    if ($isdigit$2$i) {
     $103 = $storemerge$854;$i$03$i = 0;$isdigittmp4$i = $isdigittmp$1$i;
     while(1) {
      $100 = ($i$03$i*10)|0;
      $101 = (($100) + ($isdigittmp4$i))|0;
      $102 = ((($103)) + 1|0);
      $104 = HEAP8[$102>>0]|0;
      $105 = $104 << 24 >> 24;
      $isdigittmp$i = (($105) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $103 = $102;$i$03$i = $101;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa321 = $101;$$lcssa322 = $102;
       break;
      }
     }
     $106 = ($$lcssa321|0)<(0);
     if ($106) {
      $$0 = -1;
      break L1;
     } else {
      $108 = $$lcssa322;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = $$lcssa321;
     }
    } else {
     $108 = $storemerge$854;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $107 = HEAP8[$108>>0]|0;
  $109 = ($107<<24>>24)==(46);
  L46: do {
   if ($109) {
    $110 = ((($108)) + 1|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = ($111<<24>>24)==(42);
    if (!($112)) {
     $139 = $111 << 24 >> 24;
     $isdigittmp$1$i$22 = (($139) + -48)|0;
     $isdigit$2$i$23 = ($isdigittmp$1$i$22>>>0)<(10);
     if ($isdigit$2$i$23) {
      $143 = $110;$i$03$i$25 = 0;$isdigittmp4$i$24 = $isdigittmp$1$i$22;
     } else {
      $802 = $110;$p$0 = 0;
      break;
     }
     while(1) {
      $140 = ($i$03$i$25*10)|0;
      $141 = (($140) + ($isdigittmp4$i$24))|0;
      $142 = ((($143)) + 1|0);
      $144 = HEAP8[$142>>0]|0;
      $145 = $144 << 24 >> 24;
      $isdigittmp$i$26 = (($145) + -48)|0;
      $isdigit$i$27 = ($isdigittmp$i$26>>>0)<(10);
      if ($isdigit$i$27) {
       $143 = $142;$i$03$i$25 = $141;$isdigittmp4$i$24 = $isdigittmp$i$26;
      } else {
       $802 = $142;$p$0 = $141;
       break L46;
      }
     }
    }
    $113 = ((($108)) + 2|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $isdigittmp9 = (($115) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $116 = ((($108)) + 3|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = ($117<<24>>24)==(36);
     if ($118) {
      $119 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$119>>2] = 10;
      $120 = HEAP8[$113>>0]|0;
      $121 = $120 << 24 >> 24;
      $122 = (($121) + -48)|0;
      $123 = (($nl_arg) + ($122<<3)|0);
      $124 = $123;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($124) + 4)|0;
      $128 = $127;
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($108)) + 4|0);
      $802 = $130;$p$0 = $126;
      break;
     }
    }
    $131 = ($l10n$3|0)==(0);
    if (!($131)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $132 = $arglist_current2;
     $133 = ((0) + 4|0);
     $expanded11 = $133;
     $expanded10 = (($expanded11) - 1)|0;
     $134 = (($132) + ($expanded10))|0;
     $135 = ((0) + 4|0);
     $expanded15 = $135;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $136 = $134 & $expanded13;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $arglist_next3 = ((($137)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $802 = $113;$p$0 = $138;
    } else {
     $802 = $113;$p$0 = 0;
    }
   } else {
    $802 = $108;$p$0 = -1;
   }
  } while(0);
  $147 = $802;$st$0 = 0;
  while(1) {
   $146 = HEAP8[$147>>0]|0;
   $148 = $146 << 24 >> 24;
   $149 = (($148) + -65)|0;
   $150 = ($149>>>0)>(57);
   if ($150) {
    $$0 = -1;
    break L1;
   }
   $151 = ((($147)) + 1|0);
   $152 = ((9681 + (($st$0*58)|0)|0) + ($149)|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (($154) + -1)|0;
   $156 = ($155>>>0)<(8);
   if ($156) {
    $147 = $151;$st$0 = $154;
   } else {
    $$lcssa326 = $147;$$lcssa328 = $151;$$lcssa329 = $153;$$lcssa330 = $154;$st$0$lcssa327 = $st$0;
    break;
   }
  }
  $157 = ($$lcssa329<<24>>24)==(0);
  if ($157) {
   $$0 = -1;
   break;
  }
  $158 = ($$lcssa329<<24>>24)==(19);
  $159 = ($argpos$0|0)>(-1);
  do {
   if ($158) {
    if ($159) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($159) {
     $160 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$160>>2] = $$lcssa330;
     $161 = (($nl_arg) + ($argpos$0<<3)|0);
     $162 = $161;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $165 = (($162) + 4)|0;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = $arg;
     $169 = $168;
     HEAP32[$169>>2] = $164;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $167;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_452($arg,$$lcssa330,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $172 = HEAP8[$$lcssa326>>0]|0;
  $173 = $172 << 24 >> 24;
  $174 = ($st$0$lcssa327|0)!=(0);
  $175 = $173 & 15;
  $176 = ($175|0)==(3);
  $or$cond15 = $174 & $176;
  $177 = $173 & -33;
  $t$0 = $or$cond15 ? $177 : $173;
  $178 = $fl$1 & 8192;
  $179 = ($178|0)==(0);
  $180 = $fl$1 & -65537;
  $fl$1$ = $179 ? $fl$1 : $180;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa327|0) {
    case 0:  {
     $187 = HEAP32[$arg>>2]|0;
     HEAP32[$187>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $188 = HEAP32[$arg>>2]|0;
     HEAP32[$188>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $189 = ($cnt$1|0)<(0);
     $190 = $189 << 31 >> 31;
     $191 = HEAP32[$arg>>2]|0;
     $192 = $191;
     $193 = $192;
     HEAP32[$193>>2] = $cnt$1;
     $194 = (($192) + 4)|0;
     $195 = $194;
     HEAP32[$195>>2] = $190;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $196 = $cnt$1&65535;
     $197 = HEAP32[$arg>>2]|0;
     HEAP16[$197>>1] = $196;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $198 = $cnt$1&255;
     $199 = HEAP32[$arg>>2]|0;
     HEAP8[$199>>0] = $198;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $200 = HEAP32[$arg>>2]|0;
     HEAP32[$200>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $201 = ($cnt$1|0)<(0);
     $202 = $201 << 31 >> 31;
     $203 = HEAP32[$arg>>2]|0;
     $204 = $203;
     $205 = $204;
     HEAP32[$205>>2] = $cnt$1;
     $206 = (($204) + 4)|0;
     $207 = $206;
     HEAP32[$207>>2] = $202;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $208 = ($p$0>>>0)>(8);
    $209 = $208 ? $p$0 : 8;
    $210 = $fl$1$ | 8;
    $fl$3 = $210;$p$1 = $209;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $248 = $arg;
    $249 = $248;
    $250 = HEAP32[$249>>2]|0;
    $251 = (($248) + 4)|0;
    $252 = $251;
    $253 = HEAP32[$252>>2]|0;
    $254 = ($250|0)==(0);
    $255 = ($253|0)==(0);
    $256 = $254 & $255;
    if ($256) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i$33 = $1;$258 = $250;$262 = $253;
     while(1) {
      $257 = $258 & 7;
      $259 = $257 | 48;
      $260 = $259&255;
      $261 = ((($$03$i$33)) + -1|0);
      HEAP8[$261>>0] = $260;
      $263 = (_bitshift64Lshr(($258|0),($262|0),3)|0);
      $264 = tempRet0;
      $265 = ($263|0)==(0);
      $266 = ($264|0)==(0);
      $267 = $265 & $266;
      if ($267) {
       $$0$lcssa$i = $261;
       break;
      } else {
       $$03$i$33 = $261;$258 = $263;$262 = $264;
      }
     }
    }
    $268 = $fl$1$ & 8;
    $269 = ($268|0)==(0);
    if ($269) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 10161;
     label = 77;
    } else {
     $270 = $$0$lcssa$i;
     $271 = (($2) - ($270))|0;
     $272 = (($271) + 1)|0;
     $273 = ($p$0|0)<($272|0);
     $$p$0 = $273 ? $272 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 10161;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $274 = $arg;
    $275 = $274;
    $276 = HEAP32[$275>>2]|0;
    $277 = (($274) + 4)|0;
    $278 = $277;
    $279 = HEAP32[$278>>2]|0;
    $280 = ($279|0)<(0);
    if ($280) {
     $281 = (_i64Subtract(0,0,($276|0),($279|0))|0);
     $282 = tempRet0;
     $283 = $arg;
     $284 = $283;
     HEAP32[$284>>2] = $281;
     $285 = (($283) + 4)|0;
     $286 = $285;
     HEAP32[$286>>2] = $282;
     $291 = $281;$292 = $282;$pl$0 = 1;$prefix$0 = 10161;
     label = 76;
     break L75;
    }
    $287 = $fl$1$ & 2048;
    $288 = ($287|0)==(0);
    if ($288) {
     $289 = $fl$1$ & 1;
     $290 = ($289|0)==(0);
     $$ = $290 ? 10161 : (10163);
     $291 = $276;$292 = $279;$pl$0 = $289;$prefix$0 = $$;
     label = 76;
    } else {
     $291 = $276;$292 = $279;$pl$0 = 1;$prefix$0 = (10162);
     label = 76;
    }
    break;
   }
   case 117:  {
    $181 = $arg;
    $182 = $181;
    $183 = HEAP32[$182>>2]|0;
    $184 = (($181) + 4)|0;
    $185 = $184;
    $186 = HEAP32[$185>>2]|0;
    $291 = $183;$292 = $186;$pl$0 = 0;$prefix$0 = 10161;
    label = 76;
    break;
   }
   case 99:  {
    $312 = $arg;
    $313 = $312;
    $314 = HEAP32[$313>>2]|0;
    $315 = (($312) + 4)|0;
    $316 = $315;
    $317 = HEAP32[$316>>2]|0;
    $318 = $314&255;
    HEAP8[$3>>0] = $318;
    $a$2 = $3;$fl$6 = $180;$p$5 = 1;$pl$2 = 0;$prefix$2 = 10161;$z$2 = $1;
    break;
   }
   case 109:  {
    $319 = (___errno_location()|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = (_strerror($320)|0);
    $a$1 = $321;
    label = 82;
    break;
   }
   case 115:  {
    $322 = HEAP32[$arg>>2]|0;
    $323 = ($322|0)!=(0|0);
    $324 = $323 ? $322 : 10171;
    $a$1 = $324;
    label = 82;
    break;
   }
   case 67:  {
    $331 = $arg;
    $332 = $331;
    $333 = HEAP32[$332>>2]|0;
    $334 = (($331) + 4)|0;
    $335 = $334;
    $336 = HEAP32[$335>>2]|0;
    HEAP32[$wc>>2] = $333;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4195 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $337 = ($p$0|0)==(0);
    if ($337) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $p$4195 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $364 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $364;$365 = HEAP32[tempDoublePtr>>2]|0;
    $366 = HEAP32[tempDoublePtr+4>>2]|0;
    $367 = ($366|0)<(0);
    if ($367) {
     $368 = -$364;
     $$07$i = $368;$pl$0$i = 1;$prefix$0$i = 10178;
    } else {
     $369 = $fl$1$ & 2048;
     $370 = ($369|0)==(0);
     if ($370) {
      $371 = $fl$1$ & 1;
      $372 = ($371|0)==(0);
      $$$i = $372 ? (10179) : (10184);
      $$07$i = $364;$pl$0$i = $371;$prefix$0$i = $$$i;
     } else {
      $$07$i = $364;$pl$0$i = 1;$prefix$0$i = (10181);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$373 = HEAP32[tempDoublePtr>>2]|0;
    $374 = HEAP32[tempDoublePtr+4>>2]|0;
    $375 = $374 & 2146435072;
    $376 = ($375>>>0)<(2146435072);
    $377 = (0)<(0);
    $378 = ($375|0)==(2146435072);
    $379 = $378 & $377;
    $380 = $376 | $379;
    do {
     if ($380) {
      $396 = (+_frexpl($$07$i,$e2$i));
      $397 = $396 * 2.0;
      $398 = $397 != 0.0;
      if ($398) {
       $399 = HEAP32[$e2$i>>2]|0;
       $400 = (($399) + -1)|0;
       HEAP32[$e2$i>>2] = $400;
      }
      $401 = $t$0 | 32;
      $402 = ($401|0)==(97);
      if ($402) {
       $403 = $t$0 & 32;
       $404 = ($403|0)==(0);
       $405 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $404 ? $prefix$0$i : $405;
       $406 = $pl$0$i | 2;
       $407 = ($p$0>>>0)>(11);
       $408 = (12 - ($p$0))|0;
       $409 = ($408|0)==(0);
       $410 = $407 | $409;
       do {
        if ($410) {
         $$1$i = $397;
        } else {
         $re$172$i = $408;$round$071$i = 8.0;
         while(1) {
          $411 = (($re$172$i) + -1)|0;
          $412 = $round$071$i * 16.0;
          $413 = ($411|0)==(0);
          if ($413) {
           $$lcssa347 = $412;
           break;
          } else {
           $re$172$i = $411;$round$071$i = $412;
          }
         }
         $414 = HEAP8[$prefix$0$$i>>0]|0;
         $415 = ($414<<24>>24)==(45);
         if ($415) {
          $416 = -$397;
          $417 = $416 - $$lcssa347;
          $418 = $$lcssa347 + $417;
          $419 = -$418;
          $$1$i = $419;
          break;
         } else {
          $420 = $397 + $$lcssa347;
          $421 = $420 - $$lcssa347;
          $$1$i = $421;
          break;
         }
        }
       } while(0);
       $422 = HEAP32[$e2$i>>2]|0;
       $423 = ($422|0)<(0);
       $424 = (0 - ($422))|0;
       $425 = $423 ? $424 : $422;
       $426 = ($425|0)<(0);
       $427 = $426 << 31 >> 31;
       $428 = (_fmt_u($425,$427,$5)|0);
       $429 = ($428|0)==($5|0);
       if ($429) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $428;
       }
       $430 = $422 >> 31;
       $431 = $430 & 2;
       $432 = (($431) + 43)|0;
       $433 = $432&255;
       $434 = ((($estr$0$i)) + -1|0);
       HEAP8[$434>>0] = $433;
       $435 = (($t$0) + 15)|0;
       $436 = $435&255;
       $437 = ((($estr$0$i)) + -2|0);
       HEAP8[$437>>0] = $436;
       $notrhs$i = ($p$0|0)<(1);
       $438 = $fl$1$ & 8;
       $439 = ($438|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $440 = (~~(($$2$i)));
        $441 = (10145 + ($440)|0);
        $442 = HEAP8[$441>>0]|0;
        $443 = $442&255;
        $444 = $443 | $403;
        $445 = $444&255;
        $446 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $445;
        $447 = (+($440|0));
        $448 = $$2$i - $447;
        $449 = $448 * 16.0;
        $450 = $446;
        $451 = (($450) - ($7))|0;
        $452 = ($451|0)==(1);
        do {
         if ($452) {
          $notlhs$i = $449 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $439 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $446;
           break;
          }
          $453 = ((($s$0$i)) + 2|0);
          HEAP8[$446>>0] = 46;
          $s$1$i = $453;
         } else {
          $s$1$i = $446;
         }
        } while(0);
        $454 = $449 != 0.0;
        if ($454) {
         $$2$i = $449;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $455 = ($p$0|0)!=(0);
       $$pre185$i = $s$1$i$lcssa;
       $456 = (($10) + ($$pre185$i))|0;
       $457 = ($456|0)<($p$0|0);
       $or$cond239 = $455 & $457;
       $458 = $437;
       $459 = (($11) + ($p$0))|0;
       $460 = (($459) - ($458))|0;
       $461 = $437;
       $462 = (($9) - ($461))|0;
       $463 = (($462) + ($$pre185$i))|0;
       $l$0$i = $or$cond239 ? $460 : $463;
       $464 = (($l$0$i) + ($406))|0;
       _pad($f,32,$w$1,$464,$fl$1$);
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($prefix$0$$i,$406,$f)|0);
       }
       $468 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$464,$468);
       $469 = (($$pre185$i) - ($7))|0;
       $470 = HEAP32[$f>>2]|0;
       $471 = $470 & 32;
       $472 = ($471|0)==(0);
       if ($472) {
        (___fwritex($buf$i,$469,$f)|0);
       }
       $473 = $437;
       $474 = (($8) - ($473))|0;
       $sum = (($469) + ($474))|0;
       $475 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$475,0,0);
       $476 = HEAP32[$f>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($437,$474,$f)|0);
       }
       $479 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$464,$479);
       $480 = ($464|0)<($w$1|0);
       $w$$i = $480 ? $w$1 : $464;
       $$0$i = $w$$i;
       break;
      }
      $481 = ($p$0|0)<(0);
      $$p$i = $481 ? 6 : $p$0;
      if ($398) {
       $482 = $397 * 268435456.0;
       $483 = HEAP32[$e2$i>>2]|0;
       $484 = (($483) + -28)|0;
       HEAP32[$e2$i>>2] = $484;
       $$3$i = $482;$485 = $484;
      } else {
       $$pre182$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $397;$485 = $$pre182$i;
      }
      $486 = ($485|0)<(0);
      $$33$i = $486 ? $big$i : $12;
      $487 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $488 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $488;
       $489 = ((($z$0$i)) + 4|0);
       $490 = (+($488>>>0));
       $491 = $$4$i - $490;
       $492 = $491 * 1.0E+9;
       $493 = $492 != 0.0;
       if ($493) {
        $$4$i = $492;$z$0$i = $489;
       } else {
        $$lcssa331 = $489;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $494 = ($$pr$i|0)>(0);
      if ($494) {
       $495 = $$pr$i;$a$1150$i = $$33$i;$z$1149$i = $$lcssa331;
       while(1) {
        $496 = ($495|0)>(29);
        $497 = $496 ? 29 : $495;
        $d$0$142$i = ((($z$1149$i)) + -4|0);
        $498 = ($d$0$142$i>>>0)<($a$1150$i>>>0);
        do {
         if ($498) {
          $a$2$ph$i = $a$1150$i;
         } else {
          $carry$0143$i = 0;$d$0144$i = $d$0$142$i;
          while(1) {
           $499 = HEAP32[$d$0144$i>>2]|0;
           $500 = (_bitshift64Shl(($499|0),0,($497|0))|0);
           $501 = tempRet0;
           $502 = (_i64Add(($500|0),($501|0),($carry$0143$i|0),0)|0);
           $503 = tempRet0;
           $504 = (___uremdi3(($502|0),($503|0),1000000000,0)|0);
           $505 = tempRet0;
           HEAP32[$d$0144$i>>2] = $504;
           $506 = (___udivdi3(($502|0),($503|0),1000000000,0)|0);
           $507 = tempRet0;
           $d$0$i = ((($d$0144$i)) + -4|0);
           $508 = ($d$0$i>>>0)<($a$1150$i>>>0);
           if ($508) {
            $$lcssa332 = $506;
            break;
           } else {
            $carry$0143$i = $506;$d$0144$i = $d$0$i;
           }
          }
          $509 = ($$lcssa332|0)==(0);
          if ($509) {
           $a$2$ph$i = $a$1150$i;
           break;
          }
          $510 = ((($a$1150$i)) + -4|0);
          HEAP32[$510>>2] = $$lcssa332;
          $a$2$ph$i = $510;
         }
        } while(0);
        $z$2$i = $z$1149$i;
        while(1) {
         $511 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($511)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $512 = ((($z$2$i)) + -4|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($513|0)==(0);
         if ($514) {
          $z$2$i = $512;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $515 = HEAP32[$e2$i>>2]|0;
        $516 = (($515) - ($497))|0;
        HEAP32[$e2$i>>2] = $516;
        $517 = ($516|0)>(0);
        if ($517) {
         $495 = $516;$a$1150$i = $a$2$ph$i;$z$1149$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $516;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa331;
      }
      $518 = ($$pr50$i|0)<(0);
      if ($518) {
       $519 = (($$p$i) + 25)|0;
       $520 = (($519|0) / 9)&-1;
       $521 = (($520) + 1)|0;
       $522 = ($401|0)==(102);
       $524 = $$pr50$i;$a$3137$i = $a$1$lcssa$i;$z$3136$i = $z$1$lcssa$i;
       while(1) {
        $523 = (0 - ($524))|0;
        $525 = ($523|0)>(9);
        $526 = $525 ? 9 : $523;
        $527 = ($a$3137$i>>>0)<($z$3136$i>>>0);
        do {
         if ($527) {
          $531 = 1 << $526;
          $532 = (($531) + -1)|0;
          $533 = 1000000000 >>> $526;
          $carry3$0131$i = 0;$d$1130$i = $a$3137$i;
          while(1) {
           $534 = HEAP32[$d$1130$i>>2]|0;
           $535 = $534 & $532;
           $536 = $534 >>> $526;
           $537 = (($536) + ($carry3$0131$i))|0;
           HEAP32[$d$1130$i>>2] = $537;
           $538 = Math_imul($535, $533)|0;
           $539 = ((($d$1130$i)) + 4|0);
           $540 = ($539>>>0)<($z$3136$i>>>0);
           if ($540) {
            $carry3$0131$i = $538;$d$1130$i = $539;
           } else {
            $$lcssa334 = $538;
            break;
           }
          }
          $541 = HEAP32[$a$3137$i>>2]|0;
          $542 = ($541|0)==(0);
          $543 = ((($a$3137$i)) + 4|0);
          $$a$3$i = $542 ? $543 : $a$3137$i;
          $544 = ($$lcssa334|0)==(0);
          if ($544) {
           $$a$3189$i = $$a$3$i;$z$4$i = $z$3136$i;
           break;
          }
          $545 = ((($z$3136$i)) + 4|0);
          HEAP32[$z$3136$i>>2] = $$lcssa334;
          $$a$3189$i = $$a$3$i;$z$4$i = $545;
         } else {
          $528 = HEAP32[$a$3137$i>>2]|0;
          $529 = ($528|0)==(0);
          $530 = ((($a$3137$i)) + 4|0);
          $$a$3$188$i = $529 ? $530 : $a$3137$i;
          $$a$3189$i = $$a$3$188$i;$z$4$i = $z$3136$i;
         }
        } while(0);
        $546 = $522 ? $$33$i : $$a$3189$i;
        $547 = $z$4$i;
        $548 = $546;
        $549 = (($547) - ($548))|0;
        $550 = $549 >> 2;
        $551 = ($550|0)>($521|0);
        $552 = (($546) + ($521<<2)|0);
        $$z$4$i = $551 ? $552 : $z$4$i;
        $553 = HEAP32[$e2$i>>2]|0;
        $554 = (($553) + ($526))|0;
        HEAP32[$e2$i>>2] = $554;
        $555 = ($554|0)<(0);
        if ($555) {
         $524 = $554;$a$3137$i = $$a$3189$i;$z$3136$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3189$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $556 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($556) {
        $557 = $a$3$lcssa$i;
        $558 = (($487) - ($557))|0;
        $559 = $558 >> 2;
        $560 = ($559*9)|0;
        $561 = HEAP32[$a$3$lcssa$i>>2]|0;
        $562 = ($561>>>0)<(10);
        if ($562) {
         $e$1$i = $560;
         break;
        } else {
         $e$0126$i = $560;$i$0125$i = 10;
        }
        while(1) {
         $563 = ($i$0125$i*10)|0;
         $564 = (($e$0126$i) + 1)|0;
         $565 = ($561>>>0)<($563>>>0);
         if ($565) {
          $e$1$i = $564;
          break;
         } else {
          $e$0126$i = $564;$i$0125$i = $563;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $566 = ($401|0)!=(102);
      $567 = $566 ? $e$1$i : 0;
      $568 = (($$p$i) - ($567))|0;
      $569 = ($401|0)==(103);
      $570 = ($$p$i|0)!=(0);
      $571 = $570 & $569;
      $$neg55$i = $571 << 31 >> 31;
      $572 = (($568) + ($$neg55$i))|0;
      $573 = $z$3$lcssa$i;
      $574 = (($573) - ($487))|0;
      $575 = $574 >> 2;
      $576 = ($575*9)|0;
      $577 = (($576) + -9)|0;
      $578 = ($572|0)<($577|0);
      if ($578) {
       $579 = ((($$33$i)) + 4|0);
       $580 = (($572) + 9216)|0;
       $581 = (($580|0) / 9)&-1;
       $582 = (($581) + -1024)|0;
       $583 = (($579) + ($582<<2)|0);
       $584 = (($580|0) % 9)&-1;
       $j$0$118$i = (($584) + 1)|0;
       $585 = ($j$0$118$i|0)<(9);
       if ($585) {
        $i$1119$i = 10;$j$0120$i = $j$0$118$i;
        while(1) {
         $586 = ($i$1119$i*10)|0;
         $j$0$i = (($j$0120$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $586;
          break;
         } else {
          $i$1119$i = $586;$j$0120$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $587 = HEAP32[$583>>2]|0;
       $588 = (($587>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $589 = ($588|0)==(0);
       $590 = ((($583)) + 4|0);
       $591 = ($590|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $591 & $589;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $583;$e$4$i = $e$1$i;
        } else {
         $592 = (($587>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $593 = $592 & 1;
         $594 = ($593|0)==(0);
         $$20$i = $594 ? 9007199254740992.0 : 9007199254740994.0;
         $595 = (($i$1$lcssa$i|0) / 2)&-1;
         $596 = ($588>>>0)<($595>>>0);
         if ($596) {
          $small$0$i = 0.5;
         } else {
          $597 = ($588|0)==($595|0);
          $or$cond22$i = $591 & $597;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $598 = ($pl$0$i|0)==(0);
         do {
          if ($598) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $599 = HEAP8[$prefix$0$i>>0]|0;
           $600 = ($599<<24>>24)==(45);
           if (!($600)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $601 = -$$20$i;
           $602 = -$small$0$i;
           $round6$1$i = $601;$small$1$i = $602;
          }
         } while(0);
         $603 = (($587) - ($588))|0;
         HEAP32[$583>>2] = $603;
         $604 = $round6$1$i + $small$1$i;
         $605 = $604 != $round6$1$i;
         if (!($605)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $583;$e$4$i = $e$1$i;
          break;
         }
         $606 = (($603) + ($i$1$lcssa$i))|0;
         HEAP32[$583>>2] = $606;
         $607 = ($606>>>0)>(999999999);
         if ($607) {
          $a$5112$i = $a$3$lcssa$i;$d$2111$i = $583;
          while(1) {
           $608 = ((($d$2111$i)) + -4|0);
           HEAP32[$d$2111$i>>2] = 0;
           $609 = ($608>>>0)<($a$5112$i>>>0);
           if ($609) {
            $610 = ((($a$5112$i)) + -4|0);
            HEAP32[$610>>2] = 0;
            $a$6$i = $610;
           } else {
            $a$6$i = $a$5112$i;
           }
           $611 = HEAP32[$608>>2]|0;
           $612 = (($611) + 1)|0;
           HEAP32[$608>>2] = $612;
           $613 = ($612>>>0)>(999999999);
           if ($613) {
            $a$5112$i = $a$6$i;$d$2111$i = $608;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $608;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $583;
         }
         $614 = $a$5$lcssa$i;
         $615 = (($487) - ($614))|0;
         $616 = $615 >> 2;
         $617 = ($616*9)|0;
         $618 = HEAP32[$a$5$lcssa$i>>2]|0;
         $619 = ($618>>>0)<(10);
         if ($619) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $617;
          break;
         } else {
          $e$2107$i = $617;$i$2106$i = 10;
         }
         while(1) {
          $620 = ($i$2106$i*10)|0;
          $621 = (($e$2107$i) + 1)|0;
          $622 = ($618>>>0)<($620>>>0);
          if ($622) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $621;
           break;
          } else {
           $e$2107$i = $621;$i$2106$i = $620;
          }
         }
        }
       } while(0);
       $623 = ((($d$4$i)) + 4|0);
       $624 = ($z$3$lcssa$i>>>0)>($623>>>0);
       $$z$3$i = $624 ? $623 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $625 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $626 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($626)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $627 = ((($z$7$i)) + -4|0);
       $628 = HEAP32[$627>>2]|0;
       $629 = ($628|0)==(0);
       if ($629) {
        $z$7$i = $627;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($569) {
        $630 = $570&1;
        $631 = $630 ^ 1;
        $$p$$i = (($631) + ($$p$i))|0;
        $632 = ($$p$$i|0)>($e$5$ph$i|0);
        $633 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $632 & $633;
        if ($or$cond6$i) {
         $634 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $635 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $634;$$210$i = $635;
        } else {
         $636 = (($t$0) + -2)|0;
         $637 = (($$p$$i) + -1)|0;
         $$013$i = $636;$$210$i = $637;
        }
        $638 = $fl$1$ & 8;
        $639 = ($638|0)==(0);
        if (!($639)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi187$iZ2D = $638;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $640 = ((($z$7$i$lcssa)) + -4|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = ($641|0)==(0);
          if ($642) {
           $j$2$i = 9;
           break;
          }
          $643 = (($641>>>0) % 10)&-1;
          $644 = ($643|0)==(0);
          if ($644) {
           $i$3102$i = 10;$j$1103$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $645 = ($i$3102$i*10)|0;
           $646 = (($j$1103$i) + 1)|0;
           $647 = (($641>>>0) % ($645>>>0))&-1;
           $648 = ($647|0)==(0);
           if ($648) {
            $i$3102$i = $645;$j$1103$i = $646;
           } else {
            $j$2$i = $646;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $649 = $$013$i | 32;
        $650 = ($649|0)==(102);
        $651 = $z$7$i$lcssa;
        $652 = (($651) - ($487))|0;
        $653 = $652 >> 2;
        $654 = ($653*9)|0;
        $655 = (($654) + -9)|0;
        if ($650) {
         $656 = (($655) - ($j$2$i))|0;
         $657 = ($656|0)<(0);
         $$23$i = $657 ? 0 : $656;
         $658 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $658 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi187$iZ2D = 0;
         break;
        } else {
         $659 = (($655) + ($e$5$ph$i))|0;
         $660 = (($659) - ($j$2$i))|0;
         $661 = ($660|0)<(0);
         $$25$i = $661 ? 0 : $660;
         $662 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $662 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi187$iZ2D = 0;
         break;
        }
       } else {
        $$pre186$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi187$iZ2D = $$pre186$i;
       }
      } while(0);
      $663 = $$311$i | $$pre$phi187$iZ2D;
      $664 = ($663|0)!=(0);
      $665 = $664&1;
      $666 = $$114$i | 32;
      $667 = ($666|0)==(102);
      if ($667) {
       $668 = ($e$5$ph$i|0)>(0);
       $669 = $668 ? $e$5$ph$i : 0;
       $$pn$i = $669;$estr$2$i = 0;
      } else {
       $670 = ($e$5$ph$i|0)<(0);
       $671 = $670 ? $625 : $e$5$ph$i;
       $672 = ($671|0)<(0);
       $673 = $672 << 31 >> 31;
       $674 = (_fmt_u($671,$673,$5)|0);
       $675 = $674;
       $676 = (($8) - ($675))|0;
       $677 = ($676|0)<(2);
       if ($677) {
        $estr$196$i = $674;
        while(1) {
         $678 = ((($estr$196$i)) + -1|0);
         HEAP8[$678>>0] = 48;
         $679 = $678;
         $680 = (($8) - ($679))|0;
         $681 = ($680|0)<(2);
         if ($681) {
          $estr$196$i = $678;
         } else {
          $estr$1$lcssa$i = $678;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $674;
       }
       $682 = $e$5$ph$i >> 31;
       $683 = $682 & 2;
       $684 = (($683) + 43)|0;
       $685 = $684&255;
       $686 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$686>>0] = $685;
       $687 = $$114$i&255;
       $688 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$688>>0] = $687;
       $689 = $688;
       $690 = (($8) - ($689))|0;
       $$pn$i = $690;$estr$2$i = $688;
      }
      $691 = (($pl$0$i) + 1)|0;
      $692 = (($691) + ($$311$i))|0;
      $l$1$i = (($692) + ($665))|0;
      $693 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$693,$fl$1$);
      $694 = HEAP32[$f>>2]|0;
      $695 = $694 & 32;
      $696 = ($695|0)==(0);
      if ($696) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $697 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$693,$697);
      do {
       if ($667) {
        $698 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $698 ? $$33$i : $a$9$ph$i;
        $d$585$i = $r$0$a$9$i;
        while(1) {
         $699 = HEAP32[$d$585$i>>2]|0;
         $700 = (_fmt_u($699,0,$13)|0);
         $701 = ($d$585$i|0)==($r$0$a$9$i|0);
         do {
          if ($701) {
           $705 = ($700|0)==($13|0);
           if (!($705)) {
            $s7$1$i = $700;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $702 = ($700>>>0)>($buf$i>>>0);
           if ($702) {
            $s7$082$i = $700;
           } else {
            $s7$1$i = $700;
            break;
           }
           while(1) {
            $703 = ((($s7$082$i)) + -1|0);
            HEAP8[$703>>0] = 48;
            $704 = ($703>>>0)>($buf$i>>>0);
            if ($704) {
             $s7$082$i = $703;
            } else {
             $s7$1$i = $703;
             break;
            }
           }
          }
         } while(0);
         $706 = HEAP32[$f>>2]|0;
         $707 = $706 & 32;
         $708 = ($707|0)==(0);
         if ($708) {
          $709 = $s7$1$i;
          $710 = (($14) - ($709))|0;
          (___fwritex($s7$1$i,$710,$f)|0);
         }
         $711 = ((($d$585$i)) + 4|0);
         $712 = ($711>>>0)>($$33$i>>>0);
         if ($712) {
          $$lcssa344 = $711;
          break;
         } else {
          $d$585$i = $711;
         }
        }
        $713 = ($663|0)==(0);
        do {
         if (!($713)) {
          $714 = HEAP32[$f>>2]|0;
          $715 = $714 & 32;
          $716 = ($715|0)==(0);
          if (!($716)) {
           break;
          }
          (___fwritex(10213,1,$f)|0);
         }
        } while(0);
        $717 = ($$lcssa344>>>0)<($z$7$i$lcssa>>>0);
        $718 = ($$311$i|0)>(0);
        $719 = $718 & $717;
        if ($719) {
         $$41279$i = $$311$i;$d$678$i = $$lcssa344;
         while(1) {
          $720 = HEAP32[$d$678$i>>2]|0;
          $721 = (_fmt_u($720,0,$13)|0);
          $722 = ($721>>>0)>($buf$i>>>0);
          if ($722) {
           $s8$073$i = $721;
           while(1) {
            $723 = ((($s8$073$i)) + -1|0);
            HEAP8[$723>>0] = 48;
            $724 = ($723>>>0)>($buf$i>>>0);
            if ($724) {
             $s8$073$i = $723;
            } else {
             $s8$0$lcssa$i = $723;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $721;
          }
          $725 = HEAP32[$f>>2]|0;
          $726 = $725 & 32;
          $727 = ($726|0)==(0);
          if ($727) {
           $728 = ($$41279$i|0)>(9);
           $729 = $728 ? 9 : $$41279$i;
           (___fwritex($s8$0$lcssa$i,$729,$f)|0);
          }
          $730 = ((($d$678$i)) + 4|0);
          $731 = (($$41279$i) + -9)|0;
          $732 = ($730>>>0)<($z$7$i$lcssa>>>0);
          $733 = ($$41279$i|0)>(9);
          $734 = $733 & $732;
          if ($734) {
           $$41279$i = $731;$d$678$i = $730;
          } else {
           $$412$lcssa$i = $731;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $735 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$735,9,0);
       } else {
        $736 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $736;
        $737 = ($$311$i|0)>(-1);
        if ($737) {
         $738 = ($$pre$phi187$iZ2D|0)==(0);
         $$590$i = $$311$i;$d$789$i = $a$9$ph$i;
         while(1) {
          $739 = HEAP32[$d$789$i>>2]|0;
          $740 = (_fmt_u($739,0,$13)|0);
          $741 = ($740|0)==($13|0);
          if ($741) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $740;
          }
          $742 = ($d$789$i|0)==($a$9$ph$i|0);
          do {
           if ($742) {
            $746 = ((($s9$0$i)) + 1|0);
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if ($749) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $750 = ($$590$i|0)<(1);
            $or$cond31$i = $738 & $750;
            if ($or$cond31$i) {
             $s9$2$i = $746;
             break;
            }
            $751 = HEAP32[$f>>2]|0;
            $752 = $751 & 32;
            $753 = ($752|0)==(0);
            if (!($753)) {
             $s9$2$i = $746;
             break;
            }
            (___fwritex(10213,1,$f)|0);
            $s9$2$i = $746;
           } else {
            $743 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($743) {
             $s9$186$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $744 = ((($s9$186$i)) + -1|0);
             HEAP8[$744>>0] = 48;
             $745 = ($744>>>0)>($buf$i>>>0);
             if ($745) {
              $s9$186$i = $744;
             } else {
              $s9$2$i = $744;
              break;
             }
            }
           }
          } while(0);
          $754 = $s9$2$i;
          $755 = (($14) - ($754))|0;
          $756 = HEAP32[$f>>2]|0;
          $757 = $756 & 32;
          $758 = ($757|0)==(0);
          if ($758) {
           $759 = ($$590$i|0)>($755|0);
           $760 = $759 ? $755 : $$590$i;
           (___fwritex($s9$2$i,$760,$f)|0);
          }
          $761 = (($$590$i) - ($755))|0;
          $762 = ((($d$789$i)) + 4|0);
          $763 = ($762>>>0)<($z$7$$i>>>0);
          $764 = ($761|0)>(-1);
          $765 = $763 & $764;
          if ($765) {
           $$590$i = $761;$d$789$i = $762;
          } else {
           $$5$lcssa$i = $761;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $766 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$766,18,0);
        $767 = HEAP32[$f>>2]|0;
        $768 = $767 & 32;
        $769 = ($768|0)==(0);
        if (!($769)) {
         break;
        }
        $770 = $estr$2$i;
        $771 = (($8) - ($770))|0;
        (___fwritex($estr$2$i,$771,$f)|0);
       }
      } while(0);
      $772 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$693,$772);
      $773 = ($693|0)<($w$1|0);
      $w$32$i = $773 ? $w$1 : $693;
      $$0$i = $w$32$i;
     } else {
      $381 = $t$0 & 32;
      $382 = ($381|0)!=(0);
      $383 = $382 ? 10197 : 10201;
      $384 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $385 = $382 ? 10205 : 10209;
      $pl$1$i = $384 ? 0 : $pl$0$i;
      $s1$0$i = $384 ? $385 : $383;
      $386 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$386,$180);
      $387 = HEAP32[$f>>2]|0;
      $388 = $387 & 32;
      $389 = ($388|0)==(0);
      if ($389) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $391 = $$pre$i;
      } else {
       $391 = $387;
      }
      $390 = $391 & 32;
      $392 = ($390|0)==(0);
      if ($392) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $393 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$386,$393);
      $394 = ($386|0)<($w$1|0);
      $395 = $394 ? $w$1 : $386;
      $$0$i = $395;
     }
    } while(0);
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 10161;$z$2 = $1;
   }
   }
  } while(0);
  L308: do {
   if ((label|0) == 64) {
    label = 0;
    $211 = $arg;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    $217 = $t$1 & 32;
    $218 = ($213|0)==(0);
    $219 = ($216|0)==(0);
    $220 = $218 & $219;
    if ($220) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10161;
     label = 77;
    } else {
     $$012$i = $1;$222 = $213;$229 = $216;
     while(1) {
      $221 = $222 & 15;
      $223 = (10145 + ($221)|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = $224&255;
      $226 = $225 | $217;
      $227 = $226&255;
      $228 = ((($$012$i)) + -1|0);
      HEAP8[$228>>0] = $227;
      $230 = (_bitshift64Lshr(($222|0),($229|0),4)|0);
      $231 = tempRet0;
      $232 = ($230|0)==(0);
      $233 = ($231|0)==(0);
      $234 = $232 & $233;
      if ($234) {
       $$lcssa349 = $228;
       break;
      } else {
       $$012$i = $228;$222 = $230;$229 = $231;
      }
     }
     $235 = $arg;
     $236 = $235;
     $237 = HEAP32[$236>>2]|0;
     $238 = (($235) + 4)|0;
     $239 = $238;
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)==(0);
     $242 = ($240|0)==(0);
     $243 = $241 & $242;
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     $or$cond17 = $245 | $243;
     if ($or$cond17) {
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10161;
      label = 77;
     } else {
      $246 = $t$1 >> 4;
      $247 = (10161 + ($246)|0);
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $293 = (_fmt_u($291,$292,$1)|0);
    $a$0 = $293;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    $327 = $325;
    $328 = $a$1;
    $329 = (($327) - ($328))|0;
    $330 = (($a$1) + ($p$0)|0);
    $z$1 = $326 ? $330 : $325;
    $p$3 = $326 ? $p$0 : $329;
    $a$2 = $a$1;$fl$6 = $180;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 10161;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $338 = HEAP32[$arg>>2]|0;
    $i$0108 = 0;$l$1107 = 0;$ws$0109 = $338;
    while(1) {
     $339 = HEAP32[$ws$0109>>2]|0;
     $340 = ($339|0)==(0);
     if ($340) {
      $i$0$lcssa = $i$0108;$l$2 = $l$1107;
      break;
     }
     $341 = (_wctomb($mb,$339)|0);
     $342 = ($341|0)<(0);
     $343 = (($p$4195) - ($i$0108))|0;
     $344 = ($341>>>0)>($343>>>0);
     $or$cond20 = $342 | $344;
     if ($or$cond20) {
      $i$0$lcssa = $i$0108;$l$2 = $341;
      break;
     }
     $345 = ((($ws$0109)) + 4|0);
     $346 = (($341) + ($i$0108))|0;
     $347 = ($p$4195>>>0)>($346>>>0);
     if ($347) {
      $i$0108 = $346;$l$1107 = $341;$ws$0109 = $345;
     } else {
      $i$0$lcssa = $346;$l$2 = $341;
      break;
     }
    }
    $348 = ($l$2|0)<(0);
    if ($348) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $349 = ($i$0$lcssa|0)==(0);
    if ($349) {
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $350 = HEAP32[$arg>>2]|0;
     $i$1119 = 0;$ws$1120 = $350;
     while(1) {
      $351 = HEAP32[$ws$1120>>2]|0;
      $352 = ($351|0)==(0);
      if ($352) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L308;
      }
      $353 = ((($ws$1120)) + 4|0);
      $354 = (_wctomb($mb,$351)|0);
      $355 = (($354) + ($i$1119))|0;
      $356 = ($355|0)>($i$0$lcssa|0);
      if ($356) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L308;
      }
      $357 = HEAP32[$f>>2]|0;
      $358 = $357 & 32;
      $359 = ($358|0)==(0);
      if ($359) {
       (___fwritex($mb,$354,$f)|0);
      }
      $360 = ($355>>>0)<($i$0$lcssa>>>0);
      if ($360) {
       $i$1119 = $355;$ws$1120 = $353;
      } else {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $361 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa197,$361);
   $362 = ($w$1|0)>($i$0$lcssa197|0);
   $363 = $362 ? $w$1 : $i$0$lcssa197;
   $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $363;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $294 = ($p$2|0)>(-1);
   $295 = $fl$4 & -65537;
   $$fl$4 = $294 ? $295 : $fl$4;
   $296 = $arg;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (($296) + 4)|0;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = ($298|0)!=(0);
   $303 = ($301|0)!=(0);
   $304 = $302 | $303;
   $305 = ($p$2|0)!=(0);
   $or$cond = $305 | $304;
   if ($or$cond) {
    $306 = $a$0;
    $307 = (($2) - ($306))|0;
    $308 = $304&1;
    $309 = $308 ^ 1;
    $310 = (($309) + ($307))|0;
    $311 = ($p$2|0)>($310|0);
    $p$2$ = $311 ? $p$2 : $310;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $774 = $z$2;
  $775 = $a$2;
  $776 = (($774) - ($775))|0;
  $777 = ($p$5|0)<($776|0);
  $$p$5 = $777 ? $776 : $p$5;
  $778 = (($pl$2) + ($$p$5))|0;
  $779 = ($w$1|0)<($778|0);
  $w$2 = $779 ? $778 : $w$1;
  _pad($f,32,$w$2,$778,$fl$6);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $783 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$778,$783);
  _pad($f,48,$$p$5,$776,0);
  $784 = HEAP32[$f>>2]|0;
  $785 = $784 & 32;
  $786 = ($785|0)==(0);
  if ($786) {
   (___fwritex($a$2,$776,$f)|0);
  }
  $787 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$778,$787);
  $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L343: do {
  if ((label|0) == 242) {
   $788 = ($f|0)==(0|0);
   if ($788) {
    $789 = ($l10n$0$lcssa|0)==(0);
    if ($789) {
     $$0 = 0;
    } else {
     $i$295 = 1;
     while(1) {
      $790 = (($nl_type) + ($i$295<<2)|0);
      $791 = HEAP32[$790>>2]|0;
      $792 = ($791|0)==(0);
      if ($792) {
       $i$295$lcssa = $i$295;
       break;
      }
      $794 = (($nl_arg) + ($i$295<<3)|0);
      _pop_arg_452($794,$791,$ap);
      $795 = (($i$295) + 1)|0;
      $796 = ($795|0)<(10);
      if ($796) {
       $i$295 = $795;
      } else {
       $$0 = 1;
       break L343;
      }
     }
     $793 = ($i$295$lcssa|0)<(10);
     if ($793) {
      $i$393 = $i$295$lcssa;
      while(1) {
       $799 = (($nl_type) + ($i$393<<2)|0);
       $800 = HEAP32[$799>>2]|0;
       $801 = ($800|0)==(0);
       $797 = (($i$393) + 1)|0;
       if (!($801)) {
        $$0 = -1;
        break L343;
       }
       $798 = ($797|0)<(10);
       if ($798) {
        $i$393 = $797;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_507($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _pop_arg_452($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$13 = 0, $$pre$i$16$i = 0, $$pre$i$i = 0, $$pre$phi$i$14Z2D = 0, $$pre$phi$i$17$iZ2D = 0, $$pre$phi$i$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$9 = 0, $R$1$i$9$lcssa = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$3$i = 0, $R$3$i$11 = 0, $R$3$i$i = 0, $RP$1$i = 0, $RP$1$i$8 = 0, $RP$1$i$8$lcssa = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $T$0$i = 0, $T$0$i$18$i = 0;
 var $T$0$i$18$i$lcssa = 0, $T$0$i$18$i$lcssa139 = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$12 = 0, $cond$i$i = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$20$i = 0, $not$$i$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i$17 = 0, $or$cond1$i = 0, $or$cond1$i$16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$5 = 0, $rsize$0$i$lcssa = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$069$i = 0, $sp$069$i$lcssa = 0, $sp$168$i = 0, $sp$168$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i$4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$747$i = 0, $tsize$746$i = 0;
 var $v$0$i = 0, $v$0$i$6 = 0, $v$0$i$lcssa = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[408>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (448 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[408>>2] = $22;
     } else {
      $23 = HEAP32[(424)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(416)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (448 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[408>>2] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(424)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(416)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(428)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (448 + ($93<<2)|0);
      $95 = HEAP32[408>>2]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[408>>2] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(424)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(416)>>2] = $82;
     HEAP32[(428)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(412)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (712 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(424)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (712 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(412)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(412)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(424)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(424)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(424)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(416)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(428)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (448 + ($231<<2)|0);
       $233 = HEAP32[408>>2]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[408>>2] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(424)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(416)>>2] = $rsize$0$i$lcssa;
      HEAP32[(428)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(412)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (712 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i$5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i$4 = $278;$v$0$i$6 = 0;
       while(1) {
        $285 = ((($t$0$i$4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i$5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i$4;$v$413$i = $t$0$i$4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i$4;
         }
        } else {
         $rsize$1$i = $rsize$0$i$5;$v$1$i = $v$0$i$6;
        }
        $291 = ((($t$0$i$4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i$4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i$5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i$4 = $295;$v$0$i$6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (712 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(416)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(424)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i$11 = 0;
           break;
          } else {
           $R$1$i$9 = $371;$RP$1$i$8 = $370;
          }
         } else {
          $R$1$i$9 = $368;$RP$1$i$8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i$9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i$9 = $374;$RP$1$i$8 = $373;
           continue;
          }
          $376 = ((($R$1$i$9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i$9$lcssa = $R$1$i$9;$RP$1$i$8$lcssa = $RP$1$i$8;
           break;
          } else {
           $R$1$i$9 = $377;$RP$1$i$8 = $376;
          }
         }
         $379 = ($RP$1$i$8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i$8$lcssa>>2] = 0;
          $R$3$i$11 = $R$1$i$9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i$11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (712 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i$11;
          $cond$i$12 = ($R$3$i$11|0)==(0|0);
          if ($cond$i$12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(412)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(412)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(424)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i$11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i$11;
          }
          $396 = ($R$3$i$11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(424)>>2]|0;
         $398 = ($R$3$i$11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i$11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i$11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i$11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(424)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i$11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i$11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (448 + ($428<<2)|0);
          $430 = HEAP32[408>>2]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[408>>2] = $434;
           $$pre$i$13 = ((($429)) + 8|0);
           $$pre$phi$i$14Z2D = $$pre$i$13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(424)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i$14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i$14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (712 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(412)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(412)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(424)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(424)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(416)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(428)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(428)>>2] = $514;
   HEAP32[(416)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(416)>>2] = 0;
   HEAP32[(428)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(420)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(420)>>2] = $529;
  $530 = HEAP32[(432)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(432)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[880>>2]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(888)>>2] = $539;
    HEAP32[(884)>>2] = $539;
    HEAP32[(892)>>2] = -1;
    HEAP32[(896)>>2] = -1;
    HEAP32[(900)>>2] = 0;
    HEAP32[(852)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[880>>2] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(888)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(848)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(840)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i$16 = $557 | $558;
  if ($or$cond1$i$16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(852)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(432)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (856);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(420)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$747$i = $599;$tsize$746$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(884)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(840)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i$17 = $587 & $588;
      if ($or$cond$i$17) {
       $589 = HEAP32[(848)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$747$i = $573;$tsize$746$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(888)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$747$i = $br$2$ph$i;$tsize$746$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(852)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(852)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$747$i = $622;$tsize$746$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(840)>>2]|0;
  $632 = (($631) + ($tsize$746$i))|0;
  HEAP32[(840)>>2] = $632;
  $633 = HEAP32[(844)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(844)>>2] = $632;
  }
  $635 = HEAP32[(432)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(424)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$747$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(424)>>2] = $tbase$747$i;
    }
    HEAP32[(856)>>2] = $tbase$747$i;
    HEAP32[(860)>>2] = $tsize$746$i;
    HEAP32[(868)>>2] = 0;
    $640 = HEAP32[880>>2]|0;
    HEAP32[(444)>>2] = $640;
    HEAP32[(440)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (448 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$746$i) + -40)|0;
    $647 = ((($tbase$747$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$747$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(432)>>2] = $654;
    HEAP32[(420)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(896)>>2]|0;
    HEAP32[(436)>>2] = $660;
   } else {
    $sp$069$i = (856);
    while(1) {
     $661 = HEAP32[$sp$069$i>>2]|0;
     $662 = ((($sp$069$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$747$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$069$i$lcssa = $sp$069$i;
      label = 203;
      break;
     }
     $666 = ((($sp$069$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$069$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$069$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$747$i>>>0);
      $or$cond49$i = $674 & $673;
      if ($or$cond49$i) {
       $675 = (($$lcssa151) + ($tsize$746$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(420)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$746$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(432)>>2] = $684;
       HEAP32[(420)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(896)>>2]|0;
       HEAP32[(436)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(424)>>2]|0;
    $693 = ($tbase$747$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(424)>>2] = $tbase$747$i;
     $757 = $tbase$747$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$747$i) + ($tsize$746$i)|0);
    $sp$168$i = (856);
    while(1) {
     $695 = HEAP32[$sp$168$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$168$i;$sp$168$i$lcssa = $sp$168$i;
      label = 211;
      break;
     }
     $697 = ((($sp$168$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (856);
      break;
     } else {
      $sp$168$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$168$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$747$i;
      $704 = ((($sp$168$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$746$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$747$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$747$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(420)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(420)>>2] = $732;
        HEAP32[(432)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(428)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(416)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(416)>>2] = $738;
         HEAP32[(428)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (448 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[408>>2]|0;
            $765 = $764 & $763;
            HEAP32[408>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (712 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(412)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(412)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(424)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(424)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(424)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (448 + ($842<<2)|0);
         $844 = HEAP32[408>>2]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[408>>2] = $848;
           $$pre$i$16$i = ((($843)) + 8|0);
           $$pre$phi$i$17$iZ2D = $$pre$i$16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(424)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i$17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i$17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (712 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(412)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(412)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i$18$i = $893;
        while(1) {
         $899 = ((($T$0$i$18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i$18$i$lcssa = $T$0$i$18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i$18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i$18$i$lcssa139 = $T$0$i$18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i$18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(424)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i$18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i$18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(424)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i$20$i = ($T$0$i$18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i$20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i$18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (856);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$746$i) + -40)|0;
    $945 = ((($tbase$747$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$747$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(432)>>2] = $952;
    HEAP32[(420)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(896)>>2]|0;
    HEAP32[(436)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(856)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(856)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(856)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(856)+12>>2]|0;
    HEAP32[(856)>>2] = $tbase$747$i;
    HEAP32[(860)>>2] = $tsize$746$i;
    HEAP32[(868)>>2] = 0;
    HEAP32[(864)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (448 + ($973<<2)|0);
      $975 = HEAP32[408>>2]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[408>>2] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(424)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (712 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(412)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(412)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(424)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(424)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(420)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(420)>>2] = $1055;
   $1056 = HEAP32[(432)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(432)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi46Z2D = 0, $$pre$phi48Z2D = 0, $$pre$phiZ2D = 0, $$pre45 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa53 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(424)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(428)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(416)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (448 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[408>>2]|0;
     $37 = $36 & $35;
     HEAP32[408>>2] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre47 = ((($25)) + 8|0);
     $$pre$phi48Z2D = $$pre47;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi48Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi48Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (712 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(412)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(412)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(424)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(424)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(424)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(432)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(420)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(420)>>2] = $122;
   HEAP32[(432)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(428)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(428)>>2] = 0;
   HEAP32[(416)>>2] = 0;
   return;
  }
  $127 = HEAP32[(428)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(416)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(416)>>2] = $130;
   HEAP32[(428)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (448 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(424)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[408>>2]|0;
     $154 = $153 & $152;
     HEAP32[408>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre45 = ((($141)) + 8|0);
     $$pre$phi46Z2D = $$pre45;
    } else {
     $156 = HEAP32[(424)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi46Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi46Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(424)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(424)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (712 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(412)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(412)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(424)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(424)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(424)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(428)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(416)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (448 + ($235<<2)|0);
  $237 = HEAP32[408>>2]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[408>>2] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(424)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (712 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(412)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(412)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa53 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(424)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa53;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(424)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(440)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(440)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (864);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(440)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(424)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(888)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(432)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(420)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(432)>>2] = $38;
  HEAP32[(420)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(428)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(416)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge$1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge$1 = 0;
  }
  HEAP32[(416)>>2] = $storemerge$1;
  HEAP32[(428)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (448 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[408>>2]|0;
    $91 = $90 & $89;
    HEAP32[408>>2] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (712 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(412)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(412)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(424)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(424)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(424)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(424)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(428)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(416)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (448 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[408>>2]|0;
     $32 = $31 & $30;
     HEAP32[408>>2] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (712 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(412)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(412)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(424)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(424)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(424)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(424)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(432)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(420)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(420)>>2] = $116;
   HEAP32[(432)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(428)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(428)>>2] = 0;
   HEAP32[(416)>>2] = 0;
   return;
  }
  $121 = HEAP32[(428)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(416)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(416)>>2] = $124;
   HEAP32[(428)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (448 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[408>>2]|0;
     $147 = $146 & $145;
     HEAP32[408>>2] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (712 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(412)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(412)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(424)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(424)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(424)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(428)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(416)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (448 + ($225<<2)|0);
  $227 = HEAP32[408>>2]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[408>>2] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(424)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (712 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(412)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(412)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(424)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(424)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&7](a1|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&3](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&0](a1|0,a2|0,a3|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&0](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&0](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b2(p0) {
 p0 = p0|0; nullFunc_ii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3);
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,b0,___stdio_write,___stdio_seek,___stdout_write,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,_cleanup_507,b1];
var FUNCTION_TABLE_ii = [b2,b2,___stdio_close,b2];
var FUNCTION_TABLE_viii = [b3];
var FUNCTION_TABLE_iiiii = [b4];
var FUNCTION_TABLE_iii = [b5];

  return { _i64Subtract: _i64Subtract, _free: _free, _i64Add: _i64Add, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _solve: _solve, _bitshift64Lshr: _bitshift64Lshr, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__solve = asm["_solve"]; asm["_solve"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__solve.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _solve = Module["_solve"] = asm["_solve"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



